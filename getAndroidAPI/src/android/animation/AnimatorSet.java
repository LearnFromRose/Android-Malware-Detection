// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   AnimatorSet.java

package android.animation;

import java.util.*;

// Referenced classes of package android.animation:
//            Animator, TimeInterpolator

public final class AnimatorSet extends Animator
{
    public class Builder
    {

        public Builder with(Animator anim)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder before(Animator anim)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder after(Animator anim)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder after(long delay)
        {
            throw new RuntimeException("Stub!");
        }

        final AnimatorSet this$0;

        Builder(Animator anim)
        {
            this.this$0 = AnimatorSet.this;
            super();
            throw new RuntimeException("Stub!");
        }
    }


    public AnimatorSet()
    {
        throw new RuntimeException("Stub!");
    }

    public transient void playTogether(Animator items[])
    {
        throw new RuntimeException("Stub!");
    }

    public void playTogether(Collection items)
    {
        throw new RuntimeException("Stub!");
    }

    public transient void playSequentially(Animator items[])
    {
        throw new RuntimeException("Stub!");
    }

    public void playSequentially(List items)
    {
        throw new RuntimeException("Stub!");
    }

    public ArrayList getChildAnimations()
    {
        throw new RuntimeException("Stub!");
    }

    public void setTarget(Object target)
    {
        throw new RuntimeException("Stub!");
    }

    public void setInterpolator(TimeInterpolator interpolator)
    {
        throw new RuntimeException("Stub!");
    }

    public TimeInterpolator getInterpolator()
    {
        throw new RuntimeException("Stub!");
    }

    public Builder play(Animator anim)
    {
        throw new RuntimeException("Stub!");
    }

    public void cancel()
    {
        throw new RuntimeException("Stub!");
    }

    public void end()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isRunning()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isStarted()
    {
        throw new RuntimeException("Stub!");
    }

    public long getStartDelay()
    {
        throw new RuntimeException("Stub!");
    }

    public void setStartDelay(long startDelay)
    {
        throw new RuntimeException("Stub!");
    }

    public long getDuration()
    {
        throw new RuntimeException("Stub!");
    }

    public AnimatorSet setDuration(long duration)
    {
        throw new RuntimeException("Stub!");
    }

    public void setupStartValues()
    {
        throw new RuntimeException("Stub!");
    }

    public void setupEndValues()
    {
        throw new RuntimeException("Stub!");
    }

    public void pause()
    {
        throw new RuntimeException("Stub!");
    }

    public void resume()
    {
        throw new RuntimeException("Stub!");
    }

    public void start()
    {
        throw new RuntimeException("Stub!");
    }

    public void setCurrentPlayTime(long playTime)
    {
        throw new RuntimeException("Stub!");
    }

    public long getCurrentPlayTime()
    {
        throw new RuntimeException("Stub!");
    }

    public AnimatorSet clone()
    {
        throw new RuntimeException("Stub!");
    }

    public void reverse()
    {
        throw new RuntimeException("Stub!");
    }

    public String toString()
    {
        throw new RuntimeException("Stub!");
    }

    public long getTotalDuration()
    {
        throw new RuntimeException("Stub!");
    }

    public volatile Animator clone()
    {
        return clone();
    }

    public volatile Animator setDuration(long l)
    {
        return setDuration(l);
    }

    public volatile Object clone()
        throws CloneNotSupportedException
    {
        return clone();
    }
}
