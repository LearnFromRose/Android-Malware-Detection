// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   ObjectAnimator.java

package android.animation;

import android.graphics.Path;
import android.util.Property;

// Referenced classes of package android.animation:
//            ValueAnimator, TypeConverter, TypeEvaluator, PropertyValuesHolder, 
//            Animator

public final class ObjectAnimator extends ValueAnimator
{

    public ObjectAnimator()
    {
        throw new RuntimeException("Stub!");
    }

    public void setPropertyName(String propertyName)
    {
        throw new RuntimeException("Stub!");
    }

    public void setProperty(Property property)
    {
        throw new RuntimeException("Stub!");
    }

    public String getPropertyName()
    {
        throw new RuntimeException("Stub!");
    }

    public static transient ObjectAnimator ofInt(Object target, String propertyName, int values[])
    {
        throw new RuntimeException("Stub!");
    }

    public static ObjectAnimator ofInt(Object target, String xPropertyName, String yPropertyName, Path path)
    {
        throw new RuntimeException("Stub!");
    }

    public static transient ObjectAnimator ofInt(Object target, Property property, int values[])
    {
        throw new RuntimeException("Stub!");
    }

    public static ObjectAnimator ofInt(Object target, Property xProperty, Property yProperty, Path path)
    {
        throw new RuntimeException("Stub!");
    }

    public static ObjectAnimator ofMultiInt(Object target, String propertyName, int values[][])
    {
        throw new RuntimeException("Stub!");
    }

    public static ObjectAnimator ofMultiInt(Object target, String propertyName, Path path)
    {
        throw new RuntimeException("Stub!");
    }

    public static transient ObjectAnimator ofMultiInt(Object target, String propertyName, TypeConverter converter, TypeEvaluator evaluator, Object values[])
    {
        throw new RuntimeException("Stub!");
    }

    public static transient ObjectAnimator ofArgb(Object target, String propertyName, int values[])
    {
        throw new RuntimeException("Stub!");
    }

    public static transient ObjectAnimator ofArgb(Object target, Property property, int values[])
    {
        throw new RuntimeException("Stub!");
    }

    public static transient ObjectAnimator ofFloat(Object target, String propertyName, float values[])
    {
        throw new RuntimeException("Stub!");
    }

    public static ObjectAnimator ofFloat(Object target, String xPropertyName, String yPropertyName, Path path)
    {
        throw new RuntimeException("Stub!");
    }

    public static transient ObjectAnimator ofFloat(Object target, Property property, float values[])
    {
        throw new RuntimeException("Stub!");
    }

    public static ObjectAnimator ofFloat(Object target, Property xProperty, Property yProperty, Path path)
    {
        throw new RuntimeException("Stub!");
    }

    public static ObjectAnimator ofMultiFloat(Object target, String propertyName, float values[][])
    {
        throw new RuntimeException("Stub!");
    }

    public static ObjectAnimator ofMultiFloat(Object target, String propertyName, Path path)
    {
        throw new RuntimeException("Stub!");
    }

    public static transient ObjectAnimator ofMultiFloat(Object target, String propertyName, TypeConverter converter, TypeEvaluator evaluator, Object values[])
    {
        throw new RuntimeException("Stub!");
    }

    public static transient ObjectAnimator ofObject(Object target, String propertyName, TypeEvaluator evaluator, Object values[])
    {
        throw new RuntimeException("Stub!");
    }

    public static ObjectAnimator ofObject(Object target, String propertyName, TypeConverter converter, Path path)
    {
        throw new RuntimeException("Stub!");
    }

    public static transient ObjectAnimator ofObject(Object target, Property property, TypeEvaluator evaluator, Object values[])
    {
        throw new RuntimeException("Stub!");
    }

    public static transient ObjectAnimator ofObject(Object target, Property property, TypeConverter converter, TypeEvaluator evaluator, Object values[])
    {
        throw new RuntimeException("Stub!");
    }

    public static ObjectAnimator ofObject(Object target, Property property, TypeConverter converter, Path path)
    {
        throw new RuntimeException("Stub!");
    }

    public static transient ObjectAnimator ofPropertyValuesHolder(Object target, PropertyValuesHolder values[])
    {
        throw new RuntimeException("Stub!");
    }

    public transient void setIntValues(int values[])
    {
        throw new RuntimeException("Stub!");
    }

    public transient void setFloatValues(float values[])
    {
        throw new RuntimeException("Stub!");
    }

    public transient void setObjectValues(Object values[])
    {
        throw new RuntimeException("Stub!");
    }

    public void setAutoCancel(boolean cancel)
    {
        throw new RuntimeException("Stub!");
    }

    public void start()
    {
        throw new RuntimeException("Stub!");
    }

    public ObjectAnimator setDuration(long duration)
    {
        throw new RuntimeException("Stub!");
    }

    public Object getTarget()
    {
        throw new RuntimeException("Stub!");
    }

    public void setTarget(Object target)
    {
        throw new RuntimeException("Stub!");
    }

    public void setupStartValues()
    {
        throw new RuntimeException("Stub!");
    }

    public void setupEndValues()
    {
        throw new RuntimeException("Stub!");
    }

    public ObjectAnimator clone()
    {
        throw new RuntimeException("Stub!");
    }

    public String toString()
    {
        throw new RuntimeException("Stub!");
    }

    public volatile ValueAnimator clone()
    {
        return clone();
    }

    public volatile ValueAnimator setDuration(long l)
    {
        return setDuration(l);
    }

    public volatile Animator clone()
    {
        return clone();
    }

    public volatile Animator setDuration(long l)
    {
        return setDuration(l);
    }

    public volatile Object clone()
        throws CloneNotSupportedException
    {
        return clone();
    }
}
