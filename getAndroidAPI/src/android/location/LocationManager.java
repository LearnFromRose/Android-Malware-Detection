// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   LocationManager.java

package android.location;

import android.app.PendingIntent;
import android.os.*;
import java.util.List;

// Referenced classes of package android.location:
//            GpsStatus, GnssStatus, GnssMeasurementsEvent, GnssNavigationMessage, 
//            LocationProvider, Criteria, LocationListener, Location, 
//            OnNmeaMessageListener

public class LocationManager
{

    LocationManager()
    {
        throw new RuntimeException("Stub!");
    }

    public List getAllProviders()
    {
        throw new RuntimeException("Stub!");
    }

    public List getProviders(boolean enabledOnly)
    {
        throw new RuntimeException("Stub!");
    }

    public LocationProvider getProvider(String name)
    {
        throw new RuntimeException("Stub!");
    }

    public List getProviders(Criteria criteria, boolean enabledOnly)
    {
        throw new RuntimeException("Stub!");
    }

    public String getBestProvider(Criteria criteria, boolean enabledOnly)
    {
        throw new RuntimeException("Stub!");
    }

    public void requestLocationUpdates(String provider, long minTime, float minDistance, LocationListener listener)
    {
        throw new RuntimeException("Stub!");
    }

    public void requestLocationUpdates(String provider, long minTime, float minDistance, LocationListener listener, Looper looper)
    {
        throw new RuntimeException("Stub!");
    }

    public void requestLocationUpdates(long minTime, float minDistance, Criteria criteria, LocationListener listener, Looper looper)
    {
        throw new RuntimeException("Stub!");
    }

    public void requestLocationUpdates(String provider, long minTime, float minDistance, PendingIntent intent)
    {
        throw new RuntimeException("Stub!");
    }

    public void requestLocationUpdates(long minTime, float minDistance, Criteria criteria, PendingIntent intent)
    {
        throw new RuntimeException("Stub!");
    }

    public void requestSingleUpdate(String provider, LocationListener listener, Looper looper)
    {
        throw new RuntimeException("Stub!");
    }

    public void requestSingleUpdate(Criteria criteria, LocationListener listener, Looper looper)
    {
        throw new RuntimeException("Stub!");
    }

    public void requestSingleUpdate(String provider, PendingIntent intent)
    {
        throw new RuntimeException("Stub!");
    }

    public void requestSingleUpdate(Criteria criteria, PendingIntent intent)
    {
        throw new RuntimeException("Stub!");
    }

    public void removeUpdates(LocationListener listener)
    {
        throw new RuntimeException("Stub!");
    }

    public void removeUpdates(PendingIntent intent)
    {
        throw new RuntimeException("Stub!");
    }

    public void addProximityAlert(double latitude, double longitude, float radius, long expiration, 
            PendingIntent intent)
    {
        throw new RuntimeException("Stub!");
    }

    public void removeProximityAlert(PendingIntent intent)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isLocationEnabled()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isProviderEnabled(String provider)
    {
        throw new RuntimeException("Stub!");
    }

    public Location getLastKnownLocation(String provider)
    {
        throw new RuntimeException("Stub!");
    }

    public void addTestProvider(String name, boolean requiresNetwork, boolean requiresSatellite, boolean requiresCell, boolean hasMonetaryCost, boolean supportsAltitude, boolean supportsSpeed, 
            boolean supportsBearing, int powerRequirement, int accuracy)
    {
        throw new RuntimeException("Stub!");
    }

    public void removeTestProvider(String provider)
    {
        throw new RuntimeException("Stub!");
    }

    public void setTestProviderLocation(String provider, Location loc)
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method clearTestProviderLocation is deprecated
     */

    public void clearTestProviderLocation(String provider)
    {
        throw new RuntimeException("Stub!");
    }

    public void setTestProviderEnabled(String provider, boolean enabled)
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method clearTestProviderEnabled is deprecated
     */

    public void clearTestProviderEnabled(String provider)
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method setTestProviderStatus is deprecated
     */

    public void setTestProviderStatus(String provider, int status, Bundle extras, long updateTime)
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method clearTestProviderStatus is deprecated
     */

    public void clearTestProviderStatus(String provider)
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method addGpsStatusListener is deprecated
     */

    public boolean addGpsStatusListener(GpsStatus.Listener listener)
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method removeGpsStatusListener is deprecated
     */

    public void removeGpsStatusListener(GpsStatus.Listener listener)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean registerGnssStatusCallback(GnssStatus.Callback callback)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean registerGnssStatusCallback(GnssStatus.Callback callback, Handler handler)
    {
        throw new RuntimeException("Stub!");
    }

    public void unregisterGnssStatusCallback(GnssStatus.Callback callback)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean addNmeaListener(OnNmeaMessageListener listener)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean addNmeaListener(OnNmeaMessageListener listener, Handler handler)
    {
        throw new RuntimeException("Stub!");
    }

    public void removeNmeaListener(OnNmeaMessageListener listener)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean registerGnssMeasurementsCallback(GnssMeasurementsEvent.Callback callback)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean registerGnssMeasurementsCallback(GnssMeasurementsEvent.Callback callback, Handler handler)
    {
        throw new RuntimeException("Stub!");
    }

    public void unregisterGnssMeasurementsCallback(GnssMeasurementsEvent.Callback callback)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean registerGnssNavigationMessageCallback(GnssNavigationMessage.Callback callback)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean registerGnssNavigationMessageCallback(GnssNavigationMessage.Callback callback, Handler handler)
    {
        throw new RuntimeException("Stub!");
    }

    public void unregisterGnssNavigationMessageCallback(GnssNavigationMessage.Callback callback)
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method getGpsStatus is deprecated
     */

    public GpsStatus getGpsStatus(GpsStatus status)
    {
        throw new RuntimeException("Stub!");
    }

    public int getGnssYearOfHardware()
    {
        throw new RuntimeException("Stub!");
    }

    public String getGnssHardwareModelName()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean sendExtraCommand(String provider, String command, Bundle extras)
    {
        throw new RuntimeException("Stub!");
    }

    public static final String EXTRA_PROVIDER_NAME = "android.location.extra.PROVIDER_NAME";
    public static final String GPS_PROVIDER = "gps";
    public static final String KEY_LOCATION_CHANGED = "location";
    public static final String KEY_PROVIDER_ENABLED = "providerEnabled";
    public static final String KEY_PROXIMITY_ENTERING = "entering";
    /**
     * @deprecated Field KEY_STATUS_CHANGED is deprecated
     */
    public static final String KEY_STATUS_CHANGED = "status";
    public static final String MODE_CHANGED_ACTION = "android.location.MODE_CHANGED";
    public static final String NETWORK_PROVIDER = "network";
    public static final String PASSIVE_PROVIDER = "passive";
    public static final String PROVIDERS_CHANGED_ACTION = "android.location.PROVIDERS_CHANGED";
}
