// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   UiAutomation.java

package android.app;

import android.accessibilityservice.AccessibilityServiceInfo;
import android.graphics.Bitmap;
import android.os.ParcelFileDescriptor;
import android.os.UserHandle;
import android.view.*;
import android.view.accessibility.AccessibilityEvent;
import android.view.accessibility.AccessibilityNodeInfo;
import java.util.List;
import java.util.concurrent.TimeoutException;

public final class UiAutomation
{
    public static interface OnAccessibilityEventListener
    {

        public abstract void onAccessibilityEvent(AccessibilityEvent accessibilityevent);
    }

    public static interface AccessibilityEventFilter
    {

        public abstract boolean accept(AccessibilityEvent accessibilityevent);
    }


    UiAutomation()
    {
        throw new RuntimeException("Stub!");
    }

    public void setOnAccessibilityEventListener(OnAccessibilityEventListener listener)
    {
        throw new RuntimeException("Stub!");
    }

    public void adoptShellPermissionIdentity()
    {
        throw new RuntimeException("Stub!");
    }

    public transient void adoptShellPermissionIdentity(String permissions[])
    {
        throw new RuntimeException("Stub!");
    }

    public void dropShellPermissionIdentity()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean performGlobalAction(int action)
    {
        throw new RuntimeException("Stub!");
    }

    public AccessibilityNodeInfo findFocus(int focus)
    {
        throw new RuntimeException("Stub!");
    }

    public AccessibilityServiceInfo getServiceInfo()
    {
        throw new RuntimeException("Stub!");
    }

    public void setServiceInfo(AccessibilityServiceInfo info)
    {
        throw new RuntimeException("Stub!");
    }

    public List getWindows()
    {
        throw new RuntimeException("Stub!");
    }

    public AccessibilityNodeInfo getRootInActiveWindow()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean injectInputEvent(InputEvent event, boolean sync)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean setRotation(int rotation)
    {
        throw new RuntimeException("Stub!");
    }

    public AccessibilityEvent executeAndWaitForEvent(Runnable command, AccessibilityEventFilter filter, long timeoutMillis)
        throws TimeoutException
    {
        throw new RuntimeException("Stub!");
    }

    public void waitForIdle(long idleTimeoutMillis, long globalTimeoutMillis)
        throws TimeoutException
    {
        throw new RuntimeException("Stub!");
    }

    public Bitmap takeScreenshot()
    {
        throw new RuntimeException("Stub!");
    }

    public void setRunAsMonkey(boolean enable)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean clearWindowContentFrameStats(int windowId)
    {
        throw new RuntimeException("Stub!");
    }

    public WindowContentFrameStats getWindowContentFrameStats(int windowId)
    {
        throw new RuntimeException("Stub!");
    }

    public void clearWindowAnimationFrameStats()
    {
        throw new RuntimeException("Stub!");
    }

    public WindowAnimationFrameStats getWindowAnimationFrameStats()
    {
        throw new RuntimeException("Stub!");
    }

    public void grantRuntimePermission(String packageName, String permission)
    {
        throw new RuntimeException("Stub!");
    }

    public void grantRuntimePermissionAsUser(String packageName, String permission, UserHandle userHandle)
    {
        throw new RuntimeException("Stub!");
    }

    public void revokeRuntimePermission(String packageName, String permission)
    {
        throw new RuntimeException("Stub!");
    }

    public void revokeRuntimePermissionAsUser(String packageName, String permission, UserHandle userHandle)
    {
        throw new RuntimeException("Stub!");
    }

    public ParcelFileDescriptor executeShellCommand(String command)
    {
        throw new RuntimeException("Stub!");
    }

    public static final int FLAG_DONT_SUPPRESS_ACCESSIBILITY_SERVICES = 1;
    public static final int ROTATION_FREEZE_0 = 0;
    public static final int ROTATION_FREEZE_180 = 2;
    public static final int ROTATION_FREEZE_270 = 3;
    public static final int ROTATION_FREEZE_90 = 1;
    public static final int ROTATION_FREEZE_CURRENT = -1;
    public static final int ROTATION_UNFREEZE = -2;
}
