// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   Notification.java

package android.app;

import android.content.Context;
import android.content.LocusId;
import android.graphics.Bitmap;
import android.graphics.drawable.Icon;
import android.media.AudioAttributes;
import android.media.session.MediaSession;
import android.net.Uri;
import android.os.*;
import android.widget.RemoteViews;
import java.util.List;

// Referenced classes of package android.app:
//            PendingIntent, Person, RemoteInput

public class Notification
    implements Parcelable
{
    public static final class WearableExtender
        implements Extender
    {

        public Builder extend(Builder builder)
        {
            throw new RuntimeException("Stub!");
        }

        public WearableExtender clone()
        {
            throw new RuntimeException("Stub!");
        }

        public WearableExtender addAction(Action action)
        {
            throw new RuntimeException("Stub!");
        }

        public WearableExtender addActions(List actions)
        {
            throw new RuntimeException("Stub!");
        }

        public WearableExtender clearActions()
        {
            throw new RuntimeException("Stub!");
        }

        public List getActions()
        {
            throw new RuntimeException("Stub!");
        }

        /**
         * @deprecated Method setDisplayIntent is deprecated
         */

        public WearableExtender setDisplayIntent(PendingIntent intent)
        {
            throw new RuntimeException("Stub!");
        }

        /**
         * @deprecated Method getDisplayIntent is deprecated
         */

        public PendingIntent getDisplayIntent()
        {
            throw new RuntimeException("Stub!");
        }

        /**
         * @deprecated Method addPage is deprecated
         */

        public WearableExtender addPage(Notification page)
        {
            throw new RuntimeException("Stub!");
        }

        /**
         * @deprecated Method addPages is deprecated
         */

        public WearableExtender addPages(List pages)
        {
            throw new RuntimeException("Stub!");
        }

        /**
         * @deprecated Method clearPages is deprecated
         */

        public WearableExtender clearPages()
        {
            throw new RuntimeException("Stub!");
        }

        /**
         * @deprecated Method getPages is deprecated
         */

        public List getPages()
        {
            throw new RuntimeException("Stub!");
        }

        /**
         * @deprecated Method setBackground is deprecated
         */

        public WearableExtender setBackground(Bitmap background)
        {
            throw new RuntimeException("Stub!");
        }

        /**
         * @deprecated Method getBackground is deprecated
         */

        public Bitmap getBackground()
        {
            throw new RuntimeException("Stub!");
        }

        /**
         * @deprecated Method setContentIcon is deprecated
         */

        public WearableExtender setContentIcon(int icon)
        {
            throw new RuntimeException("Stub!");
        }

        /**
         * @deprecated Method getContentIcon is deprecated
         */

        public int getContentIcon()
        {
            throw new RuntimeException("Stub!");
        }

        /**
         * @deprecated Method setContentIconGravity is deprecated
         */

        public WearableExtender setContentIconGravity(int contentIconGravity)
        {
            throw new RuntimeException("Stub!");
        }

        /**
         * @deprecated Method getContentIconGravity is deprecated
         */

        public int getContentIconGravity()
        {
            throw new RuntimeException("Stub!");
        }

        public WearableExtender setContentAction(int actionIndex)
        {
            throw new RuntimeException("Stub!");
        }

        public int getContentAction()
        {
            throw new RuntimeException("Stub!");
        }

        /**
         * @deprecated Method setGravity is deprecated
         */

        public WearableExtender setGravity(int gravity)
        {
            throw new RuntimeException("Stub!");
        }

        /**
         * @deprecated Method getGravity is deprecated
         */

        public int getGravity()
        {
            throw new RuntimeException("Stub!");
        }

        /**
         * @deprecated Method setCustomSizePreset is deprecated
         */

        public WearableExtender setCustomSizePreset(int sizePreset)
        {
            throw new RuntimeException("Stub!");
        }

        /**
         * @deprecated Method getCustomSizePreset is deprecated
         */

        public int getCustomSizePreset()
        {
            throw new RuntimeException("Stub!");
        }

        /**
         * @deprecated Method setCustomContentHeight is deprecated
         */

        public WearableExtender setCustomContentHeight(int height)
        {
            throw new RuntimeException("Stub!");
        }

        /**
         * @deprecated Method getCustomContentHeight is deprecated
         */

        public int getCustomContentHeight()
        {
            throw new RuntimeException("Stub!");
        }

        public WearableExtender setStartScrollBottom(boolean startScrollBottom)
        {
            throw new RuntimeException("Stub!");
        }

        public boolean getStartScrollBottom()
        {
            throw new RuntimeException("Stub!");
        }

        public WearableExtender setContentIntentAvailableOffline(boolean contentIntentAvailableOffline)
        {
            throw new RuntimeException("Stub!");
        }

        public boolean getContentIntentAvailableOffline()
        {
            throw new RuntimeException("Stub!");
        }

        /**
         * @deprecated Method setHintHideIcon is deprecated
         */

        public WearableExtender setHintHideIcon(boolean hintHideIcon)
        {
            throw new RuntimeException("Stub!");
        }

        /**
         * @deprecated Method getHintHideIcon is deprecated
         */

        public boolean getHintHideIcon()
        {
            throw new RuntimeException("Stub!");
        }

        /**
         * @deprecated Method setHintShowBackgroundOnly is deprecated
         */

        public WearableExtender setHintShowBackgroundOnly(boolean hintShowBackgroundOnly)
        {
            throw new RuntimeException("Stub!");
        }

        /**
         * @deprecated Method getHintShowBackgroundOnly is deprecated
         */

        public boolean getHintShowBackgroundOnly()
        {
            throw new RuntimeException("Stub!");
        }

        /**
         * @deprecated Method setHintAvoidBackgroundClipping is deprecated
         */

        public WearableExtender setHintAvoidBackgroundClipping(boolean hintAvoidBackgroundClipping)
        {
            throw new RuntimeException("Stub!");
        }

        /**
         * @deprecated Method getHintAvoidBackgroundClipping is deprecated
         */

        public boolean getHintAvoidBackgroundClipping()
        {
            throw new RuntimeException("Stub!");
        }

        /**
         * @deprecated Method setHintScreenTimeout is deprecated
         */

        public WearableExtender setHintScreenTimeout(int timeout)
        {
            throw new RuntimeException("Stub!");
        }

        /**
         * @deprecated Method getHintScreenTimeout is deprecated
         */

        public int getHintScreenTimeout()
        {
            throw new RuntimeException("Stub!");
        }

        /**
         * @deprecated Method setHintAmbientBigPicture is deprecated
         */

        public WearableExtender setHintAmbientBigPicture(boolean hintAmbientBigPicture)
        {
            throw new RuntimeException("Stub!");
        }

        /**
         * @deprecated Method getHintAmbientBigPicture is deprecated
         */

        public boolean getHintAmbientBigPicture()
        {
            throw new RuntimeException("Stub!");
        }

        public WearableExtender setHintContentIntentLaunchesActivity(boolean hintContentIntentLaunchesActivity)
        {
            throw new RuntimeException("Stub!");
        }

        public boolean getHintContentIntentLaunchesActivity()
        {
            throw new RuntimeException("Stub!");
        }

        public WearableExtender setDismissalId(String dismissalId)
        {
            throw new RuntimeException("Stub!");
        }

        public String getDismissalId()
        {
            throw new RuntimeException("Stub!");
        }

        public WearableExtender setBridgeTag(String bridgeTag)
        {
            throw new RuntimeException("Stub!");
        }

        public String getBridgeTag()
        {
            throw new RuntimeException("Stub!");
        }

        public volatile Object clone()
            throws CloneNotSupportedException
        {
            return clone();
        }

        /**
         * @deprecated Field SCREEN_TIMEOUT_LONG is deprecated
         */
        public static final int SCREEN_TIMEOUT_LONG = -1;
        /**
         * @deprecated Field SCREEN_TIMEOUT_SHORT is deprecated
         */
        public static final int SCREEN_TIMEOUT_SHORT = 0;
        /**
         * @deprecated Field SIZE_DEFAULT is deprecated
         */
        public static final int SIZE_DEFAULT = 0;
        /**
         * @deprecated Field SIZE_FULL_SCREEN is deprecated
         */
        public static final int SIZE_FULL_SCREEN = 5;
        /**
         * @deprecated Field SIZE_LARGE is deprecated
         */
        public static final int SIZE_LARGE = 4;
        /**
         * @deprecated Field SIZE_MEDIUM is deprecated
         */
        public static final int SIZE_MEDIUM = 3;
        /**
         * @deprecated Field SIZE_SMALL is deprecated
         */
        public static final int SIZE_SMALL = 2;
        /**
         * @deprecated Field SIZE_XSMALL is deprecated
         */
        public static final int SIZE_XSMALL = 1;
        public static final int UNSET_ACTION_INDEX = -1;

        public WearableExtender()
        {
            throw new RuntimeException("Stub!");
        }

        public WearableExtender(Notification notif)
        {
            throw new RuntimeException("Stub!");
        }
    }

    public static abstract class Style
    {

        protected void internalSetBigContentTitle(CharSequence title)
        {
            throw new RuntimeException("Stub!");
        }

        protected void internalSetSummaryText(CharSequence cs)
        {
            throw new RuntimeException("Stub!");
        }

        public void setBuilder(Builder builder)
        {
            throw new RuntimeException("Stub!");
        }

        protected void checkBuilder()
        {
            throw new RuntimeException("Stub!");
        }

        protected RemoteViews getStandardView(int layoutId)
        {
            throw new RuntimeException("Stub!");
        }

        public Notification build()
        {
            throw new RuntimeException("Stub!");
        }

        protected Builder mBuilder;

        public Style()
        {
            throw new RuntimeException("Stub!");
        }
    }

    public static class MessagingStyle extends Style
    {
        public static final class Message
        {

            public Message setData(String dataMimeType, Uri dataUri)
            {
                throw new RuntimeException("Stub!");
            }

            public CharSequence getText()
            {
                throw new RuntimeException("Stub!");
            }

            public long getTimestamp()
            {
                throw new RuntimeException("Stub!");
            }

            public Bundle getExtras()
            {
                throw new RuntimeException("Stub!");
            }

            /**
             * @deprecated Method getSender is deprecated
             */

            public CharSequence getSender()
            {
                throw new RuntimeException("Stub!");
            }

            public Person getSenderPerson()
            {
                throw new RuntimeException("Stub!");
            }

            public String getDataMimeType()
            {
                throw new RuntimeException("Stub!");
            }

            public Uri getDataUri()
            {
                throw new RuntimeException("Stub!");
            }

            /**
             * @deprecated Method Message is deprecated
             */

            public Message(CharSequence text, long timestamp, CharSequence sender)
            {
                throw new RuntimeException("Stub!");
            }

            public Message(CharSequence text, long timestamp, Person sender)
            {
                throw new RuntimeException("Stub!");
            }
        }


        public Person getUser()
        {
            throw new RuntimeException("Stub!");
        }

        /**
         * @deprecated Method getUserDisplayName is deprecated
         */

        public CharSequence getUserDisplayName()
        {
            throw new RuntimeException("Stub!");
        }

        public MessagingStyle setConversationTitle(CharSequence conversationTitle)
        {
            throw new RuntimeException("Stub!");
        }

        public CharSequence getConversationTitle()
        {
            throw new RuntimeException("Stub!");
        }

        /**
         * @deprecated Method addMessage is deprecated
         */

        public MessagingStyle addMessage(CharSequence text, long timestamp, CharSequence sender)
        {
            throw new RuntimeException("Stub!");
        }

        public MessagingStyle addMessage(CharSequence text, long timestamp, Person sender)
        {
            throw new RuntimeException("Stub!");
        }

        public MessagingStyle addMessage(Message message)
        {
            throw new RuntimeException("Stub!");
        }

        public MessagingStyle addHistoricMessage(Message message)
        {
            throw new RuntimeException("Stub!");
        }

        public List getMessages()
        {
            throw new RuntimeException("Stub!");
        }

        public List getHistoricMessages()
        {
            throw new RuntimeException("Stub!");
        }

        public MessagingStyle setGroupConversation(boolean isGroupConversation)
        {
            throw new RuntimeException("Stub!");
        }

        public boolean isGroupConversation()
        {
            throw new RuntimeException("Stub!");
        }

        public static final int MAXIMUM_RETAINED_MESSAGES = 25;

        /**
         * @deprecated Method MessagingStyle is deprecated
         */

        public MessagingStyle(CharSequence userDisplayName)
        {
            throw new RuntimeException("Stub!");
        }

        public MessagingStyle(Person user)
        {
            throw new RuntimeException("Stub!");
        }
    }

    public static class MediaStyle extends Style
    {

        public transient MediaStyle setShowActionsInCompactView(int actions[])
        {
            throw new RuntimeException("Stub!");
        }

        public MediaStyle setMediaSession(android.media.session.MediaSession.Token token)
        {
            throw new RuntimeException("Stub!");
        }

        public MediaStyle()
        {
            throw new RuntimeException("Stub!");
        }

        /**
         * @deprecated Method MediaStyle is deprecated
         */

        public MediaStyle(Builder builder)
        {
            throw new RuntimeException("Stub!");
        }
    }

    public static class InboxStyle extends Style
    {

        public InboxStyle setBigContentTitle(CharSequence title)
        {
            throw new RuntimeException("Stub!");
        }

        public InboxStyle setSummaryText(CharSequence cs)
        {
            throw new RuntimeException("Stub!");
        }

        public InboxStyle addLine(CharSequence cs)
        {
            throw new RuntimeException("Stub!");
        }

        public InboxStyle()
        {
            throw new RuntimeException("Stub!");
        }

        /**
         * @deprecated Method InboxStyle is deprecated
         */

        public InboxStyle(Builder builder)
        {
            throw new RuntimeException("Stub!");
        }
    }

    public static interface Extender
    {

        public abstract Builder extend(Builder builder);
    }

    public static class DecoratedMediaCustomViewStyle extends MediaStyle
    {

        public DecoratedMediaCustomViewStyle()
        {
            throw new RuntimeException("Stub!");
        }
    }

    public static class DecoratedCustomViewStyle extends Style
    {

        public DecoratedCustomViewStyle()
        {
            throw new RuntimeException("Stub!");
        }
    }

    public static final class CarExtender
        implements Extender
    {
        public static class UnreadConversation
        {

            public String[] getMessages()
            {
                throw new RuntimeException("Stub!");
            }

            public RemoteInput getRemoteInput()
            {
                throw new RuntimeException("Stub!");
            }

            public PendingIntent getReplyPendingIntent()
            {
                throw new RuntimeException("Stub!");
            }

            public PendingIntent getReadPendingIntent()
            {
                throw new RuntimeException("Stub!");
            }

            public String[] getParticipants()
            {
                throw new RuntimeException("Stub!");
            }

            public String getParticipant()
            {
                throw new RuntimeException("Stub!");
            }

            public long getLatestTimestamp()
            {
                throw new RuntimeException("Stub!");
            }

            UnreadConversation(String messages[], RemoteInput remoteInput, PendingIntent replyPendingIntent, PendingIntent readPendingIntent, String participants[], long latestTimestamp)
            {
                throw new RuntimeException("Stub!");
            }
        }

        public static class Builder
        {

            public Builder addMessage(String message)
            {
                throw new RuntimeException("Stub!");
            }

            public Builder setReplyAction(PendingIntent pendingIntent, RemoteInput remoteInput)
            {
                throw new RuntimeException("Stub!");
            }

            public Builder setReadPendingIntent(PendingIntent pendingIntent)
            {
                throw new RuntimeException("Stub!");
            }

            public Builder setLatestTimestamp(long timestamp)
            {
                throw new RuntimeException("Stub!");
            }

            public UnreadConversation build()
            {
                throw new RuntimeException("Stub!");
            }

            public Builder(String name)
            {
                throw new RuntimeException("Stub!");
            }
        }


        public Builder extend(Builder builder)
        {
            throw new RuntimeException("Stub!");
        }

        public CarExtender setColor(int color)
        {
            throw new RuntimeException("Stub!");
        }

        public int getColor()
        {
            throw new RuntimeException("Stub!");
        }

        public CarExtender setLargeIcon(Bitmap largeIcon)
        {
            throw new RuntimeException("Stub!");
        }

        public Bitmap getLargeIcon()
        {
            throw new RuntimeException("Stub!");
        }

        public CarExtender setUnreadConversation(UnreadConversation unreadConversation)
        {
            throw new RuntimeException("Stub!");
        }

        public UnreadConversation getUnreadConversation()
        {
            throw new RuntimeException("Stub!");
        }

        public CarExtender()
        {
            throw new RuntimeException("Stub!");
        }

        public CarExtender(Notification notif)
        {
            throw new RuntimeException("Stub!");
        }
    }

    public static class Builder
    {

        public Builder setShortcutId(String shortcutId)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setLocusId(LocusId locusId)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setBadgeIconType(int icon)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setGroupAlertBehavior(int groupAlertBehavior)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setBubbleMetadata(BubbleMetadata data)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setChannelId(String channelId)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setTimeoutAfter(long durationMs)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setWhen(long when)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setShowWhen(boolean show)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setUsesChronometer(boolean b)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setChronometerCountDown(boolean countDown)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setSmallIcon(int icon)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setSmallIcon(int icon, int level)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setSmallIcon(Icon icon)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setContentTitle(CharSequence title)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setContentText(CharSequence text)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setSubText(CharSequence text)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setSettingsText(CharSequence text)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setRemoteInputHistory(CharSequence text[])
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setNumber(int number)
        {
            throw new RuntimeException("Stub!");
        }

        /**
         * @deprecated Method setContentInfo is deprecated
         */

        public Builder setContentInfo(CharSequence info)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setProgress(int max, int progress, boolean indeterminate)
        {
            throw new RuntimeException("Stub!");
        }

        /**
         * @deprecated Method setContent is deprecated
         */

        public Builder setContent(RemoteViews views)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setCustomContentView(RemoteViews contentView)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setCustomBigContentView(RemoteViews contentView)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setCustomHeadsUpContentView(RemoteViews contentView)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setContentIntent(PendingIntent intent)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setDeleteIntent(PendingIntent intent)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setFullScreenIntent(PendingIntent intent, boolean highPriority)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setTicker(CharSequence tickerText)
        {
            throw new RuntimeException("Stub!");
        }

        /**
         * @deprecated Method setTicker is deprecated
         */

        public Builder setTicker(CharSequence tickerText, RemoteViews views)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setLargeIcon(Bitmap b)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setLargeIcon(Icon icon)
        {
            throw new RuntimeException("Stub!");
        }

        /**
         * @deprecated Method setSound is deprecated
         */

        public Builder setSound(Uri sound)
        {
            throw new RuntimeException("Stub!");
        }

        /**
         * @deprecated Method setSound is deprecated
         */

        public Builder setSound(Uri sound, int streamType)
        {
            throw new RuntimeException("Stub!");
        }

        /**
         * @deprecated Method setSound is deprecated
         */

        public Builder setSound(Uri sound, AudioAttributes audioAttributes)
        {
            throw new RuntimeException("Stub!");
        }

        /**
         * @deprecated Method setVibrate is deprecated
         */

        public Builder setVibrate(long pattern[])
        {
            throw new RuntimeException("Stub!");
        }

        /**
         * @deprecated Method setLights is deprecated
         */

        public Builder setLights(int argb, int onMs, int offMs)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setOngoing(boolean ongoing)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setColorized(boolean colorize)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setOnlyAlertOnce(boolean onlyAlertOnce)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setAutoCancel(boolean autoCancel)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setLocalOnly(boolean localOnly)
        {
            throw new RuntimeException("Stub!");
        }

        /**
         * @deprecated Method setDefaults is deprecated
         */

        public Builder setDefaults(int defaults)
        {
            throw new RuntimeException("Stub!");
        }

        /**
         * @deprecated Method setPriority is deprecated
         */

        public Builder setPriority(int pri)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setCategory(String category)
        {
            throw new RuntimeException("Stub!");
        }

        /**
         * @deprecated Method addPerson is deprecated
         */

        public Builder addPerson(String uri)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder addPerson(Person person)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setGroup(String groupKey)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setGroupSummary(boolean isGroupSummary)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setSortKey(String sortKey)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder addExtras(Bundle extras)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setExtras(Bundle extras)
        {
            throw new RuntimeException("Stub!");
        }

        public Bundle getExtras()
        {
            throw new RuntimeException("Stub!");
        }

        /**
         * @deprecated Method addAction is deprecated
         */

        public Builder addAction(int icon, CharSequence title, PendingIntent intent)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder addAction(Action action)
        {
            throw new RuntimeException("Stub!");
        }

        public transient Builder setActions(Action actions[])
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setStyle(Style style)
        {
            throw new RuntimeException("Stub!");
        }

        public Style getStyle()
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setVisibility(int visibility)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setPublicVersion(Notification n)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder extend(Extender extender)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setColor(int argb)
        {
            throw new RuntimeException("Stub!");
        }

        public RemoteViews createContentView()
        {
            throw new RuntimeException("Stub!");
        }

        public RemoteViews createBigContentView()
        {
            throw new RuntimeException("Stub!");
        }

        public RemoteViews createHeadsUpContentView()
        {
            throw new RuntimeException("Stub!");
        }

        public static Builder recoverBuilder(Context context, Notification n)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setAllowSystemGeneratedContextualActions(boolean allowed)
        {
            throw new RuntimeException("Stub!");
        }

        /**
         * @deprecated Method getNotification is deprecated
         */

        public Notification getNotification()
        {
            throw new RuntimeException("Stub!");
        }

        public Notification build()
        {
            throw new RuntimeException("Stub!");
        }

        public Builder(Context context, String channelId)
        {
            throw new RuntimeException("Stub!");
        }

        /**
         * @deprecated Method Builder is deprecated
         */

        public Builder(Context context)
        {
            throw new RuntimeException("Stub!");
        }
    }

    public static final class BubbleMetadata
        implements Parcelable
    {
        public static final class Builder
        {

            public Builder setIntent(PendingIntent intent)
            {
                throw new RuntimeException("Stub!");
            }

            public Builder setIcon(Icon icon)
            {
                throw new RuntimeException("Stub!");
            }

            public Builder setDesiredHeight(int height)
            {
                throw new RuntimeException("Stub!");
            }

            public Builder setDesiredHeightResId(int heightResId)
            {
                throw new RuntimeException("Stub!");
            }

            public Builder setAutoExpandBubble(boolean shouldExpand)
            {
                throw new RuntimeException("Stub!");
            }

            public Builder setSuppressNotification(boolean shouldSuppressNotif)
            {
                throw new RuntimeException("Stub!");
            }

            public Builder setDeleteIntent(PendingIntent deleteIntent)
            {
                throw new RuntimeException("Stub!");
            }

            public BubbleMetadata build()
            {
                throw new RuntimeException("Stub!");
            }

            public Builder()
            {
                throw new RuntimeException("Stub!");
            }
        }


        public PendingIntent getIntent()
        {
            throw new RuntimeException("Stub!");
        }

        public PendingIntent getDeleteIntent()
        {
            throw new RuntimeException("Stub!");
        }

        public Icon getIcon()
        {
            throw new RuntimeException("Stub!");
        }

        public int getDesiredHeight()
        {
            throw new RuntimeException("Stub!");
        }

        public int getDesiredHeightResId()
        {
            throw new RuntimeException("Stub!");
        }

        public boolean getAutoExpandBubble()
        {
            throw new RuntimeException("Stub!");
        }

        public boolean isNotificationSuppressed()
        {
            throw new RuntimeException("Stub!");
        }

        public int describeContents()
        {
            throw new RuntimeException("Stub!");
        }

        public void writeToParcel(Parcel out, int flags)
        {
            throw new RuntimeException("Stub!");
        }

        public static final android.os.Parcelable.Creator CREATOR = null;


        BubbleMetadata(Parcel in)
        {
            throw new RuntimeException("Stub!");
        }
    }

    public static class BigTextStyle extends Style
    {

        public BigTextStyle setBigContentTitle(CharSequence title)
        {
            throw new RuntimeException("Stub!");
        }

        public BigTextStyle setSummaryText(CharSequence cs)
        {
            throw new RuntimeException("Stub!");
        }

        public BigTextStyle bigText(CharSequence cs)
        {
            throw new RuntimeException("Stub!");
        }

        public BigTextStyle()
        {
            throw new RuntimeException("Stub!");
        }

        /**
         * @deprecated Method BigTextStyle is deprecated
         */

        public BigTextStyle(Builder builder)
        {
            throw new RuntimeException("Stub!");
        }
    }

    public static class BigPictureStyle extends Style
    {

        public BigPictureStyle setBigContentTitle(CharSequence title)
        {
            throw new RuntimeException("Stub!");
        }

        public BigPictureStyle setSummaryText(CharSequence cs)
        {
            throw new RuntimeException("Stub!");
        }

        public BigPictureStyle bigPicture(Bitmap b)
        {
            throw new RuntimeException("Stub!");
        }

        public BigPictureStyle bigLargeIcon(Bitmap b)
        {
            throw new RuntimeException("Stub!");
        }

        public BigPictureStyle bigLargeIcon(Icon icon)
        {
            throw new RuntimeException("Stub!");
        }

        public BigPictureStyle()
        {
            throw new RuntimeException("Stub!");
        }

        /**
         * @deprecated Method BigPictureStyle is deprecated
         */

        public BigPictureStyle(Builder builder)
        {
            throw new RuntimeException("Stub!");
        }
    }

    public static class Action
        implements Parcelable
    {
        public static final class WearableExtender
            implements Extender
        {

            public Builder extend(Builder builder)
            {
                throw new RuntimeException("Stub!");
            }

            public WearableExtender clone()
            {
                throw new RuntimeException("Stub!");
            }

            public WearableExtender setAvailableOffline(boolean availableOffline)
            {
                throw new RuntimeException("Stub!");
            }

            public boolean isAvailableOffline()
            {
                throw new RuntimeException("Stub!");
            }

            /**
             * @deprecated Method setInProgressLabel is deprecated
             */

            public WearableExtender setInProgressLabel(CharSequence label)
            {
                throw new RuntimeException("Stub!");
            }

            /**
             * @deprecated Method getInProgressLabel is deprecated
             */

            public CharSequence getInProgressLabel()
            {
                throw new RuntimeException("Stub!");
            }

            /**
             * @deprecated Method setConfirmLabel is deprecated
             */

            public WearableExtender setConfirmLabel(CharSequence label)
            {
                throw new RuntimeException("Stub!");
            }

            /**
             * @deprecated Method getConfirmLabel is deprecated
             */

            public CharSequence getConfirmLabel()
            {
                throw new RuntimeException("Stub!");
            }

            /**
             * @deprecated Method setCancelLabel is deprecated
             */

            public WearableExtender setCancelLabel(CharSequence label)
            {
                throw new RuntimeException("Stub!");
            }

            /**
             * @deprecated Method getCancelLabel is deprecated
             */

            public CharSequence getCancelLabel()
            {
                throw new RuntimeException("Stub!");
            }

            public WearableExtender setHintLaunchesActivity(boolean hintLaunchesActivity)
            {
                throw new RuntimeException("Stub!");
            }

            public boolean getHintLaunchesActivity()
            {
                throw new RuntimeException("Stub!");
            }

            public WearableExtender setHintDisplayActionInline(boolean hintDisplayInline)
            {
                throw new RuntimeException("Stub!");
            }

            public boolean getHintDisplayActionInline()
            {
                throw new RuntimeException("Stub!");
            }

            public volatile Object clone()
                throws CloneNotSupportedException
            {
                return clone();
            }

            public WearableExtender()
            {
                throw new RuntimeException("Stub!");
            }

            public WearableExtender(Action action)
            {
                throw new RuntimeException("Stub!");
            }
        }

        public static interface Extender
        {

            public abstract Builder extend(Builder builder);
        }

        public static final class Builder
        {

            public Builder addExtras(Bundle extras)
            {
                throw new RuntimeException("Stub!");
            }

            public Bundle getExtras()
            {
                throw new RuntimeException("Stub!");
            }

            public Builder addRemoteInput(RemoteInput remoteInput)
            {
                throw new RuntimeException("Stub!");
            }

            public Builder setAllowGeneratedReplies(boolean allowGeneratedReplies)
            {
                throw new RuntimeException("Stub!");
            }

            public Builder setSemanticAction(int semanticAction)
            {
                throw new RuntimeException("Stub!");
            }

            public Builder setContextual(boolean isContextual)
            {
                throw new RuntimeException("Stub!");
            }

            public Builder extend(Extender extender)
            {
                throw new RuntimeException("Stub!");
            }

            public Action build()
            {
                throw new RuntimeException("Stub!");
            }

            /**
             * @deprecated Method Builder is deprecated
             */

            public Builder(int icon, CharSequence title, PendingIntent intent)
            {
                throw new RuntimeException("Stub!");
            }

            public Builder(Icon icon, CharSequence title, PendingIntent intent)
            {
                throw new RuntimeException("Stub!");
            }

            public Builder(Action action)
            {
                throw new RuntimeException("Stub!");
            }
        }


        public Icon getIcon()
        {
            throw new RuntimeException("Stub!");
        }

        public Bundle getExtras()
        {
            throw new RuntimeException("Stub!");
        }

        public boolean getAllowGeneratedReplies()
        {
            throw new RuntimeException("Stub!");
        }

        public RemoteInput[] getRemoteInputs()
        {
            throw new RuntimeException("Stub!");
        }

        public int getSemanticAction()
        {
            throw new RuntimeException("Stub!");
        }

        public boolean isContextual()
        {
            throw new RuntimeException("Stub!");
        }

        public RemoteInput[] getDataOnlyRemoteInputs()
        {
            throw new RuntimeException("Stub!");
        }

        public Action clone()
        {
            throw new RuntimeException("Stub!");
        }

        public int describeContents()
        {
            throw new RuntimeException("Stub!");
        }

        public void writeToParcel(Parcel out, int flags)
        {
            throw new RuntimeException("Stub!");
        }

        public volatile Object clone()
            throws CloneNotSupportedException
        {
            return clone();
        }

        public static final android.os.Parcelable.Creator CREATOR = null;
        public static final int SEMANTIC_ACTION_ARCHIVE = 5;
        public static final int SEMANTIC_ACTION_CALL = 10;
        public static final int SEMANTIC_ACTION_DELETE = 4;
        public static final int SEMANTIC_ACTION_MARK_AS_READ = 2;
        public static final int SEMANTIC_ACTION_MARK_AS_UNREAD = 3;
        public static final int SEMANTIC_ACTION_MUTE = 6;
        public static final int SEMANTIC_ACTION_NONE = 0;
        public static final int SEMANTIC_ACTION_REPLY = 1;
        public static final int SEMANTIC_ACTION_THUMBS_DOWN = 9;
        public static final int SEMANTIC_ACTION_THUMBS_UP = 8;
        public static final int SEMANTIC_ACTION_UNMUTE = 7;
        public PendingIntent actionIntent;
        /**
         * @deprecated Field icon is deprecated
         */
        public int icon;
        public CharSequence title;


        /**
         * @deprecated Method Action is deprecated
         */

        public Action(int icon, CharSequence title, PendingIntent intent)
        {
            throw new RuntimeException("Stub!");
        }
    }


    public Notification()
    {
        audioStreamType = -1;
        color = 0;
        number = 0;
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method Notification is deprecated
     */

    public Notification(int icon, CharSequence tickerText, long when)
    {
        audioStreamType = -1;
        color = 0;
        number = 0;
        throw new RuntimeException("Stub!");
    }

    public Notification(Parcel parcel)
    {
        audioStreamType = -1;
        color = 0;
        number = 0;
        throw new RuntimeException("Stub!");
    }

    public String getGroup()
    {
        throw new RuntimeException("Stub!");
    }

    public String getSortKey()
    {
        throw new RuntimeException("Stub!");
    }

    public Notification clone()
    {
        throw new RuntimeException("Stub!");
    }

    public int describeContents()
    {
        throw new RuntimeException("Stub!");
    }

    public void writeToParcel(Parcel parcel, int flags)
    {
        throw new RuntimeException("Stub!");
    }

    public String toString()
    {
        throw new RuntimeException("Stub!");
    }

    public String getChannelId()
    {
        throw new RuntimeException("Stub!");
    }

    public long getTimeoutAfter()
    {
        throw new RuntimeException("Stub!");
    }

    public int getBadgeIconType()
    {
        throw new RuntimeException("Stub!");
    }

    public String getShortcutId()
    {
        throw new RuntimeException("Stub!");
    }

    public LocusId getLocusId()
    {
        throw new RuntimeException("Stub!");
    }

    public CharSequence getSettingsText()
    {
        throw new RuntimeException("Stub!");
    }

    public int getGroupAlertBehavior()
    {
        throw new RuntimeException("Stub!");
    }

    public BubbleMetadata getBubbleMetadata()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean getAllowSystemGeneratedContextualActions()
    {
        throw new RuntimeException("Stub!");
    }

    public Icon getSmallIcon()
    {
        throw new RuntimeException("Stub!");
    }

    public Icon getLargeIcon()
    {
        throw new RuntimeException("Stub!");
    }

    public volatile Object clone()
        throws CloneNotSupportedException
    {
        return clone();
    }

    public static final AudioAttributes AUDIO_ATTRIBUTES_DEFAULT = null;
    public static final int BADGE_ICON_LARGE = 2;
    public static final int BADGE_ICON_NONE = 0;
    public static final int BADGE_ICON_SMALL = 1;
    public static final String CATEGORY_ALARM = "alarm";
    public static final String CATEGORY_CALL = "call";
    public static final String CATEGORY_EMAIL = "email";
    public static final String CATEGORY_ERROR = "err";
    public static final String CATEGORY_EVENT = "event";
    public static final String CATEGORY_MESSAGE = "msg";
    public static final String CATEGORY_NAVIGATION = "navigation";
    public static final String CATEGORY_PROGRESS = "progress";
    public static final String CATEGORY_PROMO = "promo";
    public static final String CATEGORY_RECOMMENDATION = "recommendation";
    public static final String CATEGORY_REMINDER = "reminder";
    public static final String CATEGORY_SERVICE = "service";
    public static final String CATEGORY_SOCIAL = "social";
    public static final String CATEGORY_STATUS = "status";
    public static final String CATEGORY_SYSTEM = "sys";
    public static final String CATEGORY_TRANSPORT = "transport";
    public static final int COLOR_DEFAULT = 0;
    public static final android.os.Parcelable.Creator CREATOR = null;
    public static final int DEFAULT_ALL = -1;
    public static final int DEFAULT_LIGHTS = 4;
    public static final int DEFAULT_SOUND = 1;
    public static final int DEFAULT_VIBRATE = 2;
    public static final String EXTRA_AUDIO_CONTENTS_URI = "android.audioContents";
    public static final String EXTRA_BACKGROUND_IMAGE_URI = "android.backgroundImageUri";
    public static final String EXTRA_BIG_TEXT = "android.bigText";
    public static final String EXTRA_CHANNEL_GROUP_ID = "android.intent.extra.CHANNEL_GROUP_ID";
    public static final String EXTRA_CHANNEL_ID = "android.intent.extra.CHANNEL_ID";
    public static final String EXTRA_CHRONOMETER_COUNT_DOWN = "android.chronometerCountDown";
    public static final String EXTRA_COLORIZED = "android.colorized";
    public static final String EXTRA_COMPACT_ACTIONS = "android.compactActions";
    public static final String EXTRA_CONVERSATION_TITLE = "android.conversationTitle";
    public static final String EXTRA_HISTORIC_MESSAGES = "android.messages.historic";
    public static final String EXTRA_INFO_TEXT = "android.infoText";
    public static final String EXTRA_IS_GROUP_CONVERSATION = "android.isGroupConversation";
    /**
     * @deprecated Field EXTRA_LARGE_ICON is deprecated
     */
    public static final String EXTRA_LARGE_ICON = "android.largeIcon";
    public static final String EXTRA_LARGE_ICON_BIG = "android.largeIcon.big";
    public static final String EXTRA_MEDIA_SESSION = "android.mediaSession";
    public static final String EXTRA_MESSAGES = "android.messages";
    public static final String EXTRA_MESSAGING_PERSON = "android.messagingUser";
    public static final String EXTRA_NOTIFICATION_ID = "android.intent.extra.NOTIFICATION_ID";
    public static final String EXTRA_NOTIFICATION_TAG = "android.intent.extra.NOTIFICATION_TAG";
    /**
     * @deprecated Field EXTRA_PEOPLE is deprecated
     */
    public static final String EXTRA_PEOPLE = "android.people";
    public static final String EXTRA_PEOPLE_LIST = "android.people.list";
    public static final String EXTRA_PICTURE = "android.picture";
    public static final String EXTRA_PROGRESS = "android.progress";
    public static final String EXTRA_PROGRESS_INDETERMINATE = "android.progressIndeterminate";
    public static final String EXTRA_PROGRESS_MAX = "android.progressMax";
    public static final String EXTRA_REMOTE_INPUT_DRAFT = "android.remoteInputDraft";
    public static final String EXTRA_REMOTE_INPUT_HISTORY = "android.remoteInputHistory";
    /**
     * @deprecated Field EXTRA_SELF_DISPLAY_NAME is deprecated
     */
    public static final String EXTRA_SELF_DISPLAY_NAME = "android.selfDisplayName";
    public static final String EXTRA_SHOW_CHRONOMETER = "android.showChronometer";
    public static final String EXTRA_SHOW_WHEN = "android.showWhen";
    /**
     * @deprecated Field EXTRA_SMALL_ICON is deprecated
     */
    public static final String EXTRA_SMALL_ICON = "android.icon";
    public static final String EXTRA_SUB_TEXT = "android.subText";
    public static final String EXTRA_SUMMARY_TEXT = "android.summaryText";
    public static final String EXTRA_TEMPLATE = "android.template";
    public static final String EXTRA_TEXT = "android.text";
    public static final String EXTRA_TEXT_LINES = "android.textLines";
    public static final String EXTRA_TITLE = "android.title";
    public static final String EXTRA_TITLE_BIG = "android.title.big";
    public static final int FLAG_AUTO_CANCEL = 16;
    public static final int FLAG_BUBBLE = 4096;
    public static final int FLAG_FOREGROUND_SERVICE = 64;
    public static final int FLAG_GROUP_SUMMARY = 512;
    /**
     * @deprecated Field FLAG_HIGH_PRIORITY is deprecated
     */
    public static final int FLAG_HIGH_PRIORITY = 128;
    public static final int FLAG_INSISTENT = 4;
    public static final int FLAG_LOCAL_ONLY = 256;
    public static final int FLAG_NO_CLEAR = 32;
    public static final int FLAG_ONGOING_EVENT = 2;
    public static final int FLAG_ONLY_ALERT_ONCE = 8;
    /**
     * @deprecated Field FLAG_SHOW_LIGHTS is deprecated
     */
    public static final int FLAG_SHOW_LIGHTS = 1;
    public static final int GROUP_ALERT_ALL = 0;
    public static final int GROUP_ALERT_CHILDREN = 2;
    public static final int GROUP_ALERT_SUMMARY = 1;
    public static final String INTENT_CATEGORY_NOTIFICATION_PREFERENCES = "android.intent.category.NOTIFICATION_PREFERENCES";
    /**
     * @deprecated Field PRIORITY_DEFAULT is deprecated
     */
    public static final int PRIORITY_DEFAULT = 0;
    /**
     * @deprecated Field PRIORITY_HIGH is deprecated
     */
    public static final int PRIORITY_HIGH = 1;
    /**
     * @deprecated Field PRIORITY_LOW is deprecated
     */
    public static final int PRIORITY_LOW = -1;
    /**
     * @deprecated Field PRIORITY_MAX is deprecated
     */
    public static final int PRIORITY_MAX = 2;
    /**
     * @deprecated Field PRIORITY_MIN is deprecated
     */
    public static final int PRIORITY_MIN = -2;
    /**
     * @deprecated Field STREAM_DEFAULT is deprecated
     */
    public static final int STREAM_DEFAULT = -1;
    public static final int VISIBILITY_PRIVATE = 0;
    public static final int VISIBILITY_PUBLIC = 1;
    public static final int VISIBILITY_SECRET = -1;
    public Action actions[];
    /**
     * @deprecated Field audioAttributes is deprecated
     */
    public AudioAttributes audioAttributes;
    /**
     * @deprecated Field audioStreamType is deprecated
     */
    public int audioStreamType;
    /**
     * @deprecated Field bigContentView is deprecated
     */
    public RemoteViews bigContentView;
    public String category;
    public int color;
    public PendingIntent contentIntent;
    /**
     * @deprecated Field contentView is deprecated
     */
    public RemoteViews contentView;
    /**
     * @deprecated Field defaults is deprecated
     */
    public int defaults;
    public PendingIntent deleteIntent;
    public Bundle extras;
    public int flags;
    public PendingIntent fullScreenIntent;
    /**
     * @deprecated Field headsUpContentView is deprecated
     */
    public RemoteViews headsUpContentView;
    /**
     * @deprecated Field icon is deprecated
     */
    public int icon;
    public int iconLevel;
    /**
     * @deprecated Field largeIcon is deprecated
     */
    public Bitmap largeIcon;
    /**
     * @deprecated Field ledARGB is deprecated
     */
    public int ledARGB;
    /**
     * @deprecated Field ledOffMS is deprecated
     */
    public int ledOffMS;
    /**
     * @deprecated Field ledOnMS is deprecated
     */
    public int ledOnMS;
    public int number;
    /**
     * @deprecated Field priority is deprecated
     */
    public int priority;
    public Notification publicVersion;
    /**
     * @deprecated Field sound is deprecated
     */
    public Uri sound;
    public CharSequence tickerText;
    /**
     * @deprecated Field tickerView is deprecated
     */
    public RemoteViews tickerView;
    /**
     * @deprecated Field vibrate is deprecated
     */
    public long vibrate[];
    public int visibility;
    public long when;

}
