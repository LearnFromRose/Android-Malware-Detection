// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   TelephonyManager.java

package android.telephony;

import android.app.PendingIntent;
import android.net.Uri;
import android.os.Handler;
import android.os.PersistableBundle;
import android.telecom.PhoneAccountHandle;
import java.util.List;
import java.util.Map;
import java.util.concurrent.Executor;
import java.util.function.Consumer;

// Referenced classes of package android.telephony:
//            TelephonyScanManager, CellLocation, VisualVoicemailSmsFilterSettings, PhoneStateListener, 
//            IccOpenLogicalChannelResponse, NetworkScanRequest, NetworkScan, ServiceState, 
//            SignalStrength

public class TelephonyManager
{
    public static abstract class UssdResponseCallback
    {

        public void onReceiveUssdResponse(TelephonyManager telephonyManager, String request, CharSequence response)
        {
            throw new RuntimeException("Stub!");
        }

        public void onReceiveUssdResponseFailed(TelephonyManager telephonyManager, String request, int failureCode)
        {
            throw new RuntimeException("Stub!");
        }

        public UssdResponseCallback()
        {
            throw new RuntimeException("Stub!");
        }
    }

    public static abstract class CellInfoCallback
    {

        public abstract void onCellInfo(List list);

        public void onError(int errorCode, Throwable detail)
        {
            throw new RuntimeException("Stub!");
        }

        public static final int ERROR_MODEM_ERROR = 2;
        public static final int ERROR_TIMEOUT = 1;

        public CellInfoCallback()
        {
            throw new RuntimeException("Stub!");
        }
    }


    TelephonyManager()
    {
        throw new RuntimeException("Stub!");
    }

    public int getPhoneCount()
    {
        throw new RuntimeException("Stub!");
    }

    public TelephonyManager createForSubscriptionId(int subId)
    {
        throw new RuntimeException("Stub!");
    }

    public TelephonyManager createForPhoneAccountHandle(PhoneAccountHandle phoneAccountHandle)
    {
        throw new RuntimeException("Stub!");
    }

    public String getDeviceSoftwareVersion()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method getDeviceId is deprecated
     */

    public String getDeviceId()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method getDeviceId is deprecated
     */

    public String getDeviceId(int slotIndex)
    {
        throw new RuntimeException("Stub!");
    }

    public String getImei()
    {
        throw new RuntimeException("Stub!");
    }

    public String getImei(int slotIndex)
    {
        throw new RuntimeException("Stub!");
    }

    public String getTypeAllocationCode()
    {
        throw new RuntimeException("Stub!");
    }

    public String getTypeAllocationCode(int slotIndex)
    {
        throw new RuntimeException("Stub!");
    }

    public String getMeid()
    {
        throw new RuntimeException("Stub!");
    }

    public String getMeid(int slotIndex)
    {
        throw new RuntimeException("Stub!");
    }

    public String getManufacturerCode()
    {
        throw new RuntimeException("Stub!");
    }

    public String getManufacturerCode(int slotIndex)
    {
        throw new RuntimeException("Stub!");
    }

    public String getNai()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method getCellLocation is deprecated
     */

    public CellLocation getCellLocation()
    {
        throw new RuntimeException("Stub!");
    }

    public int getPhoneType()
    {
        throw new RuntimeException("Stub!");
    }

    public String getNetworkOperatorName()
    {
        throw new RuntimeException("Stub!");
    }

    public String getNetworkOperator()
    {
        throw new RuntimeException("Stub!");
    }

    public String getNetworkSpecifier()
    {
        throw new RuntimeException("Stub!");
    }

    public PersistableBundle getCarrierConfig()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isNetworkRoaming()
    {
        throw new RuntimeException("Stub!");
    }

    public String getNetworkCountryIso()
    {
        throw new RuntimeException("Stub!");
    }

    public int getNetworkType()
    {
        throw new RuntimeException("Stub!");
    }

    public int getDataNetworkType()
    {
        throw new RuntimeException("Stub!");
    }

    public int getVoiceNetworkType()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean hasIccCard()
    {
        throw new RuntimeException("Stub!");
    }

    public int getSimState()
    {
        throw new RuntimeException("Stub!");
    }

    public int getSimState(int slotIndex)
    {
        throw new RuntimeException("Stub!");
    }

    public String getSimOperator()
    {
        throw new RuntimeException("Stub!");
    }

    public String getSimOperatorName()
    {
        throw new RuntimeException("Stub!");
    }

    public String getSimCountryIso()
    {
        throw new RuntimeException("Stub!");
    }

    public String getSimSerialNumber()
    {
        throw new RuntimeException("Stub!");
    }

    public int getCardIdForDefaultEuicc()
    {
        throw new RuntimeException("Stub!");
    }

    public List getUiccCardsInfo()
    {
        throw new RuntimeException("Stub!");
    }

    public String getSubscriberId()
    {
        throw new RuntimeException("Stub!");
    }

    public String getGroupIdLevel1()
    {
        throw new RuntimeException("Stub!");
    }

    public String getLine1Number()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean setLine1NumberForDisplay(String alphaTag, String number)
    {
        throw new RuntimeException("Stub!");
    }

    public String getVoiceMailNumber()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean setVoiceMailNumber(String alphaTag, String number)
    {
        throw new RuntimeException("Stub!");
    }

    public String getVisualVoicemailPackageName()
    {
        throw new RuntimeException("Stub!");
    }

    public void setVisualVoicemailSmsFilterSettings(VisualVoicemailSmsFilterSettings settings)
    {
        throw new RuntimeException("Stub!");
    }

    public void sendVisualVoicemailSms(String number, int port, String text, PendingIntent sentIntent)
    {
        throw new RuntimeException("Stub!");
    }

    public String getVoiceMailAlphaTag()
    {
        throw new RuntimeException("Stub!");
    }

    public void sendDialerSpecialCode(String inputCode)
    {
        throw new RuntimeException("Stub!");
    }

    public int getCallState()
    {
        throw new RuntimeException("Stub!");
    }

    public int getDataActivity()
    {
        throw new RuntimeException("Stub!");
    }

    public int getDataState()
    {
        throw new RuntimeException("Stub!");
    }

    public void listen(PhoneStateListener listener, int events)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isVoiceCapable()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isSmsCapable()
    {
        throw new RuntimeException("Stub!");
    }

    public List getAllCellInfo()
    {
        throw new RuntimeException("Stub!");
    }

    public void requestCellInfoUpdate(Executor executor, CellInfoCallback callback)
    {
        throw new RuntimeException("Stub!");
    }

    public String getMmsUserAgent()
    {
        throw new RuntimeException("Stub!");
    }

    public String getMmsUAProfUrl()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method iccOpenLogicalChannel is deprecated
     */

    public IccOpenLogicalChannelResponse iccOpenLogicalChannel(String AID)
    {
        throw new RuntimeException("Stub!");
    }

    public IccOpenLogicalChannelResponse iccOpenLogicalChannel(String AID, int p2)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean iccCloseLogicalChannel(int channel)
    {
        throw new RuntimeException("Stub!");
    }

    public String iccTransmitApduLogicalChannel(int channel, int cla, int instruction, int p1, int p2, int p3, String data)
    {
        throw new RuntimeException("Stub!");
    }

    public String iccTransmitApduBasicChannel(int cla, int instruction, int p1, int p2, int p3, String data)
    {
        throw new RuntimeException("Stub!");
    }

    public byte[] iccExchangeSimIO(int fileID, int command, int p1, int p2, int p3, String filePath)
    {
        throw new RuntimeException("Stub!");
    }

    public String sendEnvelopeWithStatus(String content)
    {
        throw new RuntimeException("Stub!");
    }

    public String getIccAuthentication(int appType, int authType, String data)
    {
        throw new RuntimeException("Stub!");
    }

    public String[] getForbiddenPlmns()
    {
        throw new RuntimeException("Stub!");
    }

    public void setNetworkSelectionModeAutomatic()
    {
        throw new RuntimeException("Stub!");
    }

    public NetworkScan requestNetworkScan(NetworkScanRequest request, Executor executor, TelephonyScanManager.NetworkScanCallback callback)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean setNetworkSelectionModeManual(String operatorNumeric, boolean persistSelection)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean setPreferredNetworkTypeToGlobal()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean hasCarrierPrivileges()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean setOperatorBrandOverride(String brand)
    {
        throw new RuntimeException("Stub!");
    }

    public void sendUssdRequest(String ussdRequest, UssdResponseCallback callback, Handler handler)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isConcurrentVoiceAndDataSupported()
    {
        throw new RuntimeException("Stub!");
    }

    public void setDataEnabled(boolean enable)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isDataEnabled()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isDataRoamingEnabled()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean canChangeDtmfToneLength()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isWorldPhone()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method isTtyModeSupported is deprecated
     */

    public boolean isTtyModeSupported()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isRttSupported()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isHearingAidCompatibilitySupported()
    {
        throw new RuntimeException("Stub!");
    }

    public ServiceState getServiceState()
    {
        throw new RuntimeException("Stub!");
    }

    public Uri getVoicemailRingtoneUri(PhoneAccountHandle accountHandle)
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method setVoicemailRingtoneUri is deprecated
     */

    public void setVoicemailRingtoneUri(PhoneAccountHandle phoneAccountHandle, Uri uri)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isVoicemailVibrationEnabled(PhoneAccountHandle accountHandle)
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method setVoicemailVibrationEnabled is deprecated
     */

    public void setVoicemailVibrationEnabled(PhoneAccountHandle phoneAccountHandle, boolean enabled)
    {
        throw new RuntimeException("Stub!");
    }

    public int getSimCarrierId()
    {
        throw new RuntimeException("Stub!");
    }

    public CharSequence getSimCarrierIdName()
    {
        throw new RuntimeException("Stub!");
    }

    public int getSimSpecificCarrierId()
    {
        throw new RuntimeException("Stub!");
    }

    public CharSequence getSimSpecificCarrierIdName()
    {
        throw new RuntimeException("Stub!");
    }

    public int getCarrierIdFromSimMccMnc()
    {
        throw new RuntimeException("Stub!");
    }

    public SignalStrength getSignalStrength()
    {
        throw new RuntimeException("Stub!");
    }

    public Map getEmergencyNumberList()
    {
        throw new RuntimeException("Stub!");
    }

    public Map getEmergencyNumberList(int categories)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isEmergencyNumber(String number)
    {
        throw new RuntimeException("Stub!");
    }

    public void setPreferredOpportunisticDataSubscription(int subId, boolean needValidation, Executor executor, Consumer callback)
    {
        throw new RuntimeException("Stub!");
    }

    public int getPreferredOpportunisticDataSubscription()
    {
        throw new RuntimeException("Stub!");
    }

    public void updateAvailableNetworks(List availableNetworks, Executor executor, Consumer callback)
    {
        throw new RuntimeException("Stub!");
    }

    public int isMultiSimSupported()
    {
        throw new RuntimeException("Stub!");
    }

    public void switchMultiSimConfig(int numOfSims)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean doesSwitchMultiSimConfigTriggerReboot()
    {
        throw new RuntimeException("Stub!");
    }

    public static final String ACTION_CARRIER_MESSAGING_CLIENT_SERVICE = "android.telephony.action.CARRIER_MESSAGING_CLIENT_SERVICE";
    public static final String ACTION_CONFIGURE_VOICEMAIL = "android.telephony.action.CONFIGURE_VOICEMAIL";
    public static final String ACTION_NETWORK_COUNTRY_CHANGED = "android.telephony.action.NETWORK_COUNTRY_CHANGED";
    public static final String ACTION_PHONE_STATE_CHANGED = "android.intent.action.PHONE_STATE";
    public static final String ACTION_RESPOND_VIA_MESSAGE = "android.intent.action.RESPOND_VIA_MESSAGE";
    public static final String ACTION_SECRET_CODE = "android.telephony.action.SECRET_CODE";
    public static final String ACTION_SHOW_VOICEMAIL_NOTIFICATION = "android.telephony.action.SHOW_VOICEMAIL_NOTIFICATION";
    public static final String ACTION_SUBSCRIPTION_CARRIER_IDENTITY_CHANGED = "android.telephony.action.SUBSCRIPTION_CARRIER_IDENTITY_CHANGED";
    public static final String ACTION_SUBSCRIPTION_SPECIFIC_CARRIER_IDENTITY_CHANGED = "android.telephony.action.SUBSCRIPTION_SPECIFIC_CARRIER_IDENTITY_CHANGED";
    public static final int APPTYPE_CSIM = 4;
    public static final int APPTYPE_ISIM = 5;
    public static final int APPTYPE_RUIM = 3;
    public static final int APPTYPE_SIM = 1;
    public static final int APPTYPE_USIM = 2;
    public static final int AUTHTYPE_EAP_AKA = 129;
    public static final int AUTHTYPE_EAP_SIM = 128;
    public static final int CALL_STATE_IDLE = 0;
    public static final int CALL_STATE_OFFHOOK = 2;
    public static final int CALL_STATE_RINGING = 1;
    public static final int CDMA_ROAMING_MODE_AFFILIATED = 1;
    public static final int CDMA_ROAMING_MODE_ANY = 2;
    public static final int CDMA_ROAMING_MODE_HOME = 0;
    public static final int CDMA_ROAMING_MODE_RADIO_DEFAULT = -1;
    public static final int DATA_ACTIVITY_DORMANT = 4;
    public static final int DATA_ACTIVITY_IN = 1;
    public static final int DATA_ACTIVITY_INOUT = 3;
    public static final int DATA_ACTIVITY_NONE = 0;
    public static final int DATA_ACTIVITY_OUT = 2;
    public static final int DATA_CONNECTED = 2;
    public static final int DATA_CONNECTING = 1;
    public static final int DATA_DISCONNECTED = 0;
    public static final int DATA_SUSPENDED = 3;
    public static final int DATA_UNKNOWN = -1;
    public static final String EXTRA_CALL_VOICEMAIL_INTENT = "android.telephony.extra.CALL_VOICEMAIL_INTENT";
    public static final String EXTRA_CARRIER_ID = "android.telephony.extra.CARRIER_ID";
    public static final String EXTRA_CARRIER_NAME = "android.telephony.extra.CARRIER_NAME";
    public static final String EXTRA_HIDE_PUBLIC_SETTINGS = "android.telephony.extra.HIDE_PUBLIC_SETTINGS";
    /**
     * @deprecated Field EXTRA_INCOMING_NUMBER is deprecated
     */
    public static final String EXTRA_INCOMING_NUMBER = "incoming_number";
    public static final String EXTRA_IS_REFRESH = "android.telephony.extra.IS_REFRESH";
    public static final String EXTRA_LAUNCH_VOICEMAIL_SETTINGS_INTENT = "android.telephony.extra.LAUNCH_VOICEMAIL_SETTINGS_INTENT";
    public static final String EXTRA_NETWORK_COUNTRY = "android.telephony.extra.NETWORK_COUNTRY";
    public static final String EXTRA_NOTIFICATION_COUNT = "android.telephony.extra.NOTIFICATION_COUNT";
    public static final String EXTRA_PHONE_ACCOUNT_HANDLE = "android.telephony.extra.PHONE_ACCOUNT_HANDLE";
    public static final String EXTRA_SPECIFIC_CARRIER_ID = "android.telephony.extra.SPECIFIC_CARRIER_ID";
    public static final String EXTRA_SPECIFIC_CARRIER_NAME = "android.telephony.extra.SPECIFIC_CARRIER_NAME";
    public static final String EXTRA_STATE = "state";
    public static final String EXTRA_STATE_IDLE = null;
    public static final String EXTRA_STATE_OFFHOOK = null;
    public static final String EXTRA_STATE_RINGING = null;
    public static final String EXTRA_SUBSCRIPTION_ID = "android.telephony.extra.SUBSCRIPTION_ID";
    public static final String EXTRA_VOICEMAIL_NUMBER = "android.telephony.extra.VOICEMAIL_NUMBER";
    public static final String METADATA_HIDE_VOICEMAIL_SETTINGS_MENU = "android.telephony.HIDE_VOICEMAIL_SETTINGS_MENU";
    public static final int MULTISIM_ALLOWED = 0;
    public static final int MULTISIM_NOT_SUPPORTED_BY_CARRIER = 2;
    public static final int MULTISIM_NOT_SUPPORTED_BY_HARDWARE = 1;
    public static final int NETWORK_TYPE_1xRTT = 7;
    public static final int NETWORK_TYPE_CDMA = 4;
    public static final int NETWORK_TYPE_EDGE = 2;
    public static final int NETWORK_TYPE_EHRPD = 14;
    public static final int NETWORK_TYPE_EVDO_0 = 5;
    public static final int NETWORK_TYPE_EVDO_A = 6;
    public static final int NETWORK_TYPE_EVDO_B = 12;
    public static final int NETWORK_TYPE_GPRS = 1;
    public static final int NETWORK_TYPE_GSM = 16;
    public static final int NETWORK_TYPE_HSDPA = 8;
    public static final int NETWORK_TYPE_HSPA = 10;
    public static final int NETWORK_TYPE_HSPAP = 15;
    public static final int NETWORK_TYPE_HSUPA = 9;
    public static final int NETWORK_TYPE_IDEN = 11;
    public static final int NETWORK_TYPE_IWLAN = 18;
    public static final int NETWORK_TYPE_LTE = 13;
    public static final int NETWORK_TYPE_NR = 20;
    public static final int NETWORK_TYPE_TD_SCDMA = 17;
    public static final int NETWORK_TYPE_UMTS = 3;
    public static final int NETWORK_TYPE_UNKNOWN = 0;
    public static final int PHONE_TYPE_CDMA = 2;
    public static final int PHONE_TYPE_GSM = 1;
    public static final int PHONE_TYPE_NONE = 0;
    public static final int PHONE_TYPE_SIP = 3;
    public static final int SET_OPPORTUNISTIC_SUB_INACTIVE_SUBSCRIPTION = 2;
    public static final int SET_OPPORTUNISTIC_SUB_SUCCESS = 0;
    public static final int SET_OPPORTUNISTIC_SUB_VALIDATION_FAILED = 1;
    public static final int SIM_STATE_ABSENT = 1;
    public static final int SIM_STATE_CARD_IO_ERROR = 8;
    public static final int SIM_STATE_CARD_RESTRICTED = 9;
    public static final int SIM_STATE_NETWORK_LOCKED = 4;
    public static final int SIM_STATE_NOT_READY = 6;
    public static final int SIM_STATE_PERM_DISABLED = 7;
    public static final int SIM_STATE_PIN_REQUIRED = 2;
    public static final int SIM_STATE_PUK_REQUIRED = 3;
    public static final int SIM_STATE_READY = 5;
    public static final int SIM_STATE_UNKNOWN = 0;
    public static final int UNINITIALIZED_CARD_ID = -2;
    public static final int UNKNOWN_CARRIER_ID = -1;
    public static final int UNSUPPORTED_CARD_ID = -1;
    public static final int UPDATE_AVAILABLE_NETWORKS_ABORTED = 2;
    public static final int UPDATE_AVAILABLE_NETWORKS_INVALID_ARGUMENTS = 3;
    public static final int UPDATE_AVAILABLE_NETWORKS_NO_CARRIER_PRIVILEGE = 4;
    public static final int UPDATE_AVAILABLE_NETWORKS_SUCCESS = 0;
    public static final int UPDATE_AVAILABLE_NETWORKS_UNKNOWN_FAILURE = 1;
    public static final int USSD_ERROR_SERVICE_UNAVAIL = -2;
    public static final int USSD_RETURN_FAILURE = -1;
    public static final String VVM_TYPE_CVVM = "vvm_type_cvvm";
    public static final String VVM_TYPE_OMTP = "vvm_type_omtp";

}
