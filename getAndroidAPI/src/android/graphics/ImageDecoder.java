// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   ImageDecoder.java

package android.graphics;

import android.content.ContentResolver;
import android.content.res.AssetManager;
import android.content.res.Resources;
import android.graphics.drawable.Drawable;
import android.net.Uri;
import android.util.Size;
import java.io.File;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.util.concurrent.Callable;

// Referenced classes of package android.graphics:
//            PostProcessor, Rect, ColorSpace, Bitmap

public final class ImageDecoder
    implements AutoCloseable
{
    public static abstract class Source
    {

        Source()
        {
            throw new RuntimeException("Stub!");
        }
    }

    public static interface OnPartialImageListener
    {

        public abstract boolean onPartialImage(DecodeException decodeexception);
    }

    public static interface OnHeaderDecodedListener
    {

        public abstract void onHeaderDecoded(ImageDecoder imagedecoder, ImageInfo imageinfo, Source source);
    }

    public static class ImageInfo
    {

        public Size getSize()
        {
            throw new RuntimeException("Stub!");
        }

        public String getMimeType()
        {
            throw new RuntimeException("Stub!");
        }

        public boolean isAnimated()
        {
            throw new RuntimeException("Stub!");
        }

        public ColorSpace getColorSpace()
        {
            throw new RuntimeException("Stub!");
        }

        ImageInfo(ImageDecoder decoder)
        {
            throw new RuntimeException("Stub!");
        }
    }

    public static final class DecodeException extends IOException
    {

        public int getError()
        {
            throw new RuntimeException("Stub!");
        }

        public Source getSource()
        {
            throw new RuntimeException("Stub!");
        }

        public static final int SOURCE_EXCEPTION = 1;
        public static final int SOURCE_INCOMPLETE = 2;
        public static final int SOURCE_MALFORMED_DATA = 3;

        DecodeException(int error, Throwable cause, Source source)
        {
            throw new RuntimeException("Stub!");
        }
    }


    ImageDecoder(long nativePtr, int width, int height, boolean animated, boolean isNinePatch)
    {
        throw new RuntimeException("Stub!");
    }

    protected void finalize()
        throws Throwable
    {
        throw new RuntimeException("Stub!");
    }

    public static boolean isMimeTypeSupported(String mimeType)
    {
        throw new RuntimeException("Stub!");
    }

    public static Source createSource(Resources res, int resId)
    {
        throw new RuntimeException("Stub!");
    }

    public static Source createSource(ContentResolver cr, Uri uri)
    {
        throw new RuntimeException("Stub!");
    }

    public static Source createSource(AssetManager assets, String fileName)
    {
        throw new RuntimeException("Stub!");
    }

    public static Source createSource(ByteBuffer buffer)
    {
        throw new RuntimeException("Stub!");
    }

    public static Source createSource(File file)
    {
        throw new RuntimeException("Stub!");
    }

    public static Source createSource(Callable callable)
    {
        throw new RuntimeException("Stub!");
    }

    public void setTargetSize(int width, int height)
    {
        throw new RuntimeException("Stub!");
    }

    public void setTargetSampleSize(int sampleSize)
    {
        throw new RuntimeException("Stub!");
    }

    public void setAllocator(int allocator)
    {
        throw new RuntimeException("Stub!");
    }

    public int getAllocator()
    {
        throw new RuntimeException("Stub!");
    }

    public void setUnpremultipliedRequired(boolean unpremultipliedRequired)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isUnpremultipliedRequired()
    {
        throw new RuntimeException("Stub!");
    }

    public void setPostProcessor(PostProcessor postProcessor)
    {
        throw new RuntimeException("Stub!");
    }

    public PostProcessor getPostProcessor()
    {
        throw new RuntimeException("Stub!");
    }

    public void setOnPartialImageListener(OnPartialImageListener listener)
    {
        throw new RuntimeException("Stub!");
    }

    public OnPartialImageListener getOnPartialImageListener()
    {
        throw new RuntimeException("Stub!");
    }

    public void setCrop(Rect subset)
    {
        throw new RuntimeException("Stub!");
    }

    public Rect getCrop()
    {
        throw new RuntimeException("Stub!");
    }

    public void setMutableRequired(boolean mutable)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isMutableRequired()
    {
        throw new RuntimeException("Stub!");
    }

    public void setMemorySizePolicy(int policy)
    {
        throw new RuntimeException("Stub!");
    }

    public int getMemorySizePolicy()
    {
        throw new RuntimeException("Stub!");
    }

    public void setDecodeAsAlphaMaskEnabled(boolean enabled)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isDecodeAsAlphaMaskEnabled()
    {
        throw new RuntimeException("Stub!");
    }

    public void setTargetColorSpace(ColorSpace colorSpace)
    {
        throw new RuntimeException("Stub!");
    }

    public void close()
    {
        throw new RuntimeException("Stub!");
    }

    public static Drawable decodeDrawable(Source src, OnHeaderDecodedListener listener)
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public static Drawable decodeDrawable(Source src)
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public static Bitmap decodeBitmap(Source src, OnHeaderDecodedListener listener)
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public static Bitmap decodeBitmap(Source src)
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public static final int ALLOCATOR_DEFAULT = 0;
    public static final int ALLOCATOR_HARDWARE = 3;
    public static final int ALLOCATOR_SHARED_MEMORY = 2;
    public static final int ALLOCATOR_SOFTWARE = 1;
    public static final int MEMORY_POLICY_DEFAULT = 1;
    public static final int MEMORY_POLICY_LOW_RAM = 0;
}
