// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   Paint.java

package android.graphics;

import android.os.LocaleList;
import java.util.Locale;

// Referenced classes of package android.graphics:
//            Path, Shader, ColorFilter, Xfermode, 
//            BlendMode, PathEffect, MaskFilter, Typeface, 
//            Rect

public class Paint
{
    public static final class Style extends Enum
    {

        public static Style[] values()
        {
            return (Style[])$VALUES.clone();
        }

        public static Style valueOf(String name)
        {
            return (Style)Enum.valueOf(android/graphics/Paint$Style, name);
        }

        public static final Style FILL;
        public static final Style STROKE;
        public static final Style FILL_AND_STROKE;
        private static final Style $VALUES[];

        static 
        {
            FILL = new Style("FILL", 0);
            STROKE = new Style("STROKE", 1);
            FILL_AND_STROKE = new Style("FILL_AND_STROKE", 2);
            $VALUES = (new Style[] {
                FILL, STROKE, FILL_AND_STROKE
            });
        }

        private Style(String s, int i)
        {
            super(s, i);
        }
    }

    public static final class Join extends Enum
    {

        public static Join[] values()
        {
            return (Join[])$VALUES.clone();
        }

        public static Join valueOf(String name)
        {
            return (Join)Enum.valueOf(android/graphics/Paint$Join, name);
        }

        public static final Join MITER;
        public static final Join ROUND;
        public static final Join BEVEL;
        private static final Join $VALUES[];

        static 
        {
            MITER = new Join("MITER", 0);
            ROUND = new Join("ROUND", 1);
            BEVEL = new Join("BEVEL", 2);
            $VALUES = (new Join[] {
                MITER, ROUND, BEVEL
            });
        }

        private Join(String s, int i)
        {
            super(s, i);
        }
    }

    public static class FontMetricsInt
    {

        public String toString()
        {
            throw new RuntimeException("Stub!");
        }

        public int ascent;
        public int bottom;
        public int descent;
        public int leading;
        public int top;

        public FontMetricsInt()
        {
            throw new RuntimeException("Stub!");
        }
    }

    public static class FontMetrics
    {

        public float ascent;
        public float bottom;
        public float descent;
        public float leading;
        public float top;

        public FontMetrics()
        {
            throw new RuntimeException("Stub!");
        }
    }

    public static final class Cap extends Enum
    {

        public static Cap[] values()
        {
            return (Cap[])$VALUES.clone();
        }

        public static Cap valueOf(String name)
        {
            return (Cap)Enum.valueOf(android/graphics/Paint$Cap, name);
        }

        public static final Cap BUTT;
        public static final Cap ROUND;
        public static final Cap SQUARE;
        private static final Cap $VALUES[];

        static 
        {
            BUTT = new Cap("BUTT", 0);
            ROUND = new Cap("ROUND", 1);
            SQUARE = new Cap("SQUARE", 2);
            $VALUES = (new Cap[] {
                BUTT, ROUND, SQUARE
            });
        }

        private Cap(String s, int i)
        {
            super(s, i);
        }
    }

    public static final class Align extends Enum
    {

        public static Align[] values()
        {
            return (Align[])$VALUES.clone();
        }

        public static Align valueOf(String name)
        {
            return (Align)Enum.valueOf(android/graphics/Paint$Align, name);
        }

        public static final Align LEFT;
        public static final Align CENTER;
        public static final Align RIGHT;
        private static final Align $VALUES[];

        static 
        {
            LEFT = new Align("LEFT", 0);
            CENTER = new Align("CENTER", 1);
            RIGHT = new Align("RIGHT", 2);
            $VALUES = (new Align[] {
                LEFT, CENTER, RIGHT
            });
        }

        private Align(String s, int i)
        {
            super(s, i);
        }
    }


    public Paint()
    {
        throw new RuntimeException("Stub!");
    }

    public Paint(int flags)
    {
        throw new RuntimeException("Stub!");
    }

    public Paint(Paint paint)
    {
        throw new RuntimeException("Stub!");
    }

    public void reset()
    {
        throw new RuntimeException("Stub!");
    }

    public void set(Paint src)
    {
        throw new RuntimeException("Stub!");
    }

    public int getFlags()
    {
        throw new RuntimeException("Stub!");
    }

    public void setFlags(int flags)
    {
        throw new RuntimeException("Stub!");
    }

    public int getHinting()
    {
        throw new RuntimeException("Stub!");
    }

    public void setHinting(int mode)
    {
        throw new RuntimeException("Stub!");
    }

    public final boolean isAntiAlias()
    {
        throw new RuntimeException("Stub!");
    }

    public void setAntiAlias(boolean aa)
    {
        throw new RuntimeException("Stub!");
    }

    public final boolean isDither()
    {
        throw new RuntimeException("Stub!");
    }

    public void setDither(boolean dither)
    {
        throw new RuntimeException("Stub!");
    }

    public final boolean isLinearText()
    {
        throw new RuntimeException("Stub!");
    }

    public void setLinearText(boolean linearText)
    {
        throw new RuntimeException("Stub!");
    }

    public final boolean isSubpixelText()
    {
        throw new RuntimeException("Stub!");
    }

    public void setSubpixelText(boolean subpixelText)
    {
        throw new RuntimeException("Stub!");
    }

    public final boolean isUnderlineText()
    {
        throw new RuntimeException("Stub!");
    }

    public float getUnderlinePosition()
    {
        throw new RuntimeException("Stub!");
    }

    public float getUnderlineThickness()
    {
        throw new RuntimeException("Stub!");
    }

    public void setUnderlineText(boolean underlineText)
    {
        throw new RuntimeException("Stub!");
    }

    public final boolean isStrikeThruText()
    {
        throw new RuntimeException("Stub!");
    }

    public float getStrikeThruPosition()
    {
        throw new RuntimeException("Stub!");
    }

    public float getStrikeThruThickness()
    {
        throw new RuntimeException("Stub!");
    }

    public void setStrikeThruText(boolean strikeThruText)
    {
        throw new RuntimeException("Stub!");
    }

    public final boolean isFakeBoldText()
    {
        throw new RuntimeException("Stub!");
    }

    public void setFakeBoldText(boolean fakeBoldText)
    {
        throw new RuntimeException("Stub!");
    }

    public final boolean isFilterBitmap()
    {
        throw new RuntimeException("Stub!");
    }

    public void setFilterBitmap(boolean filter)
    {
        throw new RuntimeException("Stub!");
    }

    public Style getStyle()
    {
        throw new RuntimeException("Stub!");
    }

    public void setStyle(Style style)
    {
        throw new RuntimeException("Stub!");
    }

    public int getColor()
    {
        throw new RuntimeException("Stub!");
    }

    public long getColorLong()
    {
        throw new RuntimeException("Stub!");
    }

    public void setColor(int color)
    {
        throw new RuntimeException("Stub!");
    }

    public void setColor(long color)
    {
        throw new RuntimeException("Stub!");
    }

    public int getAlpha()
    {
        throw new RuntimeException("Stub!");
    }

    public void setAlpha(int a)
    {
        throw new RuntimeException("Stub!");
    }

    public void setARGB(int a, int r, int g, int b)
    {
        throw new RuntimeException("Stub!");
    }

    public float getStrokeWidth()
    {
        throw new RuntimeException("Stub!");
    }

    public void setStrokeWidth(float width)
    {
        throw new RuntimeException("Stub!");
    }

    public float getStrokeMiter()
    {
        throw new RuntimeException("Stub!");
    }

    public void setStrokeMiter(float miter)
    {
        throw new RuntimeException("Stub!");
    }

    public Cap getStrokeCap()
    {
        throw new RuntimeException("Stub!");
    }

    public void setStrokeCap(Cap cap)
    {
        throw new RuntimeException("Stub!");
    }

    public Join getStrokeJoin()
    {
        throw new RuntimeException("Stub!");
    }

    public void setStrokeJoin(Join join)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean getFillPath(Path src, Path dst)
    {
        throw new RuntimeException("Stub!");
    }

    public Shader getShader()
    {
        throw new RuntimeException("Stub!");
    }

    public Shader setShader(Shader shader)
    {
        throw new RuntimeException("Stub!");
    }

    public ColorFilter getColorFilter()
    {
        throw new RuntimeException("Stub!");
    }

    public ColorFilter setColorFilter(ColorFilter filter)
    {
        throw new RuntimeException("Stub!");
    }

    public Xfermode getXfermode()
    {
        throw new RuntimeException("Stub!");
    }

    public BlendMode getBlendMode()
    {
        throw new RuntimeException("Stub!");
    }

    public Xfermode setXfermode(Xfermode xfermode)
    {
        throw new RuntimeException("Stub!");
    }

    public void setBlendMode(BlendMode blendmode)
    {
        throw new RuntimeException("Stub!");
    }

    public PathEffect getPathEffect()
    {
        throw new RuntimeException("Stub!");
    }

    public PathEffect setPathEffect(PathEffect effect)
    {
        throw new RuntimeException("Stub!");
    }

    public MaskFilter getMaskFilter()
    {
        throw new RuntimeException("Stub!");
    }

    public MaskFilter setMaskFilter(MaskFilter maskfilter)
    {
        throw new RuntimeException("Stub!");
    }

    public Typeface getTypeface()
    {
        throw new RuntimeException("Stub!");
    }

    public Typeface setTypeface(Typeface typeface)
    {
        throw new RuntimeException("Stub!");
    }

    public void setShadowLayer(float radius, float dx, float dy, int shadowColor)
    {
        throw new RuntimeException("Stub!");
    }

    public void setShadowLayer(float radius, float dx, float dy, long shadowColor)
    {
        throw new RuntimeException("Stub!");
    }

    public void clearShadowLayer()
    {
        throw new RuntimeException("Stub!");
    }

    public float getShadowLayerRadius()
    {
        throw new RuntimeException("Stub!");
    }

    public float getShadowLayerDx()
    {
        throw new RuntimeException("Stub!");
    }

    public float getShadowLayerDy()
    {
        throw new RuntimeException("Stub!");
    }

    public int getShadowLayerColor()
    {
        throw new RuntimeException("Stub!");
    }

    public long getShadowLayerColorLong()
    {
        throw new RuntimeException("Stub!");
    }

    public Align getTextAlign()
    {
        throw new RuntimeException("Stub!");
    }

    public void setTextAlign(Align align)
    {
        throw new RuntimeException("Stub!");
    }

    public Locale getTextLocale()
    {
        throw new RuntimeException("Stub!");
    }

    public LocaleList getTextLocales()
    {
        throw new RuntimeException("Stub!");
    }

    public void setTextLocale(Locale locale)
    {
        throw new RuntimeException("Stub!");
    }

    public void setTextLocales(LocaleList locales)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isElegantTextHeight()
    {
        throw new RuntimeException("Stub!");
    }

    public void setElegantTextHeight(boolean elegant)
    {
        throw new RuntimeException("Stub!");
    }

    public float getTextSize()
    {
        throw new RuntimeException("Stub!");
    }

    public void setTextSize(float textSize)
    {
        throw new RuntimeException("Stub!");
    }

    public float getTextScaleX()
    {
        throw new RuntimeException("Stub!");
    }

    public void setTextScaleX(float scaleX)
    {
        throw new RuntimeException("Stub!");
    }

    public float getTextSkewX()
    {
        throw new RuntimeException("Stub!");
    }

    public void setTextSkewX(float skewX)
    {
        throw new RuntimeException("Stub!");
    }

    public float getLetterSpacing()
    {
        throw new RuntimeException("Stub!");
    }

    public void setLetterSpacing(float letterSpacing)
    {
        throw new RuntimeException("Stub!");
    }

    public float getWordSpacing()
    {
        throw new RuntimeException("Stub!");
    }

    public void setWordSpacing(float wordSpacing)
    {
        throw new RuntimeException("Stub!");
    }

    public String getFontFeatureSettings()
    {
        throw new RuntimeException("Stub!");
    }

    public void setFontFeatureSettings(String settings)
    {
        throw new RuntimeException("Stub!");
    }

    public String getFontVariationSettings()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean setFontVariationSettings(String fontVariationSettings)
    {
        throw new RuntimeException("Stub!");
    }

    public int getStartHyphenEdit()
    {
        throw new RuntimeException("Stub!");
    }

    public int getEndHyphenEdit()
    {
        throw new RuntimeException("Stub!");
    }

    public void setStartHyphenEdit(int startHyphen)
    {
        throw new RuntimeException("Stub!");
    }

    public void setEndHyphenEdit(int endHyphen)
    {
        throw new RuntimeException("Stub!");
    }

    public float ascent()
    {
        throw new RuntimeException("Stub!");
    }

    public float descent()
    {
        throw new RuntimeException("Stub!");
    }

    public float getFontMetrics(FontMetrics metrics)
    {
        throw new RuntimeException("Stub!");
    }

    public FontMetrics getFontMetrics()
    {
        throw new RuntimeException("Stub!");
    }

    public int getFontMetricsInt(FontMetricsInt fmi)
    {
        throw new RuntimeException("Stub!");
    }

    public FontMetricsInt getFontMetricsInt()
    {
        throw new RuntimeException("Stub!");
    }

    public float getFontSpacing()
    {
        throw new RuntimeException("Stub!");
    }

    public float measureText(char text[], int index, int count)
    {
        throw new RuntimeException("Stub!");
    }

    public float measureText(String text, int start, int end)
    {
        throw new RuntimeException("Stub!");
    }

    public float measureText(String text)
    {
        throw new RuntimeException("Stub!");
    }

    public float measureText(CharSequence text, int start, int end)
    {
        throw new RuntimeException("Stub!");
    }

    public int breakText(char text[], int index, int count, float maxWidth, float measuredWidth[])
    {
        throw new RuntimeException("Stub!");
    }

    public int breakText(CharSequence text, int start, int end, boolean measureForwards, float maxWidth, float measuredWidth[])
    {
        throw new RuntimeException("Stub!");
    }

    public int breakText(String text, boolean measureForwards, float maxWidth, float measuredWidth[])
    {
        throw new RuntimeException("Stub!");
    }

    public int getTextWidths(char text[], int index, int count, float widths[])
    {
        throw new RuntimeException("Stub!");
    }

    public int getTextWidths(CharSequence text, int start, int end, float widths[])
    {
        throw new RuntimeException("Stub!");
    }

    public int getTextWidths(String text, int start, int end, float widths[])
    {
        throw new RuntimeException("Stub!");
    }

    public int getTextWidths(String text, float widths[])
    {
        throw new RuntimeException("Stub!");
    }

    public float getTextRunAdvances(char chars[], int index, int count, int contextIndex, int contextCount, boolean isRtl, float advances[], 
            int advancesIndex)
    {
        throw new RuntimeException("Stub!");
    }

    public int getTextRunCursor(char text[], int contextStart, int contextLength, boolean isRtl, int offset, int cursorOpt)
    {
        throw new RuntimeException("Stub!");
    }

    public int getTextRunCursor(CharSequence text, int contextStart, int contextEnd, boolean isRtl, int offset, int cursorOpt)
    {
        throw new RuntimeException("Stub!");
    }

    public void getTextPath(char text[], int index, int count, float x, float y, Path path)
    {
        throw new RuntimeException("Stub!");
    }

    public void getTextPath(String text, int start, int end, float x, float y, Path path)
    {
        throw new RuntimeException("Stub!");
    }

    public void getTextBounds(String text, int start, int end, Rect bounds)
    {
        throw new RuntimeException("Stub!");
    }

    public void getTextBounds(CharSequence text, int start, int end, Rect bounds)
    {
        throw new RuntimeException("Stub!");
    }

    public void getTextBounds(char text[], int index, int count, Rect bounds)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean hasGlyph(String string)
    {
        throw new RuntimeException("Stub!");
    }

    public float getRunAdvance(char text[], int start, int end, int contextStart, int contextEnd, boolean isRtl, int offset)
    {
        throw new RuntimeException("Stub!");
    }

    public float getRunAdvance(CharSequence text, int start, int end, int contextStart, int contextEnd, boolean isRtl, int offset)
    {
        throw new RuntimeException("Stub!");
    }

    public int getOffsetForAdvance(char text[], int start, int end, int contextStart, int contextEnd, boolean isRtl, float advance)
    {
        throw new RuntimeException("Stub!");
    }

    public int getOffsetForAdvance(CharSequence text, int start, int end, int contextStart, int contextEnd, boolean isRtl, float advance)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean equalsForTextMeasurement(Paint other)
    {
        throw new RuntimeException("Stub!");
    }

    public static final int ANTI_ALIAS_FLAG = 1;
    public static final int CURSOR_AFTER = 0;
    public static final int CURSOR_AT = 4;
    public static final int CURSOR_AT_OR_AFTER = 1;
    public static final int CURSOR_AT_OR_BEFORE = 3;
    public static final int CURSOR_BEFORE = 2;
    public static final int DEV_KERN_TEXT_FLAG = 256;
    public static final int DITHER_FLAG = 4;
    public static final int EMBEDDED_BITMAP_TEXT_FLAG = 1024;
    public static final int END_HYPHEN_EDIT_INSERT_ARMENIAN_HYPHEN = 3;
    public static final int END_HYPHEN_EDIT_INSERT_HYPHEN = 2;
    public static final int END_HYPHEN_EDIT_INSERT_MAQAF = 4;
    public static final int END_HYPHEN_EDIT_INSERT_UCAS_HYPHEN = 5;
    public static final int END_HYPHEN_EDIT_INSERT_ZWJ_AND_HYPHEN = 6;
    public static final int END_HYPHEN_EDIT_NO_EDIT = 0;
    public static final int END_HYPHEN_EDIT_REPLACE_WITH_HYPHEN = 1;
    public static final int FAKE_BOLD_TEXT_FLAG = 32;
    public static final int FILTER_BITMAP_FLAG = 2;
    public static final int HINTING_OFF = 0;
    public static final int HINTING_ON = 1;
    public static final int LINEAR_TEXT_FLAG = 64;
    public static final int START_HYPHEN_EDIT_INSERT_HYPHEN = 1;
    public static final int START_HYPHEN_EDIT_INSERT_ZWJ = 2;
    public static final int START_HYPHEN_EDIT_NO_EDIT = 0;
    public static final int STRIKE_THRU_TEXT_FLAG = 16;
    public static final int SUBPIXEL_TEXT_FLAG = 128;
    public static final int UNDERLINE_TEXT_FLAG = 8;
}
