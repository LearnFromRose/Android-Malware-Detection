// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   RenderNode.java

package android.graphics;


// Referenced classes of package android.graphics:
//            RecordingCanvas, Matrix, Paint, Rect, 
//            Outline

public final class RenderNode
{

    public RenderNode(String name)
    {
        throw new RuntimeException("Stub!");
    }

    public RecordingCanvas beginRecording(int width, int height)
    {
        throw new RuntimeException("Stub!");
    }

    public RecordingCanvas beginRecording()
    {
        throw new RuntimeException("Stub!");
    }

    public void endRecording()
    {
        throw new RuntimeException("Stub!");
    }

    public void discardDisplayList()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean hasDisplayList()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean hasIdentityMatrix()
    {
        throw new RuntimeException("Stub!");
    }

    public void getMatrix(Matrix outMatrix)
    {
        throw new RuntimeException("Stub!");
    }

    public void getInverseMatrix(Matrix outMatrix)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean setUseCompositingLayer(boolean forceToLayer, Paint paint)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean getUseCompositingLayer()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean setClipRect(Rect rect)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean setClipToBounds(boolean clipToBounds)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean getClipToBounds()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean setProjectBackwards(boolean shouldProject)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean setProjectionReceiver(boolean shouldRecieve)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean setOutline(Outline outline)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean hasShadow()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean setSpotShadowColor(int color)
    {
        throw new RuntimeException("Stub!");
    }

    public int getSpotShadowColor()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean setAmbientShadowColor(int color)
    {
        throw new RuntimeException("Stub!");
    }

    public int getAmbientShadowColor()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean setClipToOutline(boolean clipToOutline)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean getClipToOutline()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean setAlpha(float alpha)
    {
        throw new RuntimeException("Stub!");
    }

    public float getAlpha()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean setHasOverlappingRendering(boolean hasOverlappingRendering)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean hasOverlappingRendering()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean setElevation(float lift)
    {
        throw new RuntimeException("Stub!");
    }

    public float getElevation()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean setTranslationX(float translationX)
    {
        throw new RuntimeException("Stub!");
    }

    public float getTranslationX()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean setTranslationY(float translationY)
    {
        throw new RuntimeException("Stub!");
    }

    public float getTranslationY()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean setTranslationZ(float translationZ)
    {
        throw new RuntimeException("Stub!");
    }

    public float getTranslationZ()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean setRotationZ(float rotation)
    {
        throw new RuntimeException("Stub!");
    }

    public float getRotationZ()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean setRotationX(float rotationX)
    {
        throw new RuntimeException("Stub!");
    }

    public float getRotationX()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean setRotationY(float rotationY)
    {
        throw new RuntimeException("Stub!");
    }

    public float getRotationY()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean setScaleX(float scaleX)
    {
        throw new RuntimeException("Stub!");
    }

    public float getScaleX()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean setScaleY(float scaleY)
    {
        throw new RuntimeException("Stub!");
    }

    public float getScaleY()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean setPivotX(float pivotX)
    {
        throw new RuntimeException("Stub!");
    }

    public float getPivotX()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean setPivotY(float pivotY)
    {
        throw new RuntimeException("Stub!");
    }

    public float getPivotY()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isPivotExplicitlySet()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean resetPivot()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean setCameraDistance(float distance)
    {
        throw new RuntimeException("Stub!");
    }

    public float getCameraDistance()
    {
        throw new RuntimeException("Stub!");
    }

    public int getLeft()
    {
        throw new RuntimeException("Stub!");
    }

    public int getTop()
    {
        throw new RuntimeException("Stub!");
    }

    public int getRight()
    {
        throw new RuntimeException("Stub!");
    }

    public int getBottom()
    {
        throw new RuntimeException("Stub!");
    }

    public int getWidth()
    {
        throw new RuntimeException("Stub!");
    }

    public int getHeight()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean setPosition(int left, int top, int right, int bottom)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean setPosition(Rect position)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean offsetLeftAndRight(int offset)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean offsetTopAndBottom(int offset)
    {
        throw new RuntimeException("Stub!");
    }

    public long computeApproximateMemoryUsage()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean setForceDarkAllowed(boolean allow)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isForceDarkAllowed()
    {
        throw new RuntimeException("Stub!");
    }

    public long getUniqueId()
    {
        throw new RuntimeException("Stub!");
    }
}
