// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   Bitmap.java

package android.graphics;

import android.hardware.HardwareBuffer;
import android.os.Parcel;
import android.os.Parcelable;
import android.util.DisplayMetrics;
import java.io.OutputStream;
import java.nio.Buffer;

// Referenced classes of package android.graphics:
//            ColorSpace, Matrix, Picture, Canvas, 
//            Color, Paint

public final class Bitmap
    implements Parcelable
{
    public static final class Config extends Enum
    {

        public static Config[] values()
        {
            return (Config[])$VALUES.clone();
        }

        public static Config valueOf(String name)
        {
            return (Config)Enum.valueOf(android/graphics/Bitmap$Config, name);
        }

        public static final Config ALPHA_8;
        public static final Config RGB_565;
        /**
         * @deprecated Field ARGB_4444 is deprecated
         */
        public static final Config ARGB_4444;
        public static final Config ARGB_8888;
        public static final Config RGBA_F16;
        public static final Config HARDWARE;
        private static final Config $VALUES[];

        static 
        {
            ALPHA_8 = new Config("ALPHA_8", 0);
            RGB_565 = new Config("RGB_565", 1);
            ARGB_4444 = new Config("ARGB_4444", 2);
            ARGB_8888 = new Config("ARGB_8888", 3);
            RGBA_F16 = new Config("RGBA_F16", 4);
            HARDWARE = new Config("HARDWARE", 5);
            $VALUES = (new Config[] {
                ALPHA_8, RGB_565, ARGB_4444, ARGB_8888, RGBA_F16, HARDWARE
            });
        }

        private Config(String s, int i)
        {
            super(s, i);
        }
    }

    public static final class CompressFormat extends Enum
    {

        public static CompressFormat[] values()
        {
            return (CompressFormat[])$VALUES.clone();
        }

        public static CompressFormat valueOf(String name)
        {
            return (CompressFormat)Enum.valueOf(android/graphics/Bitmap$CompressFormat, name);
        }

        public static final CompressFormat JPEG;
        public static final CompressFormat PNG;
        public static final CompressFormat WEBP;
        private static final CompressFormat $VALUES[];

        static 
        {
            JPEG = new CompressFormat("JPEG", 0);
            PNG = new CompressFormat("PNG", 1);
            WEBP = new CompressFormat("WEBP", 2);
            $VALUES = (new CompressFormat[] {
                JPEG, PNG, WEBP
            });
        }

        private CompressFormat(String s, int i)
        {
            super(s, i);
        }
    }


    Bitmap()
    {
        throw new RuntimeException("Stub!");
    }

    public int getDensity()
    {
        throw new RuntimeException("Stub!");
    }

    public void setDensity(int density)
    {
        throw new RuntimeException("Stub!");
    }

    public void reconfigure(int width, int height, Config config)
    {
        throw new RuntimeException("Stub!");
    }

    public void setWidth(int width)
    {
        throw new RuntimeException("Stub!");
    }

    public void setHeight(int height)
    {
        throw new RuntimeException("Stub!");
    }

    public void setConfig(Config config)
    {
        throw new RuntimeException("Stub!");
    }

    public void recycle()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isRecycled()
    {
        throw new RuntimeException("Stub!");
    }

    public int getGenerationId()
    {
        throw new RuntimeException("Stub!");
    }

    public void copyPixelsToBuffer(Buffer dst)
    {
        throw new RuntimeException("Stub!");
    }

    public void copyPixelsFromBuffer(Buffer src)
    {
        throw new RuntimeException("Stub!");
    }

    public Bitmap copy(Config config, boolean isMutable)
    {
        throw new RuntimeException("Stub!");
    }

    public static Bitmap wrapHardwareBuffer(HardwareBuffer hardwareBuffer, ColorSpace colorSpace)
    {
        throw new RuntimeException("Stub!");
    }

    public static Bitmap createScaledBitmap(Bitmap src, int dstWidth, int dstHeight, boolean filter)
    {
        throw new RuntimeException("Stub!");
    }

    public static Bitmap createBitmap(Bitmap src)
    {
        throw new RuntimeException("Stub!");
    }

    public static Bitmap createBitmap(Bitmap source, int x, int y, int width, int height)
    {
        throw new RuntimeException("Stub!");
    }

    public static Bitmap createBitmap(Bitmap source, int x, int y, int width, int height, Matrix m, boolean filter)
    {
        throw new RuntimeException("Stub!");
    }

    public static Bitmap createBitmap(int width, int height, Config config)
    {
        throw new RuntimeException("Stub!");
    }

    public static Bitmap createBitmap(DisplayMetrics display, int width, int height, Config config)
    {
        throw new RuntimeException("Stub!");
    }

    public static Bitmap createBitmap(int width, int height, Config config, boolean hasAlpha)
    {
        throw new RuntimeException("Stub!");
    }

    public static Bitmap createBitmap(int width, int height, Config config, boolean hasAlpha, ColorSpace colorSpace)
    {
        throw new RuntimeException("Stub!");
    }

    public static Bitmap createBitmap(DisplayMetrics display, int width, int height, Config config, boolean hasAlpha)
    {
        throw new RuntimeException("Stub!");
    }

    public static Bitmap createBitmap(DisplayMetrics display, int width, int height, Config config, boolean hasAlpha, ColorSpace colorSpace)
    {
        throw new RuntimeException("Stub!");
    }

    public static Bitmap createBitmap(int colors[], int offset, int stride, int width, int height, Config config)
    {
        throw new RuntimeException("Stub!");
    }

    public static Bitmap createBitmap(DisplayMetrics display, int colors[], int offset, int stride, int width, int height, Config config)
    {
        throw new RuntimeException("Stub!");
    }

    public static Bitmap createBitmap(int colors[], int width, int height, Config config)
    {
        throw new RuntimeException("Stub!");
    }

    public static Bitmap createBitmap(DisplayMetrics display, int colors[], int width, int height, Config config)
    {
        throw new RuntimeException("Stub!");
    }

    public static Bitmap createBitmap(Picture source)
    {
        throw new RuntimeException("Stub!");
    }

    public static Bitmap createBitmap(Picture source, int width, int height, Config config)
    {
        throw new RuntimeException("Stub!");
    }

    public byte[] getNinePatchChunk()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean compress(CompressFormat format, int quality, OutputStream stream)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isMutable()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isPremultiplied()
    {
        throw new RuntimeException("Stub!");
    }

    public void setPremultiplied(boolean premultiplied)
    {
        throw new RuntimeException("Stub!");
    }

    public int getWidth()
    {
        throw new RuntimeException("Stub!");
    }

    public int getHeight()
    {
        throw new RuntimeException("Stub!");
    }

    public int getScaledWidth(Canvas canvas)
    {
        throw new RuntimeException("Stub!");
    }

    public int getScaledHeight(Canvas canvas)
    {
        throw new RuntimeException("Stub!");
    }

    public int getScaledWidth(DisplayMetrics metrics)
    {
        throw new RuntimeException("Stub!");
    }

    public int getScaledHeight(DisplayMetrics metrics)
    {
        throw new RuntimeException("Stub!");
    }

    public int getScaledWidth(int targetDensity)
    {
        throw new RuntimeException("Stub!");
    }

    public int getScaledHeight(int targetDensity)
    {
        throw new RuntimeException("Stub!");
    }

    public int getRowBytes()
    {
        throw new RuntimeException("Stub!");
    }

    public int getByteCount()
    {
        throw new RuntimeException("Stub!");
    }

    public int getAllocationByteCount()
    {
        throw new RuntimeException("Stub!");
    }

    public Config getConfig()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean hasAlpha()
    {
        throw new RuntimeException("Stub!");
    }

    public void setHasAlpha(boolean hasAlpha)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean hasMipMap()
    {
        throw new RuntimeException("Stub!");
    }

    public void setHasMipMap(boolean hasMipMap)
    {
        throw new RuntimeException("Stub!");
    }

    public ColorSpace getColorSpace()
    {
        throw new RuntimeException("Stub!");
    }

    public void setColorSpace(ColorSpace colorSpace)
    {
        throw new RuntimeException("Stub!");
    }

    public void eraseColor(int c)
    {
        throw new RuntimeException("Stub!");
    }

    public void eraseColor(long color)
    {
        throw new RuntimeException("Stub!");
    }

    public int getPixel(int x, int y)
    {
        throw new RuntimeException("Stub!");
    }

    public Color getColor(int x, int y)
    {
        throw new RuntimeException("Stub!");
    }

    public void getPixels(int pixels[], int offset, int stride, int x, int y, int width, int height)
    {
        throw new RuntimeException("Stub!");
    }

    public void setPixel(int x, int y, int color)
    {
        throw new RuntimeException("Stub!");
    }

    public void setPixels(int pixels[], int offset, int stride, int x, int y, int width, int height)
    {
        throw new RuntimeException("Stub!");
    }

    public int describeContents()
    {
        throw new RuntimeException("Stub!");
    }

    public void writeToParcel(Parcel p, int flags)
    {
        throw new RuntimeException("Stub!");
    }

    public Bitmap extractAlpha()
    {
        throw new RuntimeException("Stub!");
    }

    public Bitmap extractAlpha(Paint paint, int offsetXY[])
    {
        throw new RuntimeException("Stub!");
    }

    public boolean sameAs(Bitmap other)
    {
        throw new RuntimeException("Stub!");
    }

    public void prepareToDraw()
    {
        throw new RuntimeException("Stub!");
    }

    public static final android.os.Parcelable.Creator CREATOR = null;
    public static final int DENSITY_NONE = 0;

}
