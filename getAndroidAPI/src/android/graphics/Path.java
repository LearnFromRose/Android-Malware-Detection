// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   Path.java

package android.graphics;


// Referenced classes of package android.graphics:
//            RectF, Matrix

public class Path
{
    public static final class Op extends Enum
    {

        public static Op[] values()
        {
            return (Op[])$VALUES.clone();
        }

        public static Op valueOf(String name)
        {
            return (Op)Enum.valueOf(android/graphics/Path$Op, name);
        }

        public static final Op DIFFERENCE;
        public static final Op INTERSECT;
        public static final Op UNION;
        public static final Op XOR;
        public static final Op REVERSE_DIFFERENCE;
        private static final Op $VALUES[];

        static 
        {
            DIFFERENCE = new Op("DIFFERENCE", 0);
            INTERSECT = new Op("INTERSECT", 1);
            UNION = new Op("UNION", 2);
            XOR = new Op("XOR", 3);
            REVERSE_DIFFERENCE = new Op("REVERSE_DIFFERENCE", 4);
            $VALUES = (new Op[] {
                DIFFERENCE, INTERSECT, UNION, XOR, REVERSE_DIFFERENCE
            });
        }

        private Op(String s, int i)
        {
            super(s, i);
        }
    }

    public static final class FillType extends Enum
    {

        public static FillType[] values()
        {
            return (FillType[])$VALUES.clone();
        }

        public static FillType valueOf(String name)
        {
            return (FillType)Enum.valueOf(android/graphics/Path$FillType, name);
        }

        public static final FillType WINDING;
        public static final FillType EVEN_ODD;
        public static final FillType INVERSE_WINDING;
        public static final FillType INVERSE_EVEN_ODD;
        private static final FillType $VALUES[];

        static 
        {
            WINDING = new FillType("WINDING", 0);
            EVEN_ODD = new FillType("EVEN_ODD", 1);
            INVERSE_WINDING = new FillType("INVERSE_WINDING", 2);
            INVERSE_EVEN_ODD = new FillType("INVERSE_EVEN_ODD", 3);
            $VALUES = (new FillType[] {
                WINDING, EVEN_ODD, INVERSE_WINDING, INVERSE_EVEN_ODD
            });
        }

        private FillType(String s, int i)
        {
            super(s, i);
        }
    }

    public static final class Direction extends Enum
    {

        public static Direction[] values()
        {
            return (Direction[])$VALUES.clone();
        }

        public static Direction valueOf(String name)
        {
            return (Direction)Enum.valueOf(android/graphics/Path$Direction, name);
        }

        public static final Direction CW;
        public static final Direction CCW;
        private static final Direction $VALUES[];

        static 
        {
            CW = new Direction("CW", 0);
            CCW = new Direction("CCW", 1);
            $VALUES = (new Direction[] {
                CW, CCW
            });
        }

        private Direction(String s, int i)
        {
            super(s, i);
        }
    }


    public Path()
    {
        throw new RuntimeException("Stub!");
    }

    public Path(Path src)
    {
        throw new RuntimeException("Stub!");
    }

    public void reset()
    {
        throw new RuntimeException("Stub!");
    }

    public void rewind()
    {
        throw new RuntimeException("Stub!");
    }

    public void set(Path src)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean op(Path path, Op op)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean op(Path path1, Path path2, Op op)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isConvex()
    {
        throw new RuntimeException("Stub!");
    }

    public FillType getFillType()
    {
        throw new RuntimeException("Stub!");
    }

    public void setFillType(FillType ft)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isInverseFillType()
    {
        throw new RuntimeException("Stub!");
    }

    public void toggleInverseFillType()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isEmpty()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isRect(RectF rect)
    {
        throw new RuntimeException("Stub!");
    }

    public void computeBounds(RectF bounds, boolean exact)
    {
        throw new RuntimeException("Stub!");
    }

    public void incReserve(int extraPtCount)
    {
        throw new RuntimeException("Stub!");
    }

    public void moveTo(float x, float y)
    {
        throw new RuntimeException("Stub!");
    }

    public void rMoveTo(float dx, float dy)
    {
        throw new RuntimeException("Stub!");
    }

    public void lineTo(float x, float y)
    {
        throw new RuntimeException("Stub!");
    }

    public void rLineTo(float dx, float dy)
    {
        throw new RuntimeException("Stub!");
    }

    public void quadTo(float x1, float y1, float x2, float y2)
    {
        throw new RuntimeException("Stub!");
    }

    public void rQuadTo(float dx1, float dy1, float dx2, float dy2)
    {
        throw new RuntimeException("Stub!");
    }

    public void cubicTo(float x1, float y1, float x2, float y2, float x3, float y3)
    {
        throw new RuntimeException("Stub!");
    }

    public void rCubicTo(float x1, float y1, float x2, float y2, float x3, float y3)
    {
        throw new RuntimeException("Stub!");
    }

    public void arcTo(RectF oval, float startAngle, float sweepAngle, boolean forceMoveTo)
    {
        throw new RuntimeException("Stub!");
    }

    public void arcTo(RectF oval, float startAngle, float sweepAngle)
    {
        throw new RuntimeException("Stub!");
    }

    public void arcTo(float left, float top, float right, float bottom, float startAngle, float sweepAngle, boolean forceMoveTo)
    {
        throw new RuntimeException("Stub!");
    }

    public void close()
    {
        throw new RuntimeException("Stub!");
    }

    public void addRect(RectF rect, Direction dir)
    {
        throw new RuntimeException("Stub!");
    }

    public void addRect(float left, float top, float right, float bottom, Direction dir)
    {
        throw new RuntimeException("Stub!");
    }

    public void addOval(RectF oval, Direction dir)
    {
        throw new RuntimeException("Stub!");
    }

    public void addOval(float left, float top, float right, float bottom, Direction dir)
    {
        throw new RuntimeException("Stub!");
    }

    public void addCircle(float x, float y, float radius, Direction dir)
    {
        throw new RuntimeException("Stub!");
    }

    public void addArc(RectF oval, float startAngle, float sweepAngle)
    {
        throw new RuntimeException("Stub!");
    }

    public void addArc(float left, float top, float right, float bottom, float startAngle, float sweepAngle)
    {
        throw new RuntimeException("Stub!");
    }

    public void addRoundRect(RectF rect, float rx, float ry, Direction dir)
    {
        throw new RuntimeException("Stub!");
    }

    public void addRoundRect(float left, float top, float right, float bottom, float rx, float ry, Direction dir)
    {
        throw new RuntimeException("Stub!");
    }

    public void addRoundRect(RectF rect, float radii[], Direction dir)
    {
        throw new RuntimeException("Stub!");
    }

    public void addRoundRect(float left, float top, float right, float bottom, float radii[], Direction dir)
    {
        throw new RuntimeException("Stub!");
    }

    public void addPath(Path src, float dx, float dy)
    {
        throw new RuntimeException("Stub!");
    }

    public void addPath(Path src)
    {
        throw new RuntimeException("Stub!");
    }

    public void addPath(Path src, Matrix matrix)
    {
        throw new RuntimeException("Stub!");
    }

    public void offset(float dx, float dy, Path dst)
    {
        throw new RuntimeException("Stub!");
    }

    public void offset(float dx, float dy)
    {
        throw new RuntimeException("Stub!");
    }

    public void setLastPoint(float dx, float dy)
    {
        throw new RuntimeException("Stub!");
    }

    public void transform(Matrix matrix, Path dst)
    {
        throw new RuntimeException("Stub!");
    }

    public void transform(Matrix matrix)
    {
        throw new RuntimeException("Stub!");
    }

    public float[] approximate(float acceptableError)
    {
        throw new RuntimeException("Stub!");
    }
}
