// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   LineBreaker.java

package android.graphics.text;


// Referenced classes of package android.graphics.text:
//            MeasuredText

public class LineBreaker
{
    public static class Result
    {

        public int getLineCount()
        {
            throw new RuntimeException("Stub!");
        }

        public int getLineBreakOffset(int lineIndex)
        {
            throw new RuntimeException("Stub!");
        }

        public float getLineWidth(int lineIndex)
        {
            throw new RuntimeException("Stub!");
        }

        public float getLineAscent(int lineIndex)
        {
            throw new RuntimeException("Stub!");
        }

        public float getLineDescent(int lineIndex)
        {
            throw new RuntimeException("Stub!");
        }

        public boolean hasLineTab(int lineIndex)
        {
            throw new RuntimeException("Stub!");
        }

        public int getStartLineHyphenEdit(int lineIndex)
        {
            throw new RuntimeException("Stub!");
        }

        public int getEndLineHyphenEdit(int lineIndex)
        {
            throw new RuntimeException("Stub!");
        }

        Result(long ptr)
        {
            throw new RuntimeException("Stub!");
        }
    }

    public static class ParagraphConstraints
    {

        public void setWidth(float width)
        {
            throw new RuntimeException("Stub!");
        }

        public void setIndent(float firstWidth, int firstWidthLineCount)
        {
            throw new RuntimeException("Stub!");
        }

        public void setTabStops(float tabStops[], float defaultTabStop)
        {
            throw new RuntimeException("Stub!");
        }

        public float getWidth()
        {
            throw new RuntimeException("Stub!");
        }

        public float getFirstWidth()
        {
            throw new RuntimeException("Stub!");
        }

        public int getFirstWidthLineCount()
        {
            throw new RuntimeException("Stub!");
        }

        public float[] getTabStops()
        {
            throw new RuntimeException("Stub!");
        }

        public float getDefaultTabStop()
        {
            throw new RuntimeException("Stub!");
        }

        public ParagraphConstraints()
        {
            throw new RuntimeException("Stub!");
        }
    }

    public static final class Builder
    {

        public Builder setBreakStrategy(int breakStrategy)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setHyphenationFrequency(int hyphenationFrequency)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setJustificationMode(int justificationMode)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setIndents(int indents[])
        {
            throw new RuntimeException("Stub!");
        }

        public LineBreaker build()
        {
            throw new RuntimeException("Stub!");
        }

        public Builder()
        {
            throw new RuntimeException("Stub!");
        }
    }


    LineBreaker(int breakStrategy, int hyphenationFrequency, int justify, int indents[])
    {
        throw new RuntimeException("Stub!");
    }

    public Result computeLineBreaks(MeasuredText measuredPara, ParagraphConstraints constraints, int lineNumber)
    {
        throw new RuntimeException("Stub!");
    }

    public static final int BREAK_STRATEGY_BALANCED = 2;
    public static final int BREAK_STRATEGY_HIGH_QUALITY = 1;
    public static final int BREAK_STRATEGY_SIMPLE = 0;
    public static final int HYPHENATION_FREQUENCY_FULL = 2;
    public static final int HYPHENATION_FREQUENCY_NONE = 0;
    public static final int HYPHENATION_FREQUENCY_NORMAL = 1;
    public static final int JUSTIFICATION_MODE_INTER_WORD = 1;
    public static final int JUSTIFICATION_MODE_NONE = 0;
}
