// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   ColorSpace.java

package android.graphics;

import java.util.function.DoubleUnaryOperator;

public abstract class ColorSpace
{
    public static class Rgb extends ColorSpace
    {

        public float[] getWhitePoint(float whitePoint[])
        {
            throw new RuntimeException("Stub!");
        }

        public float[] getWhitePoint()
        {
            throw new RuntimeException("Stub!");
        }

        public float[] getPrimaries(float primaries[])
        {
            throw new RuntimeException("Stub!");
        }

        public float[] getPrimaries()
        {
            throw new RuntimeException("Stub!");
        }

        public float[] getTransform(float transform[])
        {
            throw new RuntimeException("Stub!");
        }

        public float[] getTransform()
        {
            throw new RuntimeException("Stub!");
        }

        public float[] getInverseTransform(float inverseTransform[])
        {
            throw new RuntimeException("Stub!");
        }

        public float[] getInverseTransform()
        {
            throw new RuntimeException("Stub!");
        }

        public DoubleUnaryOperator getOetf()
        {
            throw new RuntimeException("Stub!");
        }

        public DoubleUnaryOperator getEotf()
        {
            throw new RuntimeException("Stub!");
        }

        public TransferParameters getTransferParameters()
        {
            throw new RuntimeException("Stub!");
        }

        public boolean isSrgb()
        {
            throw new RuntimeException("Stub!");
        }

        public boolean isWideGamut()
        {
            throw new RuntimeException("Stub!");
        }

        public float getMinValue(int component)
        {
            throw new RuntimeException("Stub!");
        }

        public float getMaxValue(int component)
        {
            throw new RuntimeException("Stub!");
        }

        public float[] toLinear(float r, float g, float b)
        {
            throw new RuntimeException("Stub!");
        }

        public float[] toLinear(float v[])
        {
            throw new RuntimeException("Stub!");
        }

        public float[] fromLinear(float r, float g, float b)
        {
            throw new RuntimeException("Stub!");
        }

        public float[] fromLinear(float v[])
        {
            throw new RuntimeException("Stub!");
        }

        public float[] toXyz(float v[])
        {
            throw new RuntimeException("Stub!");
        }

        public float[] fromXyz(float v[])
        {
            throw new RuntimeException("Stub!");
        }

        public boolean equals(Object o)
        {
            throw new RuntimeException("Stub!");
        }

        public int hashCode()
        {
            throw new RuntimeException("Stub!");
        }

        public Rgb(String name, float toXYZ[], DoubleUnaryOperator oetf, DoubleUnaryOperator eotf)
        {
            super(null, null, 0);
            throw new RuntimeException("Stub!");
        }

        public Rgb(String name, float primaries[], float whitePoint[], DoubleUnaryOperator oetf, DoubleUnaryOperator eotf, float min, float max)
        {
            super(null, null, 0);
            throw new RuntimeException("Stub!");
        }

        public Rgb(String name, float toXYZ[], TransferParameters function)
        {
            super(null, null, 0);
            throw new RuntimeException("Stub!");
        }

        public Rgb(String name, float primaries[], float whitePoint[], TransferParameters function)
        {
            super(null, null, 0);
            throw new RuntimeException("Stub!");
        }

        public Rgb(String name, float toXYZ[], double gamma)
        {
            super(null, null, 0);
            throw new RuntimeException("Stub!");
        }

        public Rgb(String name, float primaries[], float whitePoint[], double gamma)
        {
            super(null, null, 0);
            throw new RuntimeException("Stub!");
        }
    }

    public static final class RenderIntent extends Enum
    {

        public static RenderIntent[] values()
        {
            return (RenderIntent[])$VALUES.clone();
        }

        public static RenderIntent valueOf(String name)
        {
            return (RenderIntent)Enum.valueOf(android/graphics/ColorSpace$RenderIntent, name);
        }

        public static final RenderIntent PERCEPTUAL;
        public static final RenderIntent RELATIVE;
        public static final RenderIntent SATURATION;
        public static final RenderIntent ABSOLUTE;
        private static final RenderIntent $VALUES[];

        static 
        {
            PERCEPTUAL = new RenderIntent("PERCEPTUAL", 0);
            RELATIVE = new RenderIntent("RELATIVE", 1);
            SATURATION = new RenderIntent("SATURATION", 2);
            ABSOLUTE = new RenderIntent("ABSOLUTE", 3);
            $VALUES = (new RenderIntent[] {
                PERCEPTUAL, RELATIVE, SATURATION, ABSOLUTE
            });
        }

        private RenderIntent(String s, int i)
        {
            super(s, i);
        }
    }

    public static final class Named extends Enum
    {

        public static Named[] values()
        {
            return (Named[])$VALUES.clone();
        }

        public static Named valueOf(String name)
        {
            return (Named)Enum.valueOf(android/graphics/ColorSpace$Named, name);
        }

        public static final Named SRGB;
        public static final Named LINEAR_SRGB;
        public static final Named EXTENDED_SRGB;
        public static final Named LINEAR_EXTENDED_SRGB;
        public static final Named BT709;
        public static final Named BT2020;
        public static final Named DCI_P3;
        public static final Named DISPLAY_P3;
        public static final Named NTSC_1953;
        public static final Named SMPTE_C;
        public static final Named ADOBE_RGB;
        public static final Named PRO_PHOTO_RGB;
        public static final Named ACES;
        public static final Named ACESCG;
        public static final Named CIE_XYZ;
        public static final Named CIE_LAB;
        private static final Named $VALUES[];

        static 
        {
            SRGB = new Named("SRGB", 0);
            LINEAR_SRGB = new Named("LINEAR_SRGB", 1);
            EXTENDED_SRGB = new Named("EXTENDED_SRGB", 2);
            LINEAR_EXTENDED_SRGB = new Named("LINEAR_EXTENDED_SRGB", 3);
            BT709 = new Named("BT709", 4);
            BT2020 = new Named("BT2020", 5);
            DCI_P3 = new Named("DCI_P3", 6);
            DISPLAY_P3 = new Named("DISPLAY_P3", 7);
            NTSC_1953 = new Named("NTSC_1953", 8);
            SMPTE_C = new Named("SMPTE_C", 9);
            ADOBE_RGB = new Named("ADOBE_RGB", 10);
            PRO_PHOTO_RGB = new Named("PRO_PHOTO_RGB", 11);
            ACES = new Named("ACES", 12);
            ACESCG = new Named("ACESCG", 13);
            CIE_XYZ = new Named("CIE_XYZ", 14);
            CIE_LAB = new Named("CIE_LAB", 15);
            $VALUES = (new Named[] {
                SRGB, LINEAR_SRGB, EXTENDED_SRGB, LINEAR_EXTENDED_SRGB, BT709, BT2020, DCI_P3, DISPLAY_P3, NTSC_1953, SMPTE_C, 
                ADOBE_RGB, PRO_PHOTO_RGB, ACES, ACESCG, CIE_XYZ, CIE_LAB
            });
        }

        private Named(String s, int i)
        {
            super(s, i);
        }
    }

    public static final class Model extends Enum
    {

        public static Model[] values()
        {
            return (Model[])$VALUES.clone();
        }

        public static Model valueOf(String name)
        {
            return (Model)Enum.valueOf(android/graphics/ColorSpace$Model, name);
        }

        public int getComponentCount()
        {
            throw new RuntimeException("Stub!");
        }

        public static final Model RGB;
        public static final Model XYZ;
        public static final Model LAB;
        public static final Model CMYK;
        private static final Model $VALUES[];

        static 
        {
            RGB = new Model("RGB", 0);
            XYZ = new Model("XYZ", 1);
            LAB = new Model("LAB", 2);
            CMYK = new Model("CMYK", 3);
            $VALUES = (new Model[] {
                RGB, XYZ, LAB, CMYK
            });
        }

        private Model(String s, int i)
        {
            super(s, i);
        }
    }

    public static class Connector
    {

        public ColorSpace getSource()
        {
            throw new RuntimeException("Stub!");
        }

        public ColorSpace getDestination()
        {
            throw new RuntimeException("Stub!");
        }

        public RenderIntent getRenderIntent()
        {
            throw new RuntimeException("Stub!");
        }

        public float[] transform(float r, float g, float b)
        {
            throw new RuntimeException("Stub!");
        }

        public float[] transform(float v[])
        {
            throw new RuntimeException("Stub!");
        }

        Connector(ColorSpace source, ColorSpace destination, RenderIntent intent)
        {
            throw new RuntimeException("Stub!");
        }
    }

    public static final class Adaptation extends Enum
    {

        public static Adaptation[] values()
        {
            return (Adaptation[])$VALUES.clone();
        }

        public static Adaptation valueOf(String name)
        {
            return (Adaptation)Enum.valueOf(android/graphics/ColorSpace$Adaptation, name);
        }

        public static final Adaptation BRADFORD;
        public static final Adaptation VON_KRIES;
        public static final Adaptation CIECAT02;
        private static final Adaptation $VALUES[];

        static 
        {
            BRADFORD = new Adaptation("BRADFORD", 0);
            VON_KRIES = new Adaptation("VON_KRIES", 1);
            CIECAT02 = new Adaptation("CIECAT02", 2);
            $VALUES = (new Adaptation[] {
                BRADFORD, VON_KRIES, CIECAT02
            });
        }

        private Adaptation(String s, int i)
        {
            super(s, i);
        }
    }


    ColorSpace(String name, Model model, int id)
    {
        throw new RuntimeException("Stub!");
    }

    public String getName()
    {
        throw new RuntimeException("Stub!");
    }

    public int getId()
    {
        throw new RuntimeException("Stub!");
    }

    public Model getModel()
    {
        throw new RuntimeException("Stub!");
    }

    public int getComponentCount()
    {
        throw new RuntimeException("Stub!");
    }

    public abstract boolean isWideGamut();

    public boolean isSrgb()
    {
        throw new RuntimeException("Stub!");
    }

    public abstract float getMinValue(int i);

    public abstract float getMaxValue(int i);

    public float[] toXyz(float r, float g, float b)
    {
        throw new RuntimeException("Stub!");
    }

    public abstract float[] toXyz(float af[]);

    public float[] fromXyz(float x, float y, float z)
    {
        throw new RuntimeException("Stub!");
    }

    public abstract float[] fromXyz(float af[]);

    public String toString()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean equals(Object o)
    {
        throw new RuntimeException("Stub!");
    }

    public int hashCode()
    {
        throw new RuntimeException("Stub!");
    }

    public static Connector connect(ColorSpace source, ColorSpace destination)
    {
        throw new RuntimeException("Stub!");
    }

    public static Connector connect(ColorSpace source, ColorSpace destination, RenderIntent intent)
    {
        throw new RuntimeException("Stub!");
    }

    public static Connector connect(ColorSpace source)
    {
        throw new RuntimeException("Stub!");
    }

    public static Connector connect(ColorSpace source, RenderIntent intent)
    {
        throw new RuntimeException("Stub!");
    }

    public static ColorSpace adapt(ColorSpace colorSpace, float whitePoint[])
    {
        throw new RuntimeException("Stub!");
    }

    public static ColorSpace adapt(ColorSpace colorSpace, float whitePoint[], Adaptation adaptation)
    {
        throw new RuntimeException("Stub!");
    }

    public static ColorSpace get(Named name)
    {
        throw new RuntimeException("Stub!");
    }

    public static ColorSpace match(float toXYZD50[], Rgb.TransferParameters function)
    {
        throw new RuntimeException("Stub!");
    }

    public static final float ILLUMINANT_A[] = new float[0];
    public static final float ILLUMINANT_B[] = new float[0];
    public static final float ILLUMINANT_C[] = new float[0];
    public static final float ILLUMINANT_D50[] = new float[0];
    public static final float ILLUMINANT_D55[] = new float[0];
    public static final float ILLUMINANT_D60[] = new float[0];
    public static final float ILLUMINANT_D65[] = new float[0];
    public static final float ILLUMINANT_D75[] = new float[0];
    public static final float ILLUMINANT_E[] = new float[0];
    public static final int MAX_ID = 63;
    public static final int MIN_ID = -1;

}
