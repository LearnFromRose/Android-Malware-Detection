// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   Drawable.java

package android.graphics.drawable;

import android.content.res.ColorStateList;
import android.content.res.Resources;
import android.graphics.*;
import android.util.AttributeSet;
import android.util.TypedValue;
import java.io.IOException;
import java.io.InputStream;
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;

public abstract class Drawable
{
    public static abstract class ConstantState
    {

        public abstract Drawable newDrawable();

        public Drawable newDrawable(Resources res)
        {
            throw new RuntimeException("Stub!");
        }

        public Drawable newDrawable(Resources res, android.content.res.Resources.Theme theme)
        {
            throw new RuntimeException("Stub!");
        }

        public abstract int getChangingConfigurations();

        public boolean canApplyTheme()
        {
            throw new RuntimeException("Stub!");
        }

        public ConstantState()
        {
            throw new RuntimeException("Stub!");
        }
    }

    public static interface Callback
    {

        public abstract void invalidateDrawable(Drawable drawable);

        public abstract void scheduleDrawable(Drawable drawable, Runnable runnable, long l);

        public abstract void unscheduleDrawable(Drawable drawable, Runnable runnable);
    }


    public Drawable()
    {
        throw new RuntimeException("Stub!");
    }

    public abstract void draw(Canvas canvas);

    public void setBounds(int left, int top, int right, int bottom)
    {
        throw new RuntimeException("Stub!");
    }

    public void setBounds(Rect bounds)
    {
        throw new RuntimeException("Stub!");
    }

    public final void copyBounds(Rect bounds)
    {
        throw new RuntimeException("Stub!");
    }

    public final Rect copyBounds()
    {
        throw new RuntimeException("Stub!");
    }

    public final Rect getBounds()
    {
        throw new RuntimeException("Stub!");
    }

    public Rect getDirtyBounds()
    {
        throw new RuntimeException("Stub!");
    }

    public void setChangingConfigurations(int configs)
    {
        throw new RuntimeException("Stub!");
    }

    public int getChangingConfigurations()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method setDither is deprecated
     */

    public void setDither(boolean dither)
    {
        throw new RuntimeException("Stub!");
    }

    public void setFilterBitmap(boolean filter)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isFilterBitmap()
    {
        throw new RuntimeException("Stub!");
    }

    public final void setCallback(Callback cb)
    {
        throw new RuntimeException("Stub!");
    }

    public Callback getCallback()
    {
        throw new RuntimeException("Stub!");
    }

    public void invalidateSelf()
    {
        throw new RuntimeException("Stub!");
    }

    public void scheduleSelf(Runnable what, long when)
    {
        throw new RuntimeException("Stub!");
    }

    public void unscheduleSelf(Runnable what)
    {
        throw new RuntimeException("Stub!");
    }

    public int getLayoutDirection()
    {
        throw new RuntimeException("Stub!");
    }

    public final boolean setLayoutDirection(int layoutDirection)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean onLayoutDirectionChanged(int layoutDirection)
    {
        throw new RuntimeException("Stub!");
    }

    public abstract void setAlpha(int i);

    public int getAlpha()
    {
        throw new RuntimeException("Stub!");
    }

    public abstract void setColorFilter(ColorFilter colorfilter);

    /**
     * @deprecated Method setColorFilter is deprecated
     */

    public void setColorFilter(int color, android.graphics.PorterDuff.Mode mode)
    {
        throw new RuntimeException("Stub!");
    }

    public void setTint(int tintColor)
    {
        throw new RuntimeException("Stub!");
    }

    public void setTintList(ColorStateList tint)
    {
        throw new RuntimeException("Stub!");
    }

    public void setTintMode(android.graphics.PorterDuff.Mode tintMode)
    {
        throw new RuntimeException("Stub!");
    }

    public void setTintBlendMode(BlendMode blendMode)
    {
        throw new RuntimeException("Stub!");
    }

    public ColorFilter getColorFilter()
    {
        throw new RuntimeException("Stub!");
    }

    public void clearColorFilter()
    {
        throw new RuntimeException("Stub!");
    }

    public void setHotspot(float x, float y)
    {
        throw new RuntimeException("Stub!");
    }

    public void setHotspotBounds(int left, int top, int right, int bottom)
    {
        throw new RuntimeException("Stub!");
    }

    public void getHotspotBounds(Rect outRect)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isProjected()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isStateful()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean setState(int stateSet[])
    {
        throw new RuntimeException("Stub!");
    }

    public int[] getState()
    {
        throw new RuntimeException("Stub!");
    }

    public void jumpToCurrentState()
    {
        throw new RuntimeException("Stub!");
    }

    public Drawable getCurrent()
    {
        throw new RuntimeException("Stub!");
    }

    public final boolean setLevel(int level)
    {
        throw new RuntimeException("Stub!");
    }

    public final int getLevel()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean setVisible(boolean visible, boolean restart)
    {
        throw new RuntimeException("Stub!");
    }

    public final boolean isVisible()
    {
        throw new RuntimeException("Stub!");
    }

    public void setAutoMirrored(boolean mirrored)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isAutoMirrored()
    {
        throw new RuntimeException("Stub!");
    }

    public void applyTheme(android.content.res.Resources.Theme t)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean canApplyTheme()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method getOpacity is deprecated
     */

    public abstract int getOpacity();

    public static int resolveOpacity(int op1, int op2)
    {
        throw new RuntimeException("Stub!");
    }

    public Region getTransparentRegion()
    {
        throw new RuntimeException("Stub!");
    }

    protected boolean onStateChange(int state[])
    {
        throw new RuntimeException("Stub!");
    }

    protected boolean onLevelChange(int level)
    {
        throw new RuntimeException("Stub!");
    }

    protected void onBoundsChange(Rect bounds)
    {
        throw new RuntimeException("Stub!");
    }

    public int getIntrinsicWidth()
    {
        throw new RuntimeException("Stub!");
    }

    public int getIntrinsicHeight()
    {
        throw new RuntimeException("Stub!");
    }

    public int getMinimumWidth()
    {
        throw new RuntimeException("Stub!");
    }

    public int getMinimumHeight()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean getPadding(Rect padding)
    {
        throw new RuntimeException("Stub!");
    }

    public Insets getOpticalInsets()
    {
        throw new RuntimeException("Stub!");
    }

    public void getOutline(Outline outline)
    {
        throw new RuntimeException("Stub!");
    }

    public Drawable mutate()
    {
        throw new RuntimeException("Stub!");
    }

    public static Drawable createFromStream(InputStream is, String srcName)
    {
        throw new RuntimeException("Stub!");
    }

    public static Drawable createFromResourceStream(Resources res, TypedValue value, InputStream is, String srcName)
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method createFromResourceStream is deprecated
     */

    public static Drawable createFromResourceStream(Resources res, TypedValue value, InputStream is, String srcName, android.graphics.BitmapFactory.Options opts)
    {
        throw new RuntimeException("Stub!");
    }

    public static Drawable createFromXml(Resources r, XmlPullParser parser)
        throws IOException, XmlPullParserException
    {
        throw new RuntimeException("Stub!");
    }

    public static Drawable createFromXml(Resources r, XmlPullParser parser, android.content.res.Resources.Theme theme)
        throws IOException, XmlPullParserException
    {
        throw new RuntimeException("Stub!");
    }

    public static Drawable createFromXmlInner(Resources r, XmlPullParser parser, AttributeSet attrs)
        throws IOException, XmlPullParserException
    {
        throw new RuntimeException("Stub!");
    }

    public static Drawable createFromXmlInner(Resources r, XmlPullParser parser, AttributeSet attrs, android.content.res.Resources.Theme theme)
        throws IOException, XmlPullParserException
    {
        throw new RuntimeException("Stub!");
    }

    public static Drawable createFromPath(String pathName)
    {
        throw new RuntimeException("Stub!");
    }

    public void inflate(Resources r, XmlPullParser parser, AttributeSet attrs)
        throws IOException, XmlPullParserException
    {
        throw new RuntimeException("Stub!");
    }

    public void inflate(Resources r, XmlPullParser parser, AttributeSet attrs, android.content.res.Resources.Theme theme)
        throws IOException, XmlPullParserException
    {
        throw new RuntimeException("Stub!");
    }

    public ConstantState getConstantState()
    {
        throw new RuntimeException("Stub!");
    }
}
