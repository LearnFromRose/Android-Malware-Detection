// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   GradientDrawable.java

package android.graphics.drawable;

import android.content.res.ColorStateList;
import android.content.res.Resources;
import android.graphics.*;
import android.util.AttributeSet;
import java.io.IOException;
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;

// Referenced classes of package android.graphics.drawable:
//            Drawable

public class GradientDrawable extends Drawable
{
    public static final class Orientation extends Enum
    {

        public static Orientation[] values()
        {
            return (Orientation[])$VALUES.clone();
        }

        public static Orientation valueOf(String name)
        {
            return (Orientation)Enum.valueOf(android/graphics/drawable/GradientDrawable$Orientation, name);
        }

        public static final Orientation TOP_BOTTOM;
        public static final Orientation TR_BL;
        public static final Orientation RIGHT_LEFT;
        public static final Orientation BR_TL;
        public static final Orientation BOTTOM_TOP;
        public static final Orientation BL_TR;
        public static final Orientation LEFT_RIGHT;
        public static final Orientation TL_BR;
        private static final Orientation $VALUES[];

        static 
        {
            TOP_BOTTOM = new Orientation("TOP_BOTTOM", 0);
            TR_BL = new Orientation("TR_BL", 1);
            RIGHT_LEFT = new Orientation("RIGHT_LEFT", 2);
            BR_TL = new Orientation("BR_TL", 3);
            BOTTOM_TOP = new Orientation("BOTTOM_TOP", 4);
            BL_TR = new Orientation("BL_TR", 5);
            LEFT_RIGHT = new Orientation("LEFT_RIGHT", 6);
            TL_BR = new Orientation("TL_BR", 7);
            $VALUES = (new Orientation[] {
                TOP_BOTTOM, TR_BL, RIGHT_LEFT, BR_TL, BOTTOM_TOP, BL_TR, LEFT_RIGHT, TL_BR
            });
        }

        private Orientation(String s, int i)
        {
            super(s, i);
        }
    }


    public GradientDrawable()
    {
        throw new RuntimeException("Stub!");
    }

    public GradientDrawable(Orientation orientation, int colors[])
    {
        throw new RuntimeException("Stub!");
    }

    public boolean getPadding(Rect padding)
    {
        throw new RuntimeException("Stub!");
    }

    public void setCornerRadii(float radii[])
    {
        throw new RuntimeException("Stub!");
    }

    public float[] getCornerRadii()
    {
        throw new RuntimeException("Stub!");
    }

    public void setCornerRadius(float radius)
    {
        throw new RuntimeException("Stub!");
    }

    public float getCornerRadius()
    {
        throw new RuntimeException("Stub!");
    }

    public void setStroke(int width, int color)
    {
        throw new RuntimeException("Stub!");
    }

    public void setStroke(int width, ColorStateList colorStateList)
    {
        throw new RuntimeException("Stub!");
    }

    public void setStroke(int width, int color, float dashWidth, float dashGap)
    {
        throw new RuntimeException("Stub!");
    }

    public void setStroke(int width, ColorStateList colorStateList, float dashWidth, float dashGap)
    {
        throw new RuntimeException("Stub!");
    }

    public void setSize(int width, int height)
    {
        throw new RuntimeException("Stub!");
    }

    public void setShape(int shape)
    {
        throw new RuntimeException("Stub!");
    }

    public int getShape()
    {
        throw new RuntimeException("Stub!");
    }

    public void setGradientType(int gradient)
    {
        throw new RuntimeException("Stub!");
    }

    public int getGradientType()
    {
        throw new RuntimeException("Stub!");
    }

    public void setGradientCenter(float x, float y)
    {
        throw new RuntimeException("Stub!");
    }

    public float getGradientCenterX()
    {
        throw new RuntimeException("Stub!");
    }

    public float getGradientCenterY()
    {
        throw new RuntimeException("Stub!");
    }

    public void setGradientRadius(float gradientRadius)
    {
        throw new RuntimeException("Stub!");
    }

    public float getGradientRadius()
    {
        throw new RuntimeException("Stub!");
    }

    public void setUseLevel(boolean useLevel)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean getUseLevel()
    {
        throw new RuntimeException("Stub!");
    }

    public Orientation getOrientation()
    {
        throw new RuntimeException("Stub!");
    }

    public void setOrientation(Orientation orientation)
    {
        throw new RuntimeException("Stub!");
    }

    public void setColors(int colors[])
    {
        throw new RuntimeException("Stub!");
    }

    public void setColors(int colors[], float offsets[])
    {
        throw new RuntimeException("Stub!");
    }

    public int[] getColors()
    {
        throw new RuntimeException("Stub!");
    }

    public void draw(Canvas canvas)
    {
        throw new RuntimeException("Stub!");
    }

    public void setInnerRadiusRatio(float innerRadiusRatio)
    {
        throw new RuntimeException("Stub!");
    }

    public float getInnerRadiusRatio()
    {
        throw new RuntimeException("Stub!");
    }

    public void setInnerRadius(int innerRadius)
    {
        throw new RuntimeException("Stub!");
    }

    public int getInnerRadius()
    {
        throw new RuntimeException("Stub!");
    }

    public void setThicknessRatio(float thicknessRatio)
    {
        throw new RuntimeException("Stub!");
    }

    public float getThicknessRatio()
    {
        throw new RuntimeException("Stub!");
    }

    public void setThickness(int thickness)
    {
        throw new RuntimeException("Stub!");
    }

    public int getThickness()
    {
        throw new RuntimeException("Stub!");
    }

    public void setPadding(int left, int top, int right, int bottom)
    {
        throw new RuntimeException("Stub!");
    }

    public void setColor(int argb)
    {
        throw new RuntimeException("Stub!");
    }

    public void setColor(ColorStateList colorStateList)
    {
        throw new RuntimeException("Stub!");
    }

    public ColorStateList getColor()
    {
        throw new RuntimeException("Stub!");
    }

    protected boolean onStateChange(int stateSet[])
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isStateful()
    {
        throw new RuntimeException("Stub!");
    }

    public int getChangingConfigurations()
    {
        throw new RuntimeException("Stub!");
    }

    public void setAlpha(int alpha)
    {
        throw new RuntimeException("Stub!");
    }

    public int getAlpha()
    {
        throw new RuntimeException("Stub!");
    }

    public void setDither(boolean dither)
    {
        throw new RuntimeException("Stub!");
    }

    public ColorFilter getColorFilter()
    {
        throw new RuntimeException("Stub!");
    }

    public void setColorFilter(ColorFilter colorFilter)
    {
        throw new RuntimeException("Stub!");
    }

    public void setTintList(ColorStateList tint)
    {
        throw new RuntimeException("Stub!");
    }

    public void setTintBlendMode(BlendMode blendMode)
    {
        throw new RuntimeException("Stub!");
    }

    public int getOpacity()
    {
        throw new RuntimeException("Stub!");
    }

    protected void onBoundsChange(Rect r)
    {
        throw new RuntimeException("Stub!");
    }

    protected boolean onLevelChange(int level)
    {
        throw new RuntimeException("Stub!");
    }

    public void inflate(Resources r, XmlPullParser parser, AttributeSet attrs, android.content.res.Resources.Theme theme)
        throws IOException, XmlPullParserException
    {
        throw new RuntimeException("Stub!");
    }

    public void applyTheme(android.content.res.Resources.Theme t)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean canApplyTheme()
    {
        throw new RuntimeException("Stub!");
    }

    public int getIntrinsicWidth()
    {
        throw new RuntimeException("Stub!");
    }

    public int getIntrinsicHeight()
    {
        throw new RuntimeException("Stub!");
    }

    public Insets getOpticalInsets()
    {
        throw new RuntimeException("Stub!");
    }

    public Drawable.ConstantState getConstantState()
    {
        throw new RuntimeException("Stub!");
    }

    public void getOutline(Outline outline)
    {
        throw new RuntimeException("Stub!");
    }

    public Drawable mutate()
    {
        throw new RuntimeException("Stub!");
    }

    public static final int LINE = 2;
    public static final int LINEAR_GRADIENT = 0;
    public static final int OVAL = 1;
    public static final int RADIAL_GRADIENT = 1;
    public static final int RECTANGLE = 0;
    public static final int RING = 3;
    public static final int SWEEP_GRADIENT = 2;
}
