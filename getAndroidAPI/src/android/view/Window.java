// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   Window.java

package android.view;

import android.content.Context;
import android.content.res.Configuration;
import android.content.res.TypedArray;
import android.graphics.Rect;
import android.graphics.drawable.Drawable;
import android.media.session.MediaController;
import android.net.Uri;
import android.os.*;
import android.transition.*;
import android.view.accessibility.AccessibilityEvent;
import java.util.List;

// Referenced classes of package android.view:
//            SurfaceHolder, InputQueue, WindowManager, ViewGroup, 
//            View, LayoutInflater, KeyEvent, MotionEvent, 
//            InputEvent, FrameMetrics, ActionMode, Menu, 
//            MenuItem, SearchEvent

public abstract class Window
{
    public static interface OnRestrictedCaptionAreaChangedListener
    {

        public abstract void onRestrictedCaptionAreaChanged(Rect rect);
    }

    public static interface OnFrameMetricsAvailableListener
    {

        public abstract void onFrameMetricsAvailable(Window window, FrameMetrics framemetrics, int i);
    }

    public static interface Callback
    {

        public abstract boolean dispatchKeyEvent(KeyEvent keyevent);

        public abstract boolean dispatchKeyShortcutEvent(KeyEvent keyevent);

        public abstract boolean dispatchTouchEvent(MotionEvent motionevent);

        public abstract boolean dispatchTrackballEvent(MotionEvent motionevent);

        public abstract boolean dispatchGenericMotionEvent(MotionEvent motionevent);

        public abstract boolean dispatchPopulateAccessibilityEvent(AccessibilityEvent accessibilityevent);

        public abstract View onCreatePanelView(int i);

        public abstract boolean onCreatePanelMenu(int i, Menu menu);

        public abstract boolean onPreparePanel(int i, View view, Menu menu);

        public abstract boolean onMenuOpened(int i, Menu menu);

        public abstract boolean onMenuItemSelected(int i, MenuItem menuitem);

        public abstract void onWindowAttributesChanged(WindowManager.LayoutParams layoutparams);

        public abstract void onContentChanged();

        public abstract void onWindowFocusChanged(boolean flag);

        public abstract void onAttachedToWindow();

        public abstract void onDetachedFromWindow();

        public abstract void onPanelClosed(int i, Menu menu);

        public abstract boolean onSearchRequested();

        public abstract boolean onSearchRequested(SearchEvent searchevent);

        public abstract ActionMode onWindowStartingActionMode(ActionMode.Callback callback);

        public abstract ActionMode onWindowStartingActionMode(ActionMode.Callback callback, int i);

        public abstract void onActionModeStarted(ActionMode actionmode);

        public abstract void onActionModeFinished(ActionMode actionmode);

        public void onProvideKeyboardShortcuts(List data, Menu menu, int deviceId)
        {
            throw new RuntimeException("Stub!");
        }

        public void onPointerCaptureChanged(boolean hasCapture)
        {
            throw new RuntimeException("Stub!");
        }
    }


    public Window(Context context)
    {
        throw new RuntimeException("Stub!");
    }

    public final Context getContext()
    {
        throw new RuntimeException("Stub!");
    }

    public final TypedArray getWindowStyle()
    {
        throw new RuntimeException("Stub!");
    }

    public void setContainer(Window container)
    {
        throw new RuntimeException("Stub!");
    }

    public final Window getContainer()
    {
        throw new RuntimeException("Stub!");
    }

    public final boolean hasChildren()
    {
        throw new RuntimeException("Stub!");
    }

    public void setWindowManager(WindowManager wm, IBinder appToken, String appName)
    {
        throw new RuntimeException("Stub!");
    }

    public void setWindowManager(WindowManager wm, IBinder appToken, String appName, boolean hardwareAccelerated)
    {
        throw new RuntimeException("Stub!");
    }

    public WindowManager getWindowManager()
    {
        throw new RuntimeException("Stub!");
    }

    public void setCallback(Callback callback)
    {
        throw new RuntimeException("Stub!");
    }

    public final Callback getCallback()
    {
        throw new RuntimeException("Stub!");
    }

    public final void addOnFrameMetricsAvailableListener(OnFrameMetricsAvailableListener listener, Handler handler)
    {
        throw new RuntimeException("Stub!");
    }

    public final void removeOnFrameMetricsAvailableListener(OnFrameMetricsAvailableListener listener)
    {
        throw new RuntimeException("Stub!");
    }

    public final void setRestrictedCaptionAreaListener(OnRestrictedCaptionAreaChangedListener listener)
    {
        throw new RuntimeException("Stub!");
    }

    public abstract void takeSurface(SurfaceHolder.Callback2 callback2);

    public abstract void takeInputQueue(InputQueue.Callback callback);

    public abstract boolean isFloating();

    public void setLayout(int width, int height)
    {
        throw new RuntimeException("Stub!");
    }

    public void setGravity(int gravity)
    {
        throw new RuntimeException("Stub!");
    }

    public void setType(int type)
    {
        throw new RuntimeException("Stub!");
    }

    public void setFormat(int format)
    {
        throw new RuntimeException("Stub!");
    }

    public void setWindowAnimations(int resId)
    {
        throw new RuntimeException("Stub!");
    }

    public void setSoftInputMode(int mode)
    {
        throw new RuntimeException("Stub!");
    }

    public void addFlags(int flags)
    {
        throw new RuntimeException("Stub!");
    }

    public void clearFlags(int flags)
    {
        throw new RuntimeException("Stub!");
    }

    public void setFlags(int flags, int mask)
    {
        throw new RuntimeException("Stub!");
    }

    public void setColorMode(int colorMode)
    {
        throw new RuntimeException("Stub!");
    }

    public int getColorMode()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isWideColorGamut()
    {
        throw new RuntimeException("Stub!");
    }

    public void setDimAmount(float amount)
    {
        throw new RuntimeException("Stub!");
    }

    public void setAttributes(WindowManager.LayoutParams a)
    {
        throw new RuntimeException("Stub!");
    }

    public final WindowManager.LayoutParams getAttributes()
    {
        throw new RuntimeException("Stub!");
    }

    protected final int getForcedWindowFlags()
    {
        throw new RuntimeException("Stub!");
    }

    protected final boolean hasSoftInputMode()
    {
        throw new RuntimeException("Stub!");
    }

    public void setSustainedPerformanceMode(boolean enable)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean requestFeature(int featureId)
    {
        throw new RuntimeException("Stub!");
    }

    public final void makeActive()
    {
        throw new RuntimeException("Stub!");
    }

    public final boolean isActive()
    {
        throw new RuntimeException("Stub!");
    }

    public View findViewById(int id)
    {
        throw new RuntimeException("Stub!");
    }

    public final View requireViewById(int id)
    {
        throw new RuntimeException("Stub!");
    }

    public abstract void setContentView(int i);

    public abstract void setContentView(View view);

    public abstract void setContentView(View view, ViewGroup.LayoutParams layoutparams);

    public abstract void addContentView(View view, ViewGroup.LayoutParams layoutparams);

    public abstract View getCurrentFocus();

    public abstract LayoutInflater getLayoutInflater();

    public abstract void setTitle(CharSequence charsequence);

    /**
     * @deprecated Method setTitleColor is deprecated
     */

    public abstract void setTitleColor(int i);

    public abstract void openPanel(int i, KeyEvent keyevent);

    public abstract void closePanel(int i);

    public abstract void togglePanel(int i, KeyEvent keyevent);

    public abstract void invalidatePanelMenu(int i);

    public abstract boolean performPanelShortcut(int i, int j, KeyEvent keyevent, int k);

    public abstract boolean performPanelIdentifierAction(int i, int j, int k);

    public abstract void closeAllPanels();

    public abstract boolean performContextMenuIdentifierAction(int i, int j);

    public abstract void onConfigurationChanged(Configuration configuration);

    public void setElevation(float elevation)
    {
        throw new RuntimeException("Stub!");
    }

    public void setClipToOutline(boolean clipToOutline)
    {
        throw new RuntimeException("Stub!");
    }

    public void setBackgroundDrawableResource(int resId)
    {
        throw new RuntimeException("Stub!");
    }

    public abstract void setBackgroundDrawable(Drawable drawable);

    public abstract void setFeatureDrawableResource(int i, int j);

    public abstract void setFeatureDrawableUri(int i, Uri uri);

    public abstract void setFeatureDrawable(int i, Drawable drawable);

    public abstract void setFeatureDrawableAlpha(int i, int j);

    public abstract void setFeatureInt(int i, int j);

    public abstract void takeKeyEvents(boolean flag);

    public abstract boolean superDispatchKeyEvent(KeyEvent keyevent);

    public abstract boolean superDispatchKeyShortcutEvent(KeyEvent keyevent);

    public abstract boolean superDispatchTouchEvent(MotionEvent motionevent);

    public abstract boolean superDispatchTrackballEvent(MotionEvent motionevent);

    public abstract boolean superDispatchGenericMotionEvent(MotionEvent motionevent);

    public abstract View getDecorView();

    public abstract View peekDecorView();

    public abstract Bundle saveHierarchyState();

    public abstract void restoreHierarchyState(Bundle bundle);

    protected abstract void onActive();

    protected final int getFeatures()
    {
        throw new RuntimeException("Stub!");
    }

    public static int getDefaultFeatures(Context context)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean hasFeature(int feature)
    {
        throw new RuntimeException("Stub!");
    }

    protected final int getLocalFeatures()
    {
        throw new RuntimeException("Stub!");
    }

    protected void setDefaultWindowFormat(int format)
    {
        throw new RuntimeException("Stub!");
    }

    public abstract void setChildDrawable(int i, Drawable drawable);

    public abstract void setChildInt(int i, int j);

    public abstract boolean isShortcutKey(int i, KeyEvent keyevent);

    public abstract void setVolumeControlStream(int i);

    public abstract int getVolumeControlStream();

    public void setMediaController(MediaController controller)
    {
        throw new RuntimeException("Stub!");
    }

    public MediaController getMediaController()
    {
        throw new RuntimeException("Stub!");
    }

    public void setUiOptions(int uiOptions)
    {
        throw new RuntimeException("Stub!");
    }

    public void setUiOptions(int uiOptions, int mask)
    {
        throw new RuntimeException("Stub!");
    }

    public void setIcon(int resId)
    {
        throw new RuntimeException("Stub!");
    }

    public void setLogo(int resId)
    {
        throw new RuntimeException("Stub!");
    }

    public void setLocalFocus(boolean hasFocus, boolean inTouchMode)
    {
        throw new RuntimeException("Stub!");
    }

    public void injectInputEvent(InputEvent event)
    {
        throw new RuntimeException("Stub!");
    }

    public TransitionManager getTransitionManager()
    {
        throw new RuntimeException("Stub!");
    }

    public void setTransitionManager(TransitionManager tm)
    {
        throw new RuntimeException("Stub!");
    }

    public Scene getContentScene()
    {
        throw new RuntimeException("Stub!");
    }

    public void setEnterTransition(Transition transition)
    {
        throw new RuntimeException("Stub!");
    }

    public void setReturnTransition(Transition transition)
    {
        throw new RuntimeException("Stub!");
    }

    public void setExitTransition(Transition transition)
    {
        throw new RuntimeException("Stub!");
    }

    public void setReenterTransition(Transition transition)
    {
        throw new RuntimeException("Stub!");
    }

    public Transition getEnterTransition()
    {
        throw new RuntimeException("Stub!");
    }

    public Transition getReturnTransition()
    {
        throw new RuntimeException("Stub!");
    }

    public Transition getExitTransition()
    {
        throw new RuntimeException("Stub!");
    }

    public Transition getReenterTransition()
    {
        throw new RuntimeException("Stub!");
    }

    public void setSharedElementEnterTransition(Transition transition)
    {
        throw new RuntimeException("Stub!");
    }

    public void setSharedElementReturnTransition(Transition transition)
    {
        throw new RuntimeException("Stub!");
    }

    public Transition getSharedElementEnterTransition()
    {
        throw new RuntimeException("Stub!");
    }

    public Transition getSharedElementReturnTransition()
    {
        throw new RuntimeException("Stub!");
    }

    public void setSharedElementExitTransition(Transition transition)
    {
        throw new RuntimeException("Stub!");
    }

    public void setSharedElementReenterTransition(Transition transition)
    {
        throw new RuntimeException("Stub!");
    }

    public Transition getSharedElementExitTransition()
    {
        throw new RuntimeException("Stub!");
    }

    public Transition getSharedElementReenterTransition()
    {
        throw new RuntimeException("Stub!");
    }

    public void setAllowEnterTransitionOverlap(boolean allow)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean getAllowEnterTransitionOverlap()
    {
        throw new RuntimeException("Stub!");
    }

    public void setAllowReturnTransitionOverlap(boolean allow)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean getAllowReturnTransitionOverlap()
    {
        throw new RuntimeException("Stub!");
    }

    public long getTransitionBackgroundFadeDuration()
    {
        throw new RuntimeException("Stub!");
    }

    public void setTransitionBackgroundFadeDuration(long fadeDurationMillis)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean getSharedElementsUseOverlay()
    {
        throw new RuntimeException("Stub!");
    }

    public void setSharedElementsUseOverlay(boolean sharedElementsUseOverlay)
    {
        throw new RuntimeException("Stub!");
    }

    public abstract int getStatusBarColor();

    public abstract void setStatusBarColor(int i);

    public abstract int getNavigationBarColor();

    public abstract void setNavigationBarColor(int i);

    public void setNavigationBarDividerColor(int dividerColor)
    {
        throw new RuntimeException("Stub!");
    }

    public int getNavigationBarDividerColor()
    {
        throw new RuntimeException("Stub!");
    }

    public void setStatusBarContrastEnforced(boolean ensureContrast)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isStatusBarContrastEnforced()
    {
        throw new RuntimeException("Stub!");
    }

    public void setNavigationBarContrastEnforced(boolean enforceContrast)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isNavigationBarContrastEnforced()
    {
        throw new RuntimeException("Stub!");
    }

    public void setSystemGestureExclusionRects(List rects)
    {
        throw new RuntimeException("Stub!");
    }

    public List getSystemGestureExclusionRects()
    {
        throw new RuntimeException("Stub!");
    }

    public abstract void setDecorCaptionShade(int i);

    public abstract void setResizingCaptionDrawable(Drawable drawable);

    public static final int DECOR_CAPTION_SHADE_AUTO = 0;
    public static final int DECOR_CAPTION_SHADE_DARK = 2;
    public static final int DECOR_CAPTION_SHADE_LIGHT = 1;
    /**
     * @deprecated Field DEFAULT_FEATURES is deprecated
     */
    protected static final int DEFAULT_FEATURES = 65;
    public static final int FEATURE_ACTION_BAR = 8;
    public static final int FEATURE_ACTION_BAR_OVERLAY = 9;
    public static final int FEATURE_ACTION_MODE_OVERLAY = 10;
    public static final int FEATURE_ACTIVITY_TRANSITIONS = 13;
    public static final int FEATURE_CONTENT_TRANSITIONS = 12;
    public static final int FEATURE_CONTEXT_MENU = 6;
    public static final int FEATURE_CUSTOM_TITLE = 7;
    /**
     * @deprecated Field FEATURE_INDETERMINATE_PROGRESS is deprecated
     */
    public static final int FEATURE_INDETERMINATE_PROGRESS = 5;
    public static final int FEATURE_LEFT_ICON = 3;
    public static final int FEATURE_NO_TITLE = 1;
    public static final int FEATURE_OPTIONS_PANEL = 0;
    /**
     * @deprecated Field FEATURE_PROGRESS is deprecated
     */
    public static final int FEATURE_PROGRESS = 2;
    public static final int FEATURE_RIGHT_ICON = 4;
    public static final int FEATURE_SWIPE_TO_DISMISS = 11;
    public static final int ID_ANDROID_CONTENT = 0x1020002;
    public static final String NAVIGATION_BAR_BACKGROUND_TRANSITION_NAME = "android:navigation:background";
    /**
     * @deprecated Field PROGRESS_END is deprecated
     */
    public static final int PROGRESS_END = 10000;
    /**
     * @deprecated Field PROGRESS_INDETERMINATE_OFF is deprecated
     */
    public static final int PROGRESS_INDETERMINATE_OFF = -4;
    /**
     * @deprecated Field PROGRESS_INDETERMINATE_ON is deprecated
     */
    public static final int PROGRESS_INDETERMINATE_ON = -3;
    /**
     * @deprecated Field PROGRESS_SECONDARY_END is deprecated
     */
    public static final int PROGRESS_SECONDARY_END = 30000;
    /**
     * @deprecated Field PROGRESS_SECONDARY_START is deprecated
     */
    public static final int PROGRESS_SECONDARY_START = 20000;
    /**
     * @deprecated Field PROGRESS_START is deprecated
     */
    public static final int PROGRESS_START = 0;
    /**
     * @deprecated Field PROGRESS_VISIBILITY_OFF is deprecated
     */
    public static final int PROGRESS_VISIBILITY_OFF = -2;
    /**
     * @deprecated Field PROGRESS_VISIBILITY_ON is deprecated
     */
    public static final int PROGRESS_VISIBILITY_ON = -1;
    public static final String STATUS_BAR_BACKGROUND_TRANSITION_NAME = "android:status:background";
}
