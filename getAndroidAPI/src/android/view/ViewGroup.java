// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   ViewGroup.java

package android.view;

import android.animation.LayoutTransition;
import android.content.Context;
import android.content.res.Configuration;
import android.content.res.TypedArray;
import android.graphics.*;
import android.os.Bundle;
import android.util.AttributeSet;
import android.util.SparseArray;
import android.view.accessibility.AccessibilityEvent;
import android.view.animation.Animation;
import android.view.animation.LayoutAnimationController;
import android.view.animation.Transformation;
import java.util.ArrayList;
import java.util.Collection;

// Referenced classes of package android.view:
//            View, ViewParent, ViewManager, ViewDebug, 
//            ActionMode, DragEvent, KeyEvent, MotionEvent, 
//            PointerIcon, ViewStructure, ViewGroupOverlay, WindowInsets, 
//            ViewOverlay

public abstract class ViewGroup extends View
    implements ViewParent, ViewManager
{
    public static interface OnHierarchyChangeListener
    {

        public abstract void onChildViewAdded(View view, View view1);

        public abstract void onChildViewRemoved(View view, View view1);
    }

    public static class MarginLayoutParams extends LayoutParams
    {

        public void setMargins(int left, int top, int right, int bottom)
        {
            throw new RuntimeException("Stub!");
        }

        public void setMarginStart(int start)
        {
            throw new RuntimeException("Stub!");
        }

        public int getMarginStart()
        {
            throw new RuntimeException("Stub!");
        }

        public void setMarginEnd(int end)
        {
            throw new RuntimeException("Stub!");
        }

        public int getMarginEnd()
        {
            throw new RuntimeException("Stub!");
        }

        public boolean isMarginRelative()
        {
            throw new RuntimeException("Stub!");
        }

        public void setLayoutDirection(int layoutDirection)
        {
            throw new RuntimeException("Stub!");
        }

        public int getLayoutDirection()
        {
            throw new RuntimeException("Stub!");
        }

        public void resolveLayoutDirection(int layoutDirection)
        {
            throw new RuntimeException("Stub!");
        }

        public int bottomMargin;
        public int leftMargin;
        public int rightMargin;
        public int topMargin;

        public MarginLayoutParams(Context c, AttributeSet attrs)
        {
            super((LayoutParams)null);
            throw new RuntimeException("Stub!");
        }

        public MarginLayoutParams(int width, int height)
        {
            super((LayoutParams)null);
            throw new RuntimeException("Stub!");
        }

        public MarginLayoutParams(MarginLayoutParams source)
        {
            super((LayoutParams)null);
            throw new RuntimeException("Stub!");
        }

        public MarginLayoutParams(LayoutParams source)
        {
            super((LayoutParams)null);
            throw new RuntimeException("Stub!");
        }
    }

    public static class LayoutParams
    {

        protected void setBaseAttributes(TypedArray a, int widthAttr, int heightAttr)
        {
            throw new RuntimeException("Stub!");
        }

        public void resolveLayoutDirection(int layoutDirection)
        {
            throw new RuntimeException("Stub!");
        }

        /**
         * @deprecated Field FILL_PARENT is deprecated
         */
        public static final int FILL_PARENT = -1;
        public static final int MATCH_PARENT = -1;
        public static final int WRAP_CONTENT = -2;
        public int height;
        public android.view.animation.LayoutAnimationController.AnimationParameters layoutAnimationParameters;
        public int width;

        public LayoutParams(Context c, AttributeSet attrs)
        {
            throw new RuntimeException("Stub!");
        }

        public LayoutParams(int width, int height)
        {
            throw new RuntimeException("Stub!");
        }

        public LayoutParams(LayoutParams source)
        {
            throw new RuntimeException("Stub!");
        }
    }


    public ViewGroup(Context context)
    {
        super((Context)null);
        throw new RuntimeException("Stub!");
    }

    public ViewGroup(Context context, AttributeSet attrs)
    {
        super((Context)null);
        throw new RuntimeException("Stub!");
    }

    public ViewGroup(Context context, AttributeSet attrs, int defStyleAttr)
    {
        super((Context)null);
        throw new RuntimeException("Stub!");
    }

    public ViewGroup(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes)
    {
        super((Context)null);
        throw new RuntimeException("Stub!");
    }

    public int getDescendantFocusability()
    {
        throw new RuntimeException("Stub!");
    }

    public void setDescendantFocusability(int focusability)
    {
        throw new RuntimeException("Stub!");
    }

    public void requestChildFocus(View child, View focused)
    {
        throw new RuntimeException("Stub!");
    }

    public void focusableViewAvailable(View v)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean showContextMenuForChild(View originalView)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean showContextMenuForChild(View originalView, float x, float y)
    {
        throw new RuntimeException("Stub!");
    }

    public ActionMode startActionModeForChild(View originalView, ActionMode.Callback callback)
    {
        throw new RuntimeException("Stub!");
    }

    public ActionMode startActionModeForChild(View originalView, ActionMode.Callback callback, int type)
    {
        throw new RuntimeException("Stub!");
    }

    public View focusSearch(View focused, int direction)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean requestChildRectangleOnScreen(View child, Rect rectangle, boolean immediate)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean requestSendAccessibilityEvent(View child, AccessibilityEvent event)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean onRequestSendAccessibilityEvent(View child, AccessibilityEvent event)
    {
        throw new RuntimeException("Stub!");
    }

    public void childHasTransientStateChanged(View child, boolean childHasTransientState)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean hasTransientState()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean dispatchUnhandledMove(View focused, int direction)
    {
        throw new RuntimeException("Stub!");
    }

    public void clearChildFocus(View child)
    {
        throw new RuntimeException("Stub!");
    }

    public void clearFocus()
    {
        throw new RuntimeException("Stub!");
    }

    public View getFocusedChild()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean hasFocus()
    {
        throw new RuntimeException("Stub!");
    }

    public View findFocus()
    {
        throw new RuntimeException("Stub!");
    }

    public void addFocusables(ArrayList views, int direction, int focusableMode)
    {
        throw new RuntimeException("Stub!");
    }

    public void addKeyboardNavigationClusters(Collection views, int direction)
    {
        throw new RuntimeException("Stub!");
    }

    public void setTouchscreenBlocksFocus(boolean touchscreenBlocksFocus)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean getTouchscreenBlocksFocus()
    {
        throw new RuntimeException("Stub!");
    }

    public void findViewsWithText(ArrayList outViews, CharSequence text, int flags)
    {
        throw new RuntimeException("Stub!");
    }

    public void dispatchWindowFocusChanged(boolean hasFocus)
    {
        throw new RuntimeException("Stub!");
    }

    public void addTouchables(ArrayList views)
    {
        throw new RuntimeException("Stub!");
    }

    public void dispatchDisplayHint(int hint)
    {
        throw new RuntimeException("Stub!");
    }

    protected void dispatchVisibilityChanged(View changedView, int visibility)
    {
        throw new RuntimeException("Stub!");
    }

    public void dispatchWindowVisibilityChanged(int visibility)
    {
        throw new RuntimeException("Stub!");
    }

    public void dispatchConfigurationChanged(Configuration newConfig)
    {
        throw new RuntimeException("Stub!");
    }

    public void recomputeViewAttributes(View child)
    {
        throw new RuntimeException("Stub!");
    }

    public void bringChildToFront(View child)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean dispatchDragEvent(DragEvent event)
    {
        throw new RuntimeException("Stub!");
    }

    public void dispatchWindowSystemUiVisiblityChanged(int visible)
    {
        throw new RuntimeException("Stub!");
    }

    public void dispatchSystemUiVisibilityChanged(int visible)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean dispatchKeyEventPreIme(KeyEvent event)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean dispatchKeyEvent(KeyEvent event)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean dispatchKeyShortcutEvent(KeyEvent event)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean dispatchTrackballEvent(MotionEvent event)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean dispatchCapturedPointerEvent(MotionEvent event)
    {
        throw new RuntimeException("Stub!");
    }

    public void dispatchPointerCaptureChanged(boolean hasCapture)
    {
        throw new RuntimeException("Stub!");
    }

    public PointerIcon onResolvePointerIcon(MotionEvent event, int pointerIndex)
    {
        throw new RuntimeException("Stub!");
    }

    protected boolean dispatchHoverEvent(MotionEvent event)
    {
        throw new RuntimeException("Stub!");
    }

    public void addChildrenForAccessibility(ArrayList outChildren)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean onInterceptHoverEvent(MotionEvent event)
    {
        throw new RuntimeException("Stub!");
    }

    protected boolean dispatchGenericPointerEvent(MotionEvent event)
    {
        throw new RuntimeException("Stub!");
    }

    protected boolean dispatchGenericFocusedEvent(MotionEvent event)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean dispatchTouchEvent(MotionEvent ev)
    {
        throw new RuntimeException("Stub!");
    }

    public void setMotionEventSplittingEnabled(boolean split)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isMotionEventSplittingEnabled()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isTransitionGroup()
    {
        throw new RuntimeException("Stub!");
    }

    public void setTransitionGroup(boolean isTransitionGroup)
    {
        throw new RuntimeException("Stub!");
    }

    public void requestDisallowInterceptTouchEvent(boolean disallowIntercept)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean onInterceptTouchEvent(MotionEvent ev)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean requestFocus(int direction, Rect previouslyFocusedRect)
    {
        throw new RuntimeException("Stub!");
    }

    protected boolean onRequestFocusInDescendants(int direction, Rect previouslyFocusedRect)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean restoreDefaultFocus()
    {
        throw new RuntimeException("Stub!");
    }

    public void dispatchStartTemporaryDetach()
    {
        throw new RuntimeException("Stub!");
    }

    public void dispatchFinishTemporaryDetach()
    {
        throw new RuntimeException("Stub!");
    }

    public void dispatchProvideStructure(ViewStructure structure)
    {
        throw new RuntimeException("Stub!");
    }

    public void dispatchProvideAutofillStructure(ViewStructure structure, int flags)
    {
        throw new RuntimeException("Stub!");
    }

    public CharSequence getAccessibilityClassName()
    {
        throw new RuntimeException("Stub!");
    }

    public void notifySubtreeAccessibilityStateChanged(View child, View source, int changeType)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean onNestedPrePerformAccessibilityAction(View target, int action, Bundle args)
    {
        throw new RuntimeException("Stub!");
    }

    protected void dispatchSaveInstanceState(SparseArray container)
    {
        throw new RuntimeException("Stub!");
    }

    protected void dispatchFreezeSelfOnly(SparseArray container)
    {
        throw new RuntimeException("Stub!");
    }

    protected void dispatchRestoreInstanceState(SparseArray container)
    {
        throw new RuntimeException("Stub!");
    }

    protected void dispatchThawSelfOnly(SparseArray container)
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method setChildrenDrawingCacheEnabled is deprecated
     */

    protected void setChildrenDrawingCacheEnabled(boolean enabled)
    {
        throw new RuntimeException("Stub!");
    }

    protected void dispatchDraw(Canvas canvas)
    {
        throw new RuntimeException("Stub!");
    }

    public ViewGroupOverlay getOverlay()
    {
        throw new RuntimeException("Stub!");
    }

    protected int getChildDrawingOrder(int childCount, int drawingPosition)
    {
        throw new RuntimeException("Stub!");
    }

    public final int getChildDrawingOrder(int drawingPosition)
    {
        throw new RuntimeException("Stub!");
    }

    protected boolean drawChild(Canvas canvas, View child, long drawingTime)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean getClipChildren()
    {
        throw new RuntimeException("Stub!");
    }

    public void setClipChildren(boolean clipChildren)
    {
        throw new RuntimeException("Stub!");
    }

    public void setClipToPadding(boolean clipToPadding)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean getClipToPadding()
    {
        throw new RuntimeException("Stub!");
    }

    public void dispatchSetSelected(boolean selected)
    {
        throw new RuntimeException("Stub!");
    }

    public void dispatchSetActivated(boolean activated)
    {
        throw new RuntimeException("Stub!");
    }

    protected void dispatchSetPressed(boolean pressed)
    {
        throw new RuntimeException("Stub!");
    }

    public void dispatchDrawableHotspotChanged(float x, float y)
    {
        throw new RuntimeException("Stub!");
    }

    protected void setStaticTransformationsEnabled(boolean enabled)
    {
        throw new RuntimeException("Stub!");
    }

    protected boolean getChildStaticTransformation(View child, Transformation t)
    {
        throw new RuntimeException("Stub!");
    }

    public void addView(View child)
    {
        throw new RuntimeException("Stub!");
    }

    public void addView(View child, int index)
    {
        throw new RuntimeException("Stub!");
    }

    public void addView(View child, int width, int height)
    {
        throw new RuntimeException("Stub!");
    }

    public void addView(View child, LayoutParams params)
    {
        throw new RuntimeException("Stub!");
    }

    public void addView(View child, int index, LayoutParams params)
    {
        throw new RuntimeException("Stub!");
    }

    public void updateViewLayout(View view, LayoutParams params)
    {
        throw new RuntimeException("Stub!");
    }

    protected boolean checkLayoutParams(LayoutParams p)
    {
        throw new RuntimeException("Stub!");
    }

    public void setOnHierarchyChangeListener(OnHierarchyChangeListener listener)
    {
        throw new RuntimeException("Stub!");
    }

    public void onViewAdded(View child)
    {
        throw new RuntimeException("Stub!");
    }

    public void onViewRemoved(View child)
    {
        throw new RuntimeException("Stub!");
    }

    protected void onAttachedToWindow()
    {
        throw new RuntimeException("Stub!");
    }

    protected void onDetachedFromWindow()
    {
        throw new RuntimeException("Stub!");
    }

    protected boolean addViewInLayout(View child, int index, LayoutParams params)
    {
        throw new RuntimeException("Stub!");
    }

    protected boolean addViewInLayout(View child, int index, LayoutParams params, boolean preventRequestLayout)
    {
        throw new RuntimeException("Stub!");
    }

    protected void cleanupLayoutState(View child)
    {
        throw new RuntimeException("Stub!");
    }

    protected void attachLayoutAnimationParameters(View child, LayoutParams params, int index, int count)
    {
        throw new RuntimeException("Stub!");
    }

    public void removeView(View view)
    {
        throw new RuntimeException("Stub!");
    }

    public void removeViewInLayout(View view)
    {
        throw new RuntimeException("Stub!");
    }

    public void removeViewsInLayout(int start, int count)
    {
        throw new RuntimeException("Stub!");
    }

    public void removeViewAt(int index)
    {
        throw new RuntimeException("Stub!");
    }

    public void removeViews(int start, int count)
    {
        throw new RuntimeException("Stub!");
    }

    public void setLayoutTransition(LayoutTransition transition)
    {
        throw new RuntimeException("Stub!");
    }

    public LayoutTransition getLayoutTransition()
    {
        throw new RuntimeException("Stub!");
    }

    public void removeAllViews()
    {
        throw new RuntimeException("Stub!");
    }

    public void removeAllViewsInLayout()
    {
        throw new RuntimeException("Stub!");
    }

    protected void removeDetachedView(View child, boolean animate)
    {
        throw new RuntimeException("Stub!");
    }

    protected void attachViewToParent(View child, int index, LayoutParams params)
    {
        throw new RuntimeException("Stub!");
    }

    protected void detachViewFromParent(View child)
    {
        throw new RuntimeException("Stub!");
    }

    protected void detachViewFromParent(int index)
    {
        throw new RuntimeException("Stub!");
    }

    protected void detachViewsFromParent(int start, int count)
    {
        throw new RuntimeException("Stub!");
    }

    protected void detachAllViewsFromParent()
    {
        throw new RuntimeException("Stub!");
    }

    public void onDescendantInvalidated(View child, View target)
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method invalidateChild is deprecated
     */

    public final void invalidateChild(View child, Rect dirty)
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method invalidateChildInParent is deprecated
     */

    public ViewParent invalidateChildInParent(int location[], Rect dirty)
    {
        throw new RuntimeException("Stub!");
    }

    public final void offsetDescendantRectToMyCoords(View descendant, Rect rect)
    {
        throw new RuntimeException("Stub!");
    }

    public final void offsetRectIntoDescendantCoords(View descendant, Rect rect)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean getChildVisibleRect(View child, Rect r, Point offset)
    {
        throw new RuntimeException("Stub!");
    }

    public final void layout(int l, int t, int r, int b)
    {
        throw new RuntimeException("Stub!");
    }

    protected abstract void onLayout(boolean flag, int i, int j, int k, int l);

    protected boolean canAnimate()
    {
        throw new RuntimeException("Stub!");
    }

    public void startLayoutAnimation()
    {
        throw new RuntimeException("Stub!");
    }

    public void scheduleLayoutAnimation()
    {
        throw new RuntimeException("Stub!");
    }

    public void setLayoutAnimation(LayoutAnimationController controller)
    {
        throw new RuntimeException("Stub!");
    }

    public LayoutAnimationController getLayoutAnimation()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method isAnimationCacheEnabled is deprecated
     */

    public boolean isAnimationCacheEnabled()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method setAnimationCacheEnabled is deprecated
     */

    public void setAnimationCacheEnabled(boolean enabled)
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method isAlwaysDrawnWithCacheEnabled is deprecated
     */

    public boolean isAlwaysDrawnWithCacheEnabled()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method setAlwaysDrawnWithCacheEnabled is deprecated
     */

    public void setAlwaysDrawnWithCacheEnabled(boolean always)
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method isChildrenDrawnWithCacheEnabled is deprecated
     */

    protected boolean isChildrenDrawnWithCacheEnabled()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method setChildrenDrawnWithCacheEnabled is deprecated
     */

    protected void setChildrenDrawnWithCacheEnabled(boolean enabled)
    {
        throw new RuntimeException("Stub!");
    }

    protected boolean isChildrenDrawingOrderEnabled()
    {
        throw new RuntimeException("Stub!");
    }

    protected void setChildrenDrawingOrderEnabled(boolean enabled)
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method getPersistentDrawingCache is deprecated
     */

    public int getPersistentDrawingCache()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method setPersistentDrawingCache is deprecated
     */

    public void setPersistentDrawingCache(int drawingCacheToKeep)
    {
        throw new RuntimeException("Stub!");
    }

    public int getLayoutMode()
    {
        throw new RuntimeException("Stub!");
    }

    public void setLayoutMode(int layoutMode)
    {
        throw new RuntimeException("Stub!");
    }

    public LayoutParams generateLayoutParams(AttributeSet attrs)
    {
        throw new RuntimeException("Stub!");
    }

    protected LayoutParams generateLayoutParams(LayoutParams p)
    {
        throw new RuntimeException("Stub!");
    }

    protected LayoutParams generateDefaultLayoutParams()
    {
        throw new RuntimeException("Stub!");
    }

    protected void debug(int depth)
    {
        throw new RuntimeException("Stub!");
    }

    public int indexOfChild(View child)
    {
        throw new RuntimeException("Stub!");
    }

    public int getChildCount()
    {
        throw new RuntimeException("Stub!");
    }

    public View getChildAt(int index)
    {
        throw new RuntimeException("Stub!");
    }

    protected void measureChildren(int widthMeasureSpec, int heightMeasureSpec)
    {
        throw new RuntimeException("Stub!");
    }

    protected void measureChild(View child, int parentWidthMeasureSpec, int parentHeightMeasureSpec)
    {
        throw new RuntimeException("Stub!");
    }

    protected void measureChildWithMargins(View child, int parentWidthMeasureSpec, int widthUsed, int parentHeightMeasureSpec, int heightUsed)
    {
        throw new RuntimeException("Stub!");
    }

    public static int getChildMeasureSpec(int spec, int padding, int childDimension)
    {
        throw new RuntimeException("Stub!");
    }

    public void clearDisappearingChildren()
    {
        throw new RuntimeException("Stub!");
    }

    public void startViewTransition(View view)
    {
        throw new RuntimeException("Stub!");
    }

    public void endViewTransition(View view)
    {
        throw new RuntimeException("Stub!");
    }

    public void suppressLayout(boolean suppress)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isLayoutSuppressed()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean gatherTransparentRegion(Region region)
    {
        throw new RuntimeException("Stub!");
    }

    public void requestTransparentRegion(View child)
    {
        throw new RuntimeException("Stub!");
    }

    public WindowInsets dispatchApplyWindowInsets(WindowInsets insets)
    {
        throw new RuntimeException("Stub!");
    }

    public android.view.animation.Animation.AnimationListener getLayoutAnimationListener()
    {
        throw new RuntimeException("Stub!");
    }

    protected void drawableStateChanged()
    {
        throw new RuntimeException("Stub!");
    }

    public void jumpDrawablesToCurrentState()
    {
        throw new RuntimeException("Stub!");
    }

    protected int[] onCreateDrawableState(int extraSpace)
    {
        throw new RuntimeException("Stub!");
    }

    public void setAddStatesFromChildren(boolean addsStates)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean addStatesFromChildren()
    {
        throw new RuntimeException("Stub!");
    }

    public void childDrawableStateChanged(View child)
    {
        throw new RuntimeException("Stub!");
    }

    public void setLayoutAnimationListener(android.view.animation.Animation.AnimationListener animationListener)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean shouldDelayChildPressedState()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean onStartNestedScroll(View child, View target, int nestedScrollAxes)
    {
        throw new RuntimeException("Stub!");
    }

    public void onNestedScrollAccepted(View child, View target, int axes)
    {
        throw new RuntimeException("Stub!");
    }

    public void onStopNestedScroll(View child)
    {
        throw new RuntimeException("Stub!");
    }

    public void onNestedScroll(View target, int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed)
    {
        throw new RuntimeException("Stub!");
    }

    public void onNestedPreScroll(View target, int dx, int dy, int consumed[])
    {
        throw new RuntimeException("Stub!");
    }

    public boolean onNestedFling(View target, float velocityX, float velocityY, boolean consumed)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean onNestedPreFling(View target, float velocityX, float velocityY)
    {
        throw new RuntimeException("Stub!");
    }

    public int getNestedScrollAxes()
    {
        throw new RuntimeException("Stub!");
    }

    public volatile ViewOverlay getOverlay()
    {
        return getOverlay();
    }

    protected static final int CLIP_TO_PADDING_MASK = 34;
    public static final int FOCUS_AFTER_DESCENDANTS = 0x40000;
    public static final int FOCUS_BEFORE_DESCENDANTS = 0x20000;
    public static final int FOCUS_BLOCK_DESCENDANTS = 0x60000;
    public static final int LAYOUT_MODE_CLIP_BOUNDS = 0;
    public static final int LAYOUT_MODE_OPTICAL_BOUNDS = 1;
    /**
     * @deprecated Field PERSISTENT_ALL_CACHES is deprecated
     */
    public static final int PERSISTENT_ALL_CACHES = 3;
    /**
     * @deprecated Field PERSISTENT_ANIMATION_CACHE is deprecated
     */
    public static final int PERSISTENT_ANIMATION_CACHE = 1;
    /**
     * @deprecated Field PERSISTENT_NO_CACHE is deprecated
     */
    public static final int PERSISTENT_NO_CACHE = 0;
    /**
     * @deprecated Field PERSISTENT_SCROLLING_CACHE is deprecated
     */
    public static final int PERSISTENT_SCROLLING_CACHE = 2;
}
