// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   AccessibilityNodeInfo.java

package android.view.accessibility;

import android.graphics.Rect;
import android.graphics.Region;
import android.os.*;
import android.view.View;
import java.util.List;
import java.util.Map;

// Referenced classes of package android.view.accessibility:
//            AccessibilityWindowInfo

public class AccessibilityNodeInfo
    implements Parcelable
{
    public static final class TouchDelegateInfo
        implements Parcelable
    {

        public int getRegionCount()
        {
            throw new RuntimeException("Stub!");
        }

        public Region getRegionAt(int index)
        {
            throw new RuntimeException("Stub!");
        }

        public AccessibilityNodeInfo getTargetForRegion(Region region)
        {
            throw new RuntimeException("Stub!");
        }

        public int describeContents()
        {
            throw new RuntimeException("Stub!");
        }

        public void writeToParcel(Parcel dest, int flags)
        {
            throw new RuntimeException("Stub!");
        }

        public static final android.os.Parcelable.Creator CREATOR = null;


        public TouchDelegateInfo(Map targetMap)
        {
            throw new RuntimeException("Stub!");
        }
    }

    public static final class RangeInfo
    {

        public static RangeInfo obtain(int type, float min, float max, float current)
        {
            throw new RuntimeException("Stub!");
        }

        public int getType()
        {
            throw new RuntimeException("Stub!");
        }

        public float getMin()
        {
            throw new RuntimeException("Stub!");
        }

        public float getMax()
        {
            throw new RuntimeException("Stub!");
        }

        public float getCurrent()
        {
            throw new RuntimeException("Stub!");
        }

        public static final int RANGE_TYPE_FLOAT = 1;
        public static final int RANGE_TYPE_INT = 0;
        public static final int RANGE_TYPE_PERCENT = 2;

        RangeInfo(int type, float min, float max, float current)
        {
            throw new RuntimeException("Stub!");
        }
    }

    public static final class CollectionItemInfo
    {

        public static CollectionItemInfo obtain(int rowIndex, int rowSpan, int columnIndex, int columnSpan, boolean heading)
        {
            throw new RuntimeException("Stub!");
        }

        public static CollectionItemInfo obtain(int rowIndex, int rowSpan, int columnIndex, int columnSpan, boolean heading, boolean selected)
        {
            throw new RuntimeException("Stub!");
        }

        public int getColumnIndex()
        {
            throw new RuntimeException("Stub!");
        }

        public int getRowIndex()
        {
            throw new RuntimeException("Stub!");
        }

        public int getColumnSpan()
        {
            throw new RuntimeException("Stub!");
        }

        public int getRowSpan()
        {
            throw new RuntimeException("Stub!");
        }

        /**
         * @deprecated Method isHeading is deprecated
         */

        public boolean isHeading()
        {
            throw new RuntimeException("Stub!");
        }

        public boolean isSelected()
        {
            throw new RuntimeException("Stub!");
        }

        CollectionItemInfo(int rowIndex, int rowSpan, int columnIndex, int columnSpan, boolean heading, boolean selected)
        {
            throw new RuntimeException("Stub!");
        }
    }

    public static final class CollectionInfo
    {

        public static CollectionInfo obtain(int rowCount, int columnCount, boolean hierarchical)
        {
            throw new RuntimeException("Stub!");
        }

        public static CollectionInfo obtain(int rowCount, int columnCount, boolean hierarchical, int selectionMode)
        {
            throw new RuntimeException("Stub!");
        }

        public int getRowCount()
        {
            throw new RuntimeException("Stub!");
        }

        public int getColumnCount()
        {
            throw new RuntimeException("Stub!");
        }

        public boolean isHierarchical()
        {
            throw new RuntimeException("Stub!");
        }

        public int getSelectionMode()
        {
            throw new RuntimeException("Stub!");
        }

        public static final int SELECTION_MODE_MULTIPLE = 2;
        public static final int SELECTION_MODE_NONE = 0;
        public static final int SELECTION_MODE_SINGLE = 1;

        CollectionInfo(int rowCount, int columnCount, boolean hierarchical, int selectionMode)
        {
            throw new RuntimeException("Stub!");
        }
    }

    public static final class AccessibilityAction
    {

        public int getId()
        {
            throw new RuntimeException("Stub!");
        }

        public CharSequence getLabel()
        {
            throw new RuntimeException("Stub!");
        }

        public int hashCode()
        {
            throw new RuntimeException("Stub!");
        }

        public boolean equals(Object other)
        {
            throw new RuntimeException("Stub!");
        }

        public String toString()
        {
            throw new RuntimeException("Stub!");
        }

        public static final AccessibilityAction ACTION_ACCESSIBILITY_FOCUS = null;
        public static final AccessibilityAction ACTION_CLEAR_ACCESSIBILITY_FOCUS = null;
        public static final AccessibilityAction ACTION_CLEAR_FOCUS = null;
        public static final AccessibilityAction ACTION_CLEAR_SELECTION = null;
        public static final AccessibilityAction ACTION_CLICK = null;
        public static final AccessibilityAction ACTION_COLLAPSE = null;
        public static final AccessibilityAction ACTION_CONTEXT_CLICK = null;
        public static final AccessibilityAction ACTION_COPY = null;
        public static final AccessibilityAction ACTION_CUT = null;
        public static final AccessibilityAction ACTION_DISMISS = null;
        public static final AccessibilityAction ACTION_EXPAND = null;
        public static final AccessibilityAction ACTION_FOCUS = null;
        public static final AccessibilityAction ACTION_HIDE_TOOLTIP = null;
        public static final AccessibilityAction ACTION_LONG_CLICK = null;
        public static final AccessibilityAction ACTION_MOVE_WINDOW = null;
        public static final AccessibilityAction ACTION_NEXT_AT_MOVEMENT_GRANULARITY = null;
        public static final AccessibilityAction ACTION_NEXT_HTML_ELEMENT = null;
        public static final AccessibilityAction ACTION_PAGE_DOWN = null;
        public static final AccessibilityAction ACTION_PAGE_LEFT = null;
        public static final AccessibilityAction ACTION_PAGE_RIGHT = null;
        public static final AccessibilityAction ACTION_PAGE_UP = null;
        public static final AccessibilityAction ACTION_PASTE = null;
        public static final AccessibilityAction ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY = null;
        public static final AccessibilityAction ACTION_PREVIOUS_HTML_ELEMENT = null;
        public static final AccessibilityAction ACTION_SCROLL_BACKWARD = null;
        public static final AccessibilityAction ACTION_SCROLL_DOWN = null;
        public static final AccessibilityAction ACTION_SCROLL_FORWARD = null;
        public static final AccessibilityAction ACTION_SCROLL_LEFT = null;
        public static final AccessibilityAction ACTION_SCROLL_RIGHT = null;
        public static final AccessibilityAction ACTION_SCROLL_TO_POSITION = null;
        public static final AccessibilityAction ACTION_SCROLL_UP = null;
        public static final AccessibilityAction ACTION_SELECT = null;
        public static final AccessibilityAction ACTION_SET_PROGRESS = null;
        public static final AccessibilityAction ACTION_SET_SELECTION = null;
        public static final AccessibilityAction ACTION_SET_TEXT = null;
        public static final AccessibilityAction ACTION_SHOW_ON_SCREEN = null;
        public static final AccessibilityAction ACTION_SHOW_TOOLTIP = null;


        public AccessibilityAction(int actionId, CharSequence label)
        {
            throw new RuntimeException("Stub!");
        }
    }


    AccessibilityNodeInfo()
    {
        throw new RuntimeException("Stub!");
    }

    public void setSource(View source)
    {
        throw new RuntimeException("Stub!");
    }

    public void setSource(View root, int virtualDescendantId)
    {
        throw new RuntimeException("Stub!");
    }

    public AccessibilityNodeInfo findFocus(int focus)
    {
        throw new RuntimeException("Stub!");
    }

    public AccessibilityNodeInfo focusSearch(int direction)
    {
        throw new RuntimeException("Stub!");
    }

    public int getWindowId()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean refresh()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean refreshWithExtraData(String extraDataKey, Bundle args)
    {
        throw new RuntimeException("Stub!");
    }

    public int getChildCount()
    {
        throw new RuntimeException("Stub!");
    }

    public AccessibilityNodeInfo getChild(int index)
    {
        throw new RuntimeException("Stub!");
    }

    public void addChild(View child)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean removeChild(View child)
    {
        throw new RuntimeException("Stub!");
    }

    public void addChild(View root, int virtualDescendantId)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean removeChild(View root, int virtualDescendantId)
    {
        throw new RuntimeException("Stub!");
    }

    public List getActionList()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method getActions is deprecated
     */

    public int getActions()
    {
        throw new RuntimeException("Stub!");
    }

    public void addAction(AccessibilityAction action)
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method addAction is deprecated
     */

    public void addAction(int action)
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method removeAction is deprecated
     */

    public void removeAction(int action)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean removeAction(AccessibilityAction action)
    {
        throw new RuntimeException("Stub!");
    }

    public AccessibilityNodeInfo getTraversalBefore()
    {
        throw new RuntimeException("Stub!");
    }

    public void setTraversalBefore(View view)
    {
        throw new RuntimeException("Stub!");
    }

    public void setTraversalBefore(View root, int virtualDescendantId)
    {
        throw new RuntimeException("Stub!");
    }

    public AccessibilityNodeInfo getTraversalAfter()
    {
        throw new RuntimeException("Stub!");
    }

    public void setTraversalAfter(View view)
    {
        throw new RuntimeException("Stub!");
    }

    public void setTraversalAfter(View root, int virtualDescendantId)
    {
        throw new RuntimeException("Stub!");
    }

    public List getAvailableExtraData()
    {
        throw new RuntimeException("Stub!");
    }

    public void setAvailableExtraData(List extraDataKeys)
    {
        throw new RuntimeException("Stub!");
    }

    public void setMaxTextLength(int max)
    {
        throw new RuntimeException("Stub!");
    }

    public int getMaxTextLength()
    {
        throw new RuntimeException("Stub!");
    }

    public void setMovementGranularities(int granularities)
    {
        throw new RuntimeException("Stub!");
    }

    public int getMovementGranularities()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean performAction(int action)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean performAction(int action, Bundle arguments)
    {
        throw new RuntimeException("Stub!");
    }

    public List findAccessibilityNodeInfosByText(String text)
    {
        throw new RuntimeException("Stub!");
    }

    public List findAccessibilityNodeInfosByViewId(String viewId)
    {
        throw new RuntimeException("Stub!");
    }

    public AccessibilityWindowInfo getWindow()
    {
        throw new RuntimeException("Stub!");
    }

    public AccessibilityNodeInfo getParent()
    {
        throw new RuntimeException("Stub!");
    }

    public void setParent(View parent)
    {
        throw new RuntimeException("Stub!");
    }

    public void setParent(View root, int virtualDescendantId)
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method getBoundsInParent is deprecated
     */

    public void getBoundsInParent(Rect outBounds)
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method setBoundsInParent is deprecated
     */

    public void setBoundsInParent(Rect bounds)
    {
        throw new RuntimeException("Stub!");
    }

    public void getBoundsInScreen(Rect outBounds)
    {
        throw new RuntimeException("Stub!");
    }

    public void setBoundsInScreen(Rect bounds)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isCheckable()
    {
        throw new RuntimeException("Stub!");
    }

    public void setCheckable(boolean checkable)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isChecked()
    {
        throw new RuntimeException("Stub!");
    }

    public void setChecked(boolean checked)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isFocusable()
    {
        throw new RuntimeException("Stub!");
    }

    public void setFocusable(boolean focusable)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isFocused()
    {
        throw new RuntimeException("Stub!");
    }

    public void setFocused(boolean focused)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isVisibleToUser()
    {
        throw new RuntimeException("Stub!");
    }

    public void setVisibleToUser(boolean visibleToUser)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isAccessibilityFocused()
    {
        throw new RuntimeException("Stub!");
    }

    public void setAccessibilityFocused(boolean focused)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isSelected()
    {
        throw new RuntimeException("Stub!");
    }

    public void setSelected(boolean selected)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isClickable()
    {
        throw new RuntimeException("Stub!");
    }

    public void setClickable(boolean clickable)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isLongClickable()
    {
        throw new RuntimeException("Stub!");
    }

    public void setLongClickable(boolean longClickable)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isEnabled()
    {
        throw new RuntimeException("Stub!");
    }

    public void setEnabled(boolean enabled)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isPassword()
    {
        throw new RuntimeException("Stub!");
    }

    public void setPassword(boolean password)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isScrollable()
    {
        throw new RuntimeException("Stub!");
    }

    public void setScrollable(boolean scrollable)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isEditable()
    {
        throw new RuntimeException("Stub!");
    }

    public void setEditable(boolean editable)
    {
        throw new RuntimeException("Stub!");
    }

    public void setPaneTitle(CharSequence paneTitle)
    {
        throw new RuntimeException("Stub!");
    }

    public CharSequence getPaneTitle()
    {
        throw new RuntimeException("Stub!");
    }

    public int getDrawingOrder()
    {
        throw new RuntimeException("Stub!");
    }

    public void setDrawingOrder(int drawingOrderInParent)
    {
        throw new RuntimeException("Stub!");
    }

    public CollectionInfo getCollectionInfo()
    {
        throw new RuntimeException("Stub!");
    }

    public void setCollectionInfo(CollectionInfo collectionInfo)
    {
        throw new RuntimeException("Stub!");
    }

    public CollectionItemInfo getCollectionItemInfo()
    {
        throw new RuntimeException("Stub!");
    }

    public void setCollectionItemInfo(CollectionItemInfo collectionItemInfo)
    {
        throw new RuntimeException("Stub!");
    }

    public RangeInfo getRangeInfo()
    {
        throw new RuntimeException("Stub!");
    }

    public void setRangeInfo(RangeInfo rangeInfo)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isContentInvalid()
    {
        throw new RuntimeException("Stub!");
    }

    public void setContentInvalid(boolean contentInvalid)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isContextClickable()
    {
        throw new RuntimeException("Stub!");
    }

    public void setContextClickable(boolean contextClickable)
    {
        throw new RuntimeException("Stub!");
    }

    public int getLiveRegion()
    {
        throw new RuntimeException("Stub!");
    }

    public void setLiveRegion(int mode)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isMultiLine()
    {
        throw new RuntimeException("Stub!");
    }

    public void setMultiLine(boolean multiLine)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean canOpenPopup()
    {
        throw new RuntimeException("Stub!");
    }

    public void setCanOpenPopup(boolean opensPopup)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isDismissable()
    {
        throw new RuntimeException("Stub!");
    }

    public void setDismissable(boolean dismissable)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isImportantForAccessibility()
    {
        throw new RuntimeException("Stub!");
    }

    public void setImportantForAccessibility(boolean important)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isScreenReaderFocusable()
    {
        throw new RuntimeException("Stub!");
    }

    public void setScreenReaderFocusable(boolean screenReaderFocusable)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isShowingHintText()
    {
        throw new RuntimeException("Stub!");
    }

    public void setShowingHintText(boolean showingHintText)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isHeading()
    {
        throw new RuntimeException("Stub!");
    }

    public void setHeading(boolean isHeading)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isTextEntryKey()
    {
        throw new RuntimeException("Stub!");
    }

    public void setTextEntryKey(boolean isTextEntryKey)
    {
        throw new RuntimeException("Stub!");
    }

    public CharSequence getPackageName()
    {
        throw new RuntimeException("Stub!");
    }

    public void setPackageName(CharSequence packageName)
    {
        throw new RuntimeException("Stub!");
    }

    public CharSequence getClassName()
    {
        throw new RuntimeException("Stub!");
    }

    public void setClassName(CharSequence className)
    {
        throw new RuntimeException("Stub!");
    }

    public CharSequence getText()
    {
        throw new RuntimeException("Stub!");
    }

    public void setText(CharSequence text)
    {
        throw new RuntimeException("Stub!");
    }

    public CharSequence getHintText()
    {
        throw new RuntimeException("Stub!");
    }

    public void setHintText(CharSequence hintText)
    {
        throw new RuntimeException("Stub!");
    }

    public void setError(CharSequence error)
    {
        throw new RuntimeException("Stub!");
    }

    public CharSequence getError()
    {
        throw new RuntimeException("Stub!");
    }

    public CharSequence getContentDescription()
    {
        throw new RuntimeException("Stub!");
    }

    public void setContentDescription(CharSequence contentDescription)
    {
        throw new RuntimeException("Stub!");
    }

    public CharSequence getTooltipText()
    {
        throw new RuntimeException("Stub!");
    }

    public void setTooltipText(CharSequence tooltipText)
    {
        throw new RuntimeException("Stub!");
    }

    public void setLabelFor(View labeled)
    {
        throw new RuntimeException("Stub!");
    }

    public void setLabelFor(View root, int virtualDescendantId)
    {
        throw new RuntimeException("Stub!");
    }

    public AccessibilityNodeInfo getLabelFor()
    {
        throw new RuntimeException("Stub!");
    }

    public void setLabeledBy(View label)
    {
        throw new RuntimeException("Stub!");
    }

    public void setLabeledBy(View root, int virtualDescendantId)
    {
        throw new RuntimeException("Stub!");
    }

    public AccessibilityNodeInfo getLabeledBy()
    {
        throw new RuntimeException("Stub!");
    }

    public void setViewIdResourceName(String viewIdResName)
    {
        throw new RuntimeException("Stub!");
    }

    public String getViewIdResourceName()
    {
        throw new RuntimeException("Stub!");
    }

    public int getTextSelectionStart()
    {
        throw new RuntimeException("Stub!");
    }

    public int getTextSelectionEnd()
    {
        throw new RuntimeException("Stub!");
    }

    public void setTextSelection(int start, int end)
    {
        throw new RuntimeException("Stub!");
    }

    public int getInputType()
    {
        throw new RuntimeException("Stub!");
    }

    public void setInputType(int inputType)
    {
        throw new RuntimeException("Stub!");
    }

    public Bundle getExtras()
    {
        throw new RuntimeException("Stub!");
    }

    public TouchDelegateInfo getTouchDelegateInfo()
    {
        throw new RuntimeException("Stub!");
    }

    public void setTouchDelegateInfo(TouchDelegateInfo delegatedInfo)
    {
        throw new RuntimeException("Stub!");
    }

    public int describeContents()
    {
        throw new RuntimeException("Stub!");
    }

    public static AccessibilityNodeInfo obtain(View source)
    {
        throw new RuntimeException("Stub!");
    }

    public static AccessibilityNodeInfo obtain(View root, int virtualDescendantId)
    {
        throw new RuntimeException("Stub!");
    }

    public static AccessibilityNodeInfo obtain()
    {
        throw new RuntimeException("Stub!");
    }

    public static AccessibilityNodeInfo obtain(AccessibilityNodeInfo info)
    {
        throw new RuntimeException("Stub!");
    }

    public void recycle()
    {
        throw new RuntimeException("Stub!");
    }

    public void writeToParcel(Parcel parcel, int flags)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean equals(Object object)
    {
        throw new RuntimeException("Stub!");
    }

    public int hashCode()
    {
        throw new RuntimeException("Stub!");
    }

    public String toString()
    {
        throw new RuntimeException("Stub!");
    }

    public static final int ACTION_ACCESSIBILITY_FOCUS = 64;
    public static final String ACTION_ARGUMENT_COLUMN_INT = "android.view.accessibility.action.ARGUMENT_COLUMN_INT";
    public static final String ACTION_ARGUMENT_EXTEND_SELECTION_BOOLEAN = "ACTION_ARGUMENT_EXTEND_SELECTION_BOOLEAN";
    public static final String ACTION_ARGUMENT_HTML_ELEMENT_STRING = "ACTION_ARGUMENT_HTML_ELEMENT_STRING";
    public static final String ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INT = "ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INT";
    public static final String ACTION_ARGUMENT_MOVE_WINDOW_X = "ACTION_ARGUMENT_MOVE_WINDOW_X";
    public static final String ACTION_ARGUMENT_MOVE_WINDOW_Y = "ACTION_ARGUMENT_MOVE_WINDOW_Y";
    public static final String ACTION_ARGUMENT_PROGRESS_VALUE = "android.view.accessibility.action.ARGUMENT_PROGRESS_VALUE";
    public static final String ACTION_ARGUMENT_ROW_INT = "android.view.accessibility.action.ARGUMENT_ROW_INT";
    public static final String ACTION_ARGUMENT_SELECTION_END_INT = "ACTION_ARGUMENT_SELECTION_END_INT";
    public static final String ACTION_ARGUMENT_SELECTION_START_INT = "ACTION_ARGUMENT_SELECTION_START_INT";
    public static final String ACTION_ARGUMENT_SET_TEXT_CHARSEQUENCE = "ACTION_ARGUMENT_SET_TEXT_CHARSEQUENCE";
    public static final int ACTION_CLEAR_ACCESSIBILITY_FOCUS = 128;
    public static final int ACTION_CLEAR_FOCUS = 2;
    public static final int ACTION_CLEAR_SELECTION = 8;
    public static final int ACTION_CLICK = 16;
    public static final int ACTION_COLLAPSE = 0x80000;
    public static final int ACTION_COPY = 16384;
    public static final int ACTION_CUT = 0x10000;
    public static final int ACTION_DISMISS = 0x100000;
    public static final int ACTION_EXPAND = 0x40000;
    public static final int ACTION_FOCUS = 1;
    public static final int ACTION_LONG_CLICK = 32;
    public static final int ACTION_NEXT_AT_MOVEMENT_GRANULARITY = 256;
    public static final int ACTION_NEXT_HTML_ELEMENT = 1024;
    public static final int ACTION_PASTE = 32768;
    public static final int ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY = 512;
    public static final int ACTION_PREVIOUS_HTML_ELEMENT = 2048;
    public static final int ACTION_SCROLL_BACKWARD = 8192;
    public static final int ACTION_SCROLL_FORWARD = 4096;
    public static final int ACTION_SELECT = 4;
    public static final int ACTION_SET_SELECTION = 0x20000;
    public static final int ACTION_SET_TEXT = 0x200000;
    public static final android.os.Parcelable.Creator CREATOR = null;
    public static final String EXTRA_DATA_TEXT_CHARACTER_LOCATION_ARG_LENGTH = "android.view.accessibility.extra.DATA_TEXT_CHARACTER_LOCATION_ARG_LENGTH";
    public static final String EXTRA_DATA_TEXT_CHARACTER_LOCATION_ARG_START_INDEX = "android.view.accessibility.extra.DATA_TEXT_CHARACTER_LOCATION_ARG_START_INDEX";
    public static final String EXTRA_DATA_TEXT_CHARACTER_LOCATION_KEY = "android.view.accessibility.extra.DATA_TEXT_CHARACTER_LOCATION_KEY";
    public static final int FOCUS_ACCESSIBILITY = 2;
    public static final int FOCUS_INPUT = 1;
    public static final int MOVEMENT_GRANULARITY_CHARACTER = 1;
    public static final int MOVEMENT_GRANULARITY_LINE = 4;
    public static final int MOVEMENT_GRANULARITY_PAGE = 16;
    public static final int MOVEMENT_GRANULARITY_PARAGRAPH = 8;
    public static final int MOVEMENT_GRANULARITY_WORD = 2;

}
