// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   ViewDebug.java

package android.view;

import java.lang.annotation.Annotation;

// Referenced classes of package android.view:
//            View

public class ViewDebug
{
    /**
     * @deprecated Class RecyclerTraceType is deprecated
     */

    public static final class RecyclerTraceType extends Enum
    {

        public static RecyclerTraceType[] values()
        {
            return (RecyclerTraceType[])$VALUES.clone();
        }

        public static RecyclerTraceType valueOf(String name)
        {
            return (RecyclerTraceType)Enum.valueOf(android/view/ViewDebug$RecyclerTraceType, name);
        }

        /**
         * @deprecated Field NEW_VIEW is deprecated
         */
        public static final RecyclerTraceType NEW_VIEW;
        /**
         * @deprecated Field BIND_VIEW is deprecated
         */
        public static final RecyclerTraceType BIND_VIEW;
        /**
         * @deprecated Field RECYCLE_FROM_ACTIVE_HEAP is deprecated
         */
        public static final RecyclerTraceType RECYCLE_FROM_ACTIVE_HEAP;
        /**
         * @deprecated Field RECYCLE_FROM_SCRAP_HEAP is deprecated
         */
        public static final RecyclerTraceType RECYCLE_FROM_SCRAP_HEAP;
        /**
         * @deprecated Field MOVE_TO_SCRAP_HEAP is deprecated
         */
        public static final RecyclerTraceType MOVE_TO_SCRAP_HEAP;
        /**
         * @deprecated Field MOVE_FROM_ACTIVE_TO_SCRAP_HEAP is deprecated
         */
        public static final RecyclerTraceType MOVE_FROM_ACTIVE_TO_SCRAP_HEAP;
        private static final RecyclerTraceType $VALUES[];

        static 
        {
            NEW_VIEW = new RecyclerTraceType("NEW_VIEW", 0);
            BIND_VIEW = new RecyclerTraceType("BIND_VIEW", 1);
            RECYCLE_FROM_ACTIVE_HEAP = new RecyclerTraceType("RECYCLE_FROM_ACTIVE_HEAP", 2);
            RECYCLE_FROM_SCRAP_HEAP = new RecyclerTraceType("RECYCLE_FROM_SCRAP_HEAP", 3);
            MOVE_TO_SCRAP_HEAP = new RecyclerTraceType("MOVE_TO_SCRAP_HEAP", 4);
            MOVE_FROM_ACTIVE_TO_SCRAP_HEAP = new RecyclerTraceType("MOVE_FROM_ACTIVE_TO_SCRAP_HEAP", 5);
            $VALUES = (new RecyclerTraceType[] {
                NEW_VIEW, BIND_VIEW, RECYCLE_FROM_ACTIVE_HEAP, RECYCLE_FROM_SCRAP_HEAP, MOVE_TO_SCRAP_HEAP, MOVE_FROM_ACTIVE_TO_SCRAP_HEAP
            });
        }

        private RecyclerTraceType(String s, int i)
        {
            super(s, i);
        }
    }

    public static interface IntToString
        extends Annotation
    {

        public abstract int from();

        public abstract String to();
    }

    /**
     * @deprecated Class HierarchyTraceType is deprecated
     */

    public static final class HierarchyTraceType extends Enum
    {

        public static HierarchyTraceType[] values()
        {
            return (HierarchyTraceType[])$VALUES.clone();
        }

        public static HierarchyTraceType valueOf(String name)
        {
            return (HierarchyTraceType)Enum.valueOf(android/view/ViewDebug$HierarchyTraceType, name);
        }

        /**
         * @deprecated Field INVALIDATE is deprecated
         */
        public static final HierarchyTraceType INVALIDATE;
        /**
         * @deprecated Field INVALIDATE_CHILD is deprecated
         */
        public static final HierarchyTraceType INVALIDATE_CHILD;
        /**
         * @deprecated Field INVALIDATE_CHILD_IN_PARENT is deprecated
         */
        public static final HierarchyTraceType INVALIDATE_CHILD_IN_PARENT;
        /**
         * @deprecated Field REQUEST_LAYOUT is deprecated
         */
        public static final HierarchyTraceType REQUEST_LAYOUT;
        /**
         * @deprecated Field ON_LAYOUT is deprecated
         */
        public static final HierarchyTraceType ON_LAYOUT;
        /**
         * @deprecated Field ON_MEASURE is deprecated
         */
        public static final HierarchyTraceType ON_MEASURE;
        /**
         * @deprecated Field DRAW is deprecated
         */
        public static final HierarchyTraceType DRAW;
        /**
         * @deprecated Field BUILD_CACHE is deprecated
         */
        public static final HierarchyTraceType BUILD_CACHE;
        private static final HierarchyTraceType $VALUES[];

        static 
        {
            INVALIDATE = new HierarchyTraceType("INVALIDATE", 0);
            INVALIDATE_CHILD = new HierarchyTraceType("INVALIDATE_CHILD", 1);
            INVALIDATE_CHILD_IN_PARENT = new HierarchyTraceType("INVALIDATE_CHILD_IN_PARENT", 2);
            REQUEST_LAYOUT = new HierarchyTraceType("REQUEST_LAYOUT", 3);
            ON_LAYOUT = new HierarchyTraceType("ON_LAYOUT", 4);
            ON_MEASURE = new HierarchyTraceType("ON_MEASURE", 5);
            DRAW = new HierarchyTraceType("DRAW", 6);
            BUILD_CACHE = new HierarchyTraceType("BUILD_CACHE", 7);
            $VALUES = (new HierarchyTraceType[] {
                INVALIDATE, INVALIDATE_CHILD, INVALIDATE_CHILD_IN_PARENT, REQUEST_LAYOUT, ON_LAYOUT, ON_MEASURE, DRAW, BUILD_CACHE
            });
        }

        private HierarchyTraceType(String s, int i)
        {
            super(s, i);
        }
    }

    public static interface FlagToString
        extends Annotation
    {

        public abstract int mask();

        public abstract int equals();

        public abstract String name();

        public abstract boolean outputIf();
    }

    public static interface ExportedProperty
        extends Annotation
    {

        public abstract boolean resolveId();

        public abstract IntToString[] mapping();

        public abstract IntToString[] indexMapping();

        public abstract FlagToString[] flagMapping();

        public abstract boolean deepExport();

        public abstract String prefix();

        public abstract String category();

        public abstract boolean formatToHexString();

        public abstract boolean hasAdjacentMapping();
    }

    public static interface CapturedViewProperty
        extends Annotation
    {

        public abstract boolean retrieveReturn();
    }


    public ViewDebug()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method trace is deprecated
     */

    public static transient void trace(View view, RecyclerTraceType type, int parameters[])
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method startRecyclerTracing is deprecated
     */

    public static void startRecyclerTracing(String prefix, View view)
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method stopRecyclerTracing is deprecated
     */

    public static void stopRecyclerTracing()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method trace is deprecated
     */

    public static void trace(View view, HierarchyTraceType type)
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method startHierarchyTracing is deprecated
     */

    public static void startHierarchyTracing(String prefix, View view)
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method stopHierarchyTracing is deprecated
     */

    public static void stopHierarchyTracing()
    {
        throw new RuntimeException("Stub!");
    }

    public static void dumpCapturedView(String tag, Object view)
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Field TRACE_HIERARCHY is deprecated
     */
    public static final boolean TRACE_HIERARCHY = false;
    /**
     * @deprecated Field TRACE_RECYCLER is deprecated
     */
    public static final boolean TRACE_RECYCLER = false;
}
