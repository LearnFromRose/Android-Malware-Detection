// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   MediaRecorder.java

package android.media;

import android.hardware.Camera;
import android.os.Handler;
import android.os.PersistableBundle;
import android.view.Surface;
import java.io.*;
import java.util.List;
import java.util.concurrent.Executor;

// Referenced classes of package android.media:
//            AudioRouting, AudioRecordingMonitor, MicrophoneDirection, AudioManager, 
//            CamcorderProfile, AudioDeviceInfo, AudioRecordingConfiguration

public class MediaRecorder
    implements AudioRouting, AudioRecordingMonitor, MicrophoneDirection
{
    public final class VideoSource
    {

        public static final int CAMERA = 1;
        public static final int DEFAULT = 0;
        public static final int SURFACE = 2;
        final MediaRecorder this$0;

        VideoSource()
        {
            this.this$0 = MediaRecorder.this;
            super();
            throw new RuntimeException("Stub!");
        }
    }

    public final class VideoEncoder
    {

        public static final int DEFAULT = 0;
        public static final int H263 = 1;
        public static final int H264 = 2;
        public static final int HEVC = 5;
        public static final int MPEG_4_SP = 3;
        public static final int VP8 = 4;
        final MediaRecorder this$0;

        VideoEncoder()
        {
            this.this$0 = MediaRecorder.this;
            super();
            throw new RuntimeException("Stub!");
        }
    }

    public final class OutputFormat
    {

        public static final int AAC_ADTS = 6;
        public static final int AMR_NB = 3;
        public static final int AMR_WB = 4;
        public static final int DEFAULT = 0;
        public static final int MPEG_2_TS = 8;
        public static final int MPEG_4 = 2;
        public static final int OGG = 11;
        /**
         * @deprecated Field RAW_AMR is deprecated
         */
        public static final int RAW_AMR = 3;
        public static final int THREE_GPP = 1;
        public static final int WEBM = 9;
        final MediaRecorder this$0;

        OutputFormat()
        {
            this.this$0 = MediaRecorder.this;
            super();
            throw new RuntimeException("Stub!");
        }
    }

    public static interface OnInfoListener
    {

        public abstract void onInfo(MediaRecorder mediarecorder, int i, int j);
    }

    public static interface OnErrorListener
    {

        public abstract void onError(MediaRecorder mediarecorder, int i, int j);
    }

    public static final class MetricsConstants
    {

        public static final String AUDIO_BITRATE = "android.media.mediarecorder.audio-bitrate";
        public static final String AUDIO_CHANNELS = "android.media.mediarecorder.audio-channels";
        public static final String AUDIO_SAMPLERATE = "android.media.mediarecorder.audio-samplerate";
        public static final String AUDIO_TIMESCALE = "android.media.mediarecorder.audio-timescale";
        public static final String CAPTURE_FPS = "android.media.mediarecorder.capture-fps";
        public static final String CAPTURE_FPS_ENABLE = "android.media.mediarecorder.capture-fpsenable";
        public static final String FRAMERATE = "android.media.mediarecorder.frame-rate";
        public static final String HEIGHT = "android.media.mediarecorder.height";
        public static final String MOVIE_TIMESCALE = "android.media.mediarecorder.movie-timescale";
        public static final String ROTATION = "android.media.mediarecorder.rotation";
        public static final String VIDEO_BITRATE = "android.media.mediarecorder.video-bitrate";
        public static final String VIDEO_IFRAME_INTERVAL = "android.media.mediarecorder.video-iframe-interval";
        public static final String VIDEO_LEVEL = "android.media.mediarecorder.video-encoder-level";
        public static final String VIDEO_PROFILE = "android.media.mediarecorder.video-encoder-profile";
        public static final String VIDEO_TIMESCALE = "android.media.mediarecorder.video-timescale";
        public static final String WIDTH = "android.media.mediarecorder.width";

        MetricsConstants()
        {
            throw new RuntimeException("Stub!");
        }
    }

    public final class AudioSource
    {

        public static final int CAMCORDER = 5;
        public static final int DEFAULT = 0;
        public static final int MIC = 1;
        public static final int REMOTE_SUBMIX = 8;
        public static final int UNPROCESSED = 9;
        public static final int VOICE_CALL = 4;
        public static final int VOICE_COMMUNICATION = 7;
        public static final int VOICE_DOWNLINK = 3;
        public static final int VOICE_PERFORMANCE = 10;
        public static final int VOICE_RECOGNITION = 6;
        public static final int VOICE_UPLINK = 2;
        final MediaRecorder this$0;

        AudioSource()
        {
            this.this$0 = MediaRecorder.this;
            super();
            throw new RuntimeException("Stub!");
        }
    }

    public final class AudioEncoder
    {

        public static final int AAC = 3;
        public static final int AAC_ELD = 5;
        public static final int AMR_NB = 1;
        public static final int AMR_WB = 2;
        public static final int DEFAULT = 0;
        public static final int HE_AAC = 4;
        public static final int OPUS = 7;
        public static final int VORBIS = 6;
        final MediaRecorder this$0;

        AudioEncoder()
        {
            this.this$0 = MediaRecorder.this;
            super();
            throw new RuntimeException("Stub!");
        }
    }


    public MediaRecorder()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method setCamera is deprecated
     */

    public native void setCamera(Camera camera);

    public native Surface getSurface();

    public void setInputSurface(Surface surface)
    {
        throw new RuntimeException("Stub!");
    }

    public void setPreviewDisplay(Surface sv)
    {
        throw new RuntimeException("Stub!");
    }

    public native void setAudioSource(int i)
        throws IllegalStateException;

    public static final int getAudioSourceMax()
    {
        throw new RuntimeException("Stub!");
    }

    public native void setVideoSource(int i)
        throws IllegalStateException;

    public void setProfile(CamcorderProfile profile)
    {
        throw new RuntimeException("Stub!");
    }

    public void setCaptureRate(double fps)
    {
        throw new RuntimeException("Stub!");
    }

    public void setOrientationHint(int degrees)
    {
        throw new RuntimeException("Stub!");
    }

    public void setLocation(float latitude, float longitude)
    {
        throw new RuntimeException("Stub!");
    }

    public native void setOutputFormat(int i)
        throws IllegalStateException;

    public native void setVideoSize(int i, int j)
        throws IllegalStateException;

    public native void setVideoFrameRate(int i)
        throws IllegalStateException;

    public native void setMaxDuration(int i)
        throws IllegalArgumentException;

    public native void setMaxFileSize(long l)
        throws IllegalArgumentException;

    public native void setAudioEncoder(int i)
        throws IllegalStateException;

    public native void setVideoEncoder(int i)
        throws IllegalStateException;

    public void setAudioSamplingRate(int samplingRate)
    {
        throw new RuntimeException("Stub!");
    }

    public void setAudioChannels(int numChannels)
    {
        throw new RuntimeException("Stub!");
    }

    public void setAudioEncodingBitRate(int bitRate)
    {
        throw new RuntimeException("Stub!");
    }

    public void setVideoEncodingBitRate(int bitRate)
    {
        throw new RuntimeException("Stub!");
    }

    public void setVideoEncodingProfileLevel(int profile, int level)
    {
        throw new RuntimeException("Stub!");
    }

    public void setOutputFile(FileDescriptor fd)
        throws IllegalStateException
    {
        throw new RuntimeException("Stub!");
    }

    public void setOutputFile(File file)
    {
        throw new RuntimeException("Stub!");
    }

    public void setNextOutputFile(FileDescriptor fd)
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public void setOutputFile(String path)
        throws IllegalStateException
    {
        throw new RuntimeException("Stub!");
    }

    public void setNextOutputFile(File file)
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public void prepare()
        throws IOException, IllegalStateException
    {
        throw new RuntimeException("Stub!");
    }

    public native void start()
        throws IllegalStateException;

    public native void stop()
        throws IllegalStateException;

    public native void pause()
        throws IllegalStateException;

    public native void resume()
        throws IllegalStateException;

    public void reset()
    {
        throw new RuntimeException("Stub!");
    }

    public native int getMaxAmplitude()
        throws IllegalStateException;

    public void setOnErrorListener(OnErrorListener l)
    {
        throw new RuntimeException("Stub!");
    }

    public void setOnInfoListener(OnInfoListener listener)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean setPreferredDevice(AudioDeviceInfo deviceInfo)
    {
        throw new RuntimeException("Stub!");
    }

    public AudioDeviceInfo getPreferredDevice()
    {
        throw new RuntimeException("Stub!");
    }

    public AudioDeviceInfo getRoutedDevice()
    {
        throw new RuntimeException("Stub!");
    }

    public void addOnRoutingChangedListener(AudioRouting.OnRoutingChangedListener listener, Handler handler)
    {
        throw new RuntimeException("Stub!");
    }

    public void removeOnRoutingChangedListener(AudioRouting.OnRoutingChangedListener listener)
    {
        throw new RuntimeException("Stub!");
    }

    public List getActiveMicrophones()
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public boolean setPreferredMicrophoneDirection(int direction)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean setPreferredMicrophoneFieldDimension(float zoom)
    {
        throw new RuntimeException("Stub!");
    }

    public void registerAudioRecordingCallback(Executor executor, AudioManager.AudioRecordingCallback cb)
    {
        throw new RuntimeException("Stub!");
    }

    public void unregisterAudioRecordingCallback(AudioManager.AudioRecordingCallback cb)
    {
        throw new RuntimeException("Stub!");
    }

    public AudioRecordingConfiguration getActiveRecordingConfiguration()
    {
        throw new RuntimeException("Stub!");
    }

    public native void release();

    public PersistableBundle getMetrics()
    {
        throw new RuntimeException("Stub!");
    }

    protected void finalize()
    {
        throw new RuntimeException("Stub!");
    }

    public static final int MEDIA_ERROR_SERVER_DIED = 100;
    public static final int MEDIA_RECORDER_ERROR_UNKNOWN = 1;
    public static final int MEDIA_RECORDER_INFO_MAX_DURATION_REACHED = 800;
    public static final int MEDIA_RECORDER_INFO_MAX_FILESIZE_APPROACHING = 802;
    public static final int MEDIA_RECORDER_INFO_MAX_FILESIZE_REACHED = 801;
    public static final int MEDIA_RECORDER_INFO_NEXT_OUTPUT_FILE_STARTED = 803;
    public static final int MEDIA_RECORDER_INFO_UNKNOWN = 1;
}
