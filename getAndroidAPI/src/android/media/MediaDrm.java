// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   MediaDrm.java

package android.media;

import android.os.Handler;
import android.os.PersistableBundle;
import java.lang.annotation.Annotation;
import java.util.*;
import java.util.concurrent.Executor;

// Referenced classes of package android.media:
//            UnsupportedSchemeException, NotProvisionedException, ResourceBusyException, DeniedByServerException

public final class MediaDrm
    implements AutoCloseable
{
    public static final class SessionException extends RuntimeException
    {

        public int getErrorCode()
        {
            throw new RuntimeException("Stub!");
        }

        public static final int ERROR_RESOURCE_CONTENTION = 1;
        public static final int ERROR_UNKNOWN = 0;

        public SessionException(int errorCode, String detailMessage)
        {
            throw new RuntimeException("Stub!");
        }
    }

    /**
     * @deprecated Interface SecurityLevel is deprecated
     */

    public static interface SecurityLevel
        extends Annotation
    {
    }

    public static final class ProvisionRequest
    {

        public byte[] getData()
        {
            throw new RuntimeException("Stub!");
        }

        public String getDefaultUrl()
        {
            throw new RuntimeException("Stub!");
        }

        ProvisionRequest()
        {
            throw new RuntimeException("Stub!");
        }
    }

    public static interface OnSessionLostStateListener
    {

        public abstract void onSessionLostState(MediaDrm mediadrm, byte abyte0[]);
    }

    public static interface OnKeyStatusChangeListener
    {

        public abstract void onKeyStatusChange(MediaDrm mediadrm, byte abyte0[], List list, boolean flag);
    }

    public static interface OnExpirationUpdateListener
    {

        public abstract void onExpirationUpdate(MediaDrm mediadrm, byte abyte0[], long l);
    }

    public static interface OnEventListener
    {

        public abstract void onEvent(MediaDrm mediadrm, byte abyte0[], int i, int j, byte abyte1[]);
    }

    public static final class MetricsConstants
    {

        public static final String CLOSE_SESSION_ERROR_COUNT = "drm.mediadrm.close_session.error.count";
        public static final String CLOSE_SESSION_ERROR_LIST = "drm.mediadrm.close_session.error.list";
        public static final String CLOSE_SESSION_OK_COUNT = "drm.mediadrm.close_session.ok.count";
        public static final String EVENT_KEY_EXPIRED_COUNT = "drm.mediadrm.event.KEY_EXPIRED.count";
        public static final String EVENT_KEY_NEEDED_COUNT = "drm.mediadrm.event.KEY_NEEDED.count";
        public static final String EVENT_PROVISION_REQUIRED_COUNT = "drm.mediadrm.event.PROVISION_REQUIRED.count";
        public static final String EVENT_SESSION_RECLAIMED_COUNT = "drm.mediadrm.event.SESSION_RECLAIMED.count";
        public static final String EVENT_VENDOR_DEFINED_COUNT = "drm.mediadrm.event.VENDOR_DEFINED.count";
        public static final String GET_DEVICE_UNIQUE_ID_ERROR_COUNT = "drm.mediadrm.get_device_unique_id.error.count";
        public static final String GET_DEVICE_UNIQUE_ID_ERROR_LIST = "drm.mediadrm.get_device_unique_id.error.list";
        public static final String GET_DEVICE_UNIQUE_ID_OK_COUNT = "drm.mediadrm.get_device_unique_id.ok.count";
        public static final String GET_KEY_REQUEST_ERROR_COUNT = "drm.mediadrm.get_key_request.error.count";
        public static final String GET_KEY_REQUEST_ERROR_LIST = "drm.mediadrm.get_key_request.error.list";
        public static final String GET_KEY_REQUEST_OK_COUNT = "drm.mediadrm.get_key_request.ok.count";
        public static final String GET_KEY_REQUEST_OK_TIME_MICROS = "drm.mediadrm.get_key_request.ok.average_time_micros";
        public static final String GET_PROVISION_REQUEST_ERROR_COUNT = "drm.mediadrm.get_provision_request.error.count";
        public static final String GET_PROVISION_REQUEST_ERROR_LIST = "drm.mediadrm.get_provision_request.error.list";
        public static final String GET_PROVISION_REQUEST_OK_COUNT = "drm.mediadrm.get_provision_request.ok.count";
        public static final String KEY_STATUS_EXPIRED_COUNT = "drm.mediadrm.key_status.EXPIRED.count";
        public static final String KEY_STATUS_INTERNAL_ERROR_COUNT = "drm.mediadrm.key_status.INTERNAL_ERROR.count";
        public static final String KEY_STATUS_OUTPUT_NOT_ALLOWED_COUNT = "drm.mediadrm.key_status_change.OUTPUT_NOT_ALLOWED.count";
        public static final String KEY_STATUS_PENDING_COUNT = "drm.mediadrm.key_status_change.PENDING.count";
        public static final String KEY_STATUS_USABLE_COUNT = "drm.mediadrm.key_status_change.USABLE.count";
        public static final String OPEN_SESSION_ERROR_COUNT = "drm.mediadrm.open_session.error.count";
        public static final String OPEN_SESSION_ERROR_LIST = "drm.mediadrm.open_session.error.list";
        public static final String OPEN_SESSION_OK_COUNT = "drm.mediadrm.open_session.ok.count";
        public static final String PROVIDE_KEY_RESPONSE_ERROR_COUNT = "drm.mediadrm.provide_key_response.error.count";
        public static final String PROVIDE_KEY_RESPONSE_ERROR_LIST = "drm.mediadrm.provide_key_response.error.list";
        public static final String PROVIDE_KEY_RESPONSE_OK_COUNT = "drm.mediadrm.provide_key_response.ok.count";
        public static final String PROVIDE_KEY_RESPONSE_OK_TIME_MICROS = "drm.mediadrm.provide_key_response.ok.average_time_micros";
        public static final String PROVIDE_PROVISION_RESPONSE_ERROR_COUNT = "drm.mediadrm.provide_provision_response.error.count";
        public static final String PROVIDE_PROVISION_RESPONSE_ERROR_LIST = "drm.mediadrm.provide_provision_response.error.list";
        public static final String PROVIDE_PROVISION_RESPONSE_OK_COUNT = "drm.mediadrm.provide_provision_response.ok.count";
        public static final String SESSION_END_TIMES_MS = "drm.mediadrm.session_end_times_ms";
        public static final String SESSION_START_TIMES_MS = "drm.mediadrm.session_start_times_ms";

        MetricsConstants()
        {
            throw new RuntimeException("Stub!");
        }
    }

    public static final class MediaDrmStateException extends IllegalStateException
    {

        public String getDiagnosticInfo()
        {
            throw new RuntimeException("Stub!");
        }

        MediaDrmStateException(int errorCode, String detailMessage)
        {
            throw new RuntimeException("Stub!");
        }
    }

    public static final class KeyStatus
    {

        public int getStatusCode()
        {
            throw new RuntimeException("Stub!");
        }

        public byte[] getKeyId()
        {
            throw new RuntimeException("Stub!");
        }

        public static final int STATUS_EXPIRED = 1;
        public static final int STATUS_INTERNAL_ERROR = 4;
        public static final int STATUS_OUTPUT_NOT_ALLOWED = 2;
        public static final int STATUS_PENDING = 3;
        public static final int STATUS_USABLE = 0;
        public static final int STATUS_USABLE_IN_FUTURE = 5;

        KeyStatus(byte keyId[], int statusCode)
        {
            throw new RuntimeException("Stub!");
        }
    }

    public static final class KeyRequest
    {

        public byte[] getData()
        {
            throw new RuntimeException("Stub!");
        }

        public String getDefaultUrl()
        {
            throw new RuntimeException("Stub!");
        }

        public int getRequestType()
        {
            throw new RuntimeException("Stub!");
        }

        public static final int REQUEST_TYPE_INITIAL = 0;
        public static final int REQUEST_TYPE_NONE = 3;
        public static final int REQUEST_TYPE_RELEASE = 2;
        public static final int REQUEST_TYPE_RENEWAL = 1;
        public static final int REQUEST_TYPE_UPDATE = 4;

        KeyRequest()
        {
            throw new RuntimeException("Stub!");
        }
    }

    /**
     * @deprecated Interface HdcpLevel is deprecated
     */

    public static interface HdcpLevel
        extends Annotation
    {
    }

    public final class CryptoSession
    {

        public byte[] encrypt(byte keyid[], byte input[], byte iv[])
        {
            throw new RuntimeException("Stub!");
        }

        public byte[] decrypt(byte keyid[], byte input[], byte iv[])
        {
            throw new RuntimeException("Stub!");
        }

        public byte[] sign(byte keyid[], byte message[])
        {
            throw new RuntimeException("Stub!");
        }

        public boolean verify(byte keyid[], byte message[], byte signature[])
        {
            throw new RuntimeException("Stub!");
        }

        final MediaDrm this$0;

        CryptoSession(byte sessionId[], String cipherAlgorithm, String macAlgorithm)
        {
            this.this$0 = MediaDrm.this;
            super();
            throw new RuntimeException("Stub!");
        }
    }


    public MediaDrm(UUID uuid)
        throws UnsupportedSchemeException
    {
        throw new RuntimeException("Stub!");
    }

    public static boolean isCryptoSchemeSupported(UUID uuid)
    {
        throw new RuntimeException("Stub!");
    }

    public static boolean isCryptoSchemeSupported(UUID uuid, String mimeType)
    {
        throw new RuntimeException("Stub!");
    }

    public static boolean isCryptoSchemeSupported(UUID uuid, String mimeType, int securityLevel)
    {
        throw new RuntimeException("Stub!");
    }

    public void setOnExpirationUpdateListener(OnExpirationUpdateListener listener, Handler handler)
    {
        throw new RuntimeException("Stub!");
    }

    public void setOnExpirationUpdateListener(Executor executor, OnExpirationUpdateListener listener)
    {
        throw new RuntimeException("Stub!");
    }

    public void clearOnExpirationUpdateListener()
    {
        throw new RuntimeException("Stub!");
    }

    public void setOnKeyStatusChangeListener(OnKeyStatusChangeListener listener, Handler handler)
    {
        throw new RuntimeException("Stub!");
    }

    public void setOnKeyStatusChangeListener(Executor executor, OnKeyStatusChangeListener listener)
    {
        throw new RuntimeException("Stub!");
    }

    public void clearOnKeyStatusChangeListener()
    {
        throw new RuntimeException("Stub!");
    }

    public void setOnSessionLostStateListener(OnSessionLostStateListener listener, Handler handler)
    {
        throw new RuntimeException("Stub!");
    }

    public void setOnSessionLostStateListener(Executor executor, OnSessionLostStateListener listener)
    {
        throw new RuntimeException("Stub!");
    }

    public void clearOnSessionLostStateListener()
    {
        throw new RuntimeException("Stub!");
    }

    public void setOnEventListener(OnEventListener listener)
    {
        throw new RuntimeException("Stub!");
    }

    public void setOnEventListener(OnEventListener listener, Handler handler)
    {
        throw new RuntimeException("Stub!");
    }

    public void setOnEventListener(Executor executor, OnEventListener listener)
    {
        throw new RuntimeException("Stub!");
    }

    public void clearOnEventListener()
    {
        throw new RuntimeException("Stub!");
    }

    public byte[] openSession()
        throws NotProvisionedException, ResourceBusyException
    {
        throw new RuntimeException("Stub!");
    }

    public native byte[] openSession(int i)
        throws NotProvisionedException, ResourceBusyException;

    public native void closeSession(byte abyte0[]);

    public native KeyRequest getKeyRequest(byte abyte0[], byte abyte1[], String s, int i, HashMap hashmap)
        throws NotProvisionedException;

    public native byte[] provideKeyResponse(byte abyte0[], byte abyte1[])
        throws DeniedByServerException, NotProvisionedException;

    public native void restoreKeys(byte abyte0[], byte abyte1[]);

    public native void removeKeys(byte abyte0[]);

    public native HashMap queryKeyStatus(byte abyte0[]);

    public ProvisionRequest getProvisionRequest()
    {
        throw new RuntimeException("Stub!");
    }

    public void provideProvisionResponse(byte response[])
        throws DeniedByServerException
    {
        throw new RuntimeException("Stub!");
    }

    public native List getOfflineLicenseKeySetIds();

    public native void removeOfflineLicense(byte abyte0[]);

    public native int getOfflineLicenseState(byte abyte0[]);

    public native List getSecureStops();

    public native List getSecureStopIds();

    public native byte[] getSecureStop(byte abyte0[]);

    public native void releaseSecureStops(byte abyte0[]);

    public native void removeSecureStop(byte abyte0[]);

    public native void removeAllSecureStops();

    /**
     * @deprecated Method releaseAllSecureStops is deprecated
     */

    public void releaseAllSecureStops()
    {
        throw new RuntimeException("Stub!");
    }

    public native int getConnectedHdcpLevel();

    public native int getMaxHdcpLevel();

    public native int getOpenSessionCount();

    public native int getMaxSessionCount();

    public static int getMaxSecurityLevel()
    {
        throw new RuntimeException("Stub!");
    }

    public native int getSecurityLevel(byte abyte0[]);

    public native String getPropertyString(String s);

    public native void setPropertyString(String s, String s1);

    public native byte[] getPropertyByteArray(String s);

    public native void setPropertyByteArray(String s, byte abyte0[]);

    public PersistableBundle getMetrics()
    {
        throw new RuntimeException("Stub!");
    }

    public CryptoSession getCryptoSession(byte sessionId[], String cipherAlgorithm, String macAlgorithm)
    {
        throw new RuntimeException("Stub!");
    }

    protected void finalize()
        throws Throwable
    {
        throw new RuntimeException("Stub!");
    }

    public void close()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method release is deprecated
     */

    public void release()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Field EVENT_KEY_EXPIRED is deprecated
     */
    public static final int EVENT_KEY_EXPIRED = 3;
    public static final int EVENT_KEY_REQUIRED = 2;
    /**
     * @deprecated Field EVENT_PROVISION_REQUIRED is deprecated
     */
    public static final int EVENT_PROVISION_REQUIRED = 1;
    public static final int EVENT_SESSION_RECLAIMED = 5;
    public static final int EVENT_VENDOR_DEFINED = 4;
    public static final int HDCP_LEVEL_UNKNOWN = 0;
    public static final int HDCP_NONE = 1;
    public static final int HDCP_NO_DIGITAL_OUTPUT = 0x7fffffff;
    public static final int HDCP_V1 = 2;
    public static final int HDCP_V2 = 3;
    public static final int HDCP_V2_1 = 4;
    public static final int HDCP_V2_2 = 5;
    public static final int HDCP_V2_3 = 6;
    public static final int KEY_TYPE_OFFLINE = 2;
    public static final int KEY_TYPE_RELEASE = 3;
    public static final int KEY_TYPE_STREAMING = 1;
    public static final int OFFLINE_LICENSE_STATE_RELEASED = 2;
    public static final int OFFLINE_LICENSE_STATE_UNKNOWN = 0;
    public static final int OFFLINE_LICENSE_STATE_USABLE = 1;
    public static final String PROPERTY_ALGORITHMS = "algorithms";
    public static final String PROPERTY_DESCRIPTION = "description";
    public static final String PROPERTY_DEVICE_UNIQUE_ID = "deviceUniqueId";
    public static final String PROPERTY_VENDOR = "vendor";
    public static final String PROPERTY_VERSION = "version";
    public static final int SECURITY_LEVEL_HW_SECURE_ALL = 5;
    public static final int SECURITY_LEVEL_HW_SECURE_CRYPTO = 3;
    public static final int SECURITY_LEVEL_HW_SECURE_DECODE = 4;
    public static final int SECURITY_LEVEL_SW_SECURE_CRYPTO = 1;
    public static final int SECURITY_LEVEL_SW_SECURE_DECODE = 2;
    public static final int SECURITY_LEVEL_UNKNOWN = 0;
}
