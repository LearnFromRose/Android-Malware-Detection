// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   AudioRecord.java

package android.media;

import android.os.Handler;
import android.os.PersistableBundle;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.util.List;
import java.util.concurrent.Executor;

// Referenced classes of package android.media:
//            AudioRouting, MicrophoneDirection, AudioRecordingMonitor, AudioManager, 
//            AudioFormat, AudioTimestamp, MediaSyncEvent, AudioDeviceInfo, 
//            AudioRecordingConfiguration, AudioPlaybackCaptureConfiguration

public class AudioRecord
    implements AudioRouting, MicrophoneDirection, AudioRecordingMonitor
{
    /**
     * @deprecated Interface OnRoutingChangedListener is deprecated
     */

    public static interface OnRoutingChangedListener
        extends AudioRouting.OnRoutingChangedListener
    {

        /**
         * @deprecated Method onRoutingChanged is deprecated
         */

        public abstract void onRoutingChanged(AudioRecord audiorecord);

        /**
         * @deprecated Method onRoutingChanged is deprecated
         */

        public void onRoutingChanged(AudioRouting router)
        {
            throw new RuntimeException("Stub!");
        }
    }

    public static interface OnRecordPositionUpdateListener
    {

        public abstract void onMarkerReached(AudioRecord audiorecord);

        public abstract void onPeriodicNotification(AudioRecord audiorecord);
    }

    public static final class MetricsConstants
    {

        public static final String CHANNELS = "android.media.audiorecord.channels";
        public static final String ENCODING = "android.media.audiorecord.encoding";
        /**
         * @deprecated Field LATENCY is deprecated
         */
        public static final String LATENCY = "android.media.audiorecord.latency";
        public static final String SAMPLERATE = "android.media.audiorecord.samplerate";
        public static final String SOURCE = "android.media.audiorecord.source";

        MetricsConstants()
        {
            throw new RuntimeException("Stub!");
        }
    }

    public static class Builder
    {

        public Builder setAudioSource(int source)
            throws IllegalArgumentException
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setAudioFormat(AudioFormat format)
            throws IllegalArgumentException
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setBufferSizeInBytes(int bufferSizeInBytes)
            throws IllegalArgumentException
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setAudioPlaybackCaptureConfig(AudioPlaybackCaptureConfiguration config)
        {
            throw new RuntimeException("Stub!");
        }

        public AudioRecord build()
            throws UnsupportedOperationException
        {
            throw new RuntimeException("Stub!");
        }

        public Builder()
        {
            throw new RuntimeException("Stub!");
        }
    }


    public AudioRecord(int audioSource, int sampleRateInHz, int channelConfig, int audioFormat, int bufferSizeInBytes)
        throws IllegalArgumentException
    {
        throw new RuntimeException("Stub!");
    }

    public void release()
    {
        throw new RuntimeException("Stub!");
    }

    protected void finalize()
    {
        throw new RuntimeException("Stub!");
    }

    public int getSampleRate()
    {
        throw new RuntimeException("Stub!");
    }

    public int getAudioSource()
    {
        throw new RuntimeException("Stub!");
    }

    public int getAudioFormat()
    {
        throw new RuntimeException("Stub!");
    }

    public int getChannelConfiguration()
    {
        throw new RuntimeException("Stub!");
    }

    public AudioFormat getFormat()
    {
        throw new RuntimeException("Stub!");
    }

    public int getChannelCount()
    {
        throw new RuntimeException("Stub!");
    }

    public int getState()
    {
        throw new RuntimeException("Stub!");
    }

    public int getRecordingState()
    {
        throw new RuntimeException("Stub!");
    }

    public int getBufferSizeInFrames()
    {
        throw new RuntimeException("Stub!");
    }

    public int getNotificationMarkerPosition()
    {
        throw new RuntimeException("Stub!");
    }

    public int getPositionNotificationPeriod()
    {
        throw new RuntimeException("Stub!");
    }

    public int getTimestamp(AudioTimestamp outTimestamp, int timebase)
    {
        throw new RuntimeException("Stub!");
    }

    public static int getMinBufferSize(int sampleRateInHz, int channelConfig, int audioFormat)
    {
        throw new RuntimeException("Stub!");
    }

    public int getAudioSessionId()
    {
        throw new RuntimeException("Stub!");
    }

    public void startRecording()
        throws IllegalStateException
    {
        throw new RuntimeException("Stub!");
    }

    public void startRecording(MediaSyncEvent syncEvent)
        throws IllegalStateException
    {
        throw new RuntimeException("Stub!");
    }

    public void stop()
        throws IllegalStateException
    {
        throw new RuntimeException("Stub!");
    }

    public int read(byte audioData[], int offsetInBytes, int sizeInBytes)
    {
        throw new RuntimeException("Stub!");
    }

    public int read(byte audioData[], int offsetInBytes, int sizeInBytes, int readMode)
    {
        throw new RuntimeException("Stub!");
    }

    public int read(short audioData[], int offsetInShorts, int sizeInShorts)
    {
        throw new RuntimeException("Stub!");
    }

    public int read(short audioData[], int offsetInShorts, int sizeInShorts, int readMode)
    {
        throw new RuntimeException("Stub!");
    }

    public int read(float audioData[], int offsetInFloats, int sizeInFloats, int readMode)
    {
        throw new RuntimeException("Stub!");
    }

    public int read(ByteBuffer audioBuffer, int sizeInBytes)
    {
        throw new RuntimeException("Stub!");
    }

    public int read(ByteBuffer audioBuffer, int sizeInBytes, int readMode)
    {
        throw new RuntimeException("Stub!");
    }

    public PersistableBundle getMetrics()
    {
        throw new RuntimeException("Stub!");
    }

    public void setRecordPositionUpdateListener(OnRecordPositionUpdateListener listener)
    {
        throw new RuntimeException("Stub!");
    }

    public void setRecordPositionUpdateListener(OnRecordPositionUpdateListener listener, Handler handler)
    {
        throw new RuntimeException("Stub!");
    }

    public int setNotificationMarkerPosition(int markerInFrames)
    {
        throw new RuntimeException("Stub!");
    }

    public AudioDeviceInfo getRoutedDevice()
    {
        throw new RuntimeException("Stub!");
    }

    public void addOnRoutingChangedListener(AudioRouting.OnRoutingChangedListener listener, Handler handler)
    {
        throw new RuntimeException("Stub!");
    }

    public void removeOnRoutingChangedListener(AudioRouting.OnRoutingChangedListener listener)
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method addOnRoutingChangedListener is deprecated
     */

    public void addOnRoutingChangedListener(OnRoutingChangedListener listener, Handler handler)
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method removeOnRoutingChangedListener is deprecated
     */

    public void removeOnRoutingChangedListener(OnRoutingChangedListener listener)
    {
        throw new RuntimeException("Stub!");
    }

    public int setPositionNotificationPeriod(int periodInFrames)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean setPreferredDevice(AudioDeviceInfo deviceInfo)
    {
        throw new RuntimeException("Stub!");
    }

    public AudioDeviceInfo getPreferredDevice()
    {
        throw new RuntimeException("Stub!");
    }

    public List getActiveMicrophones()
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public void registerAudioRecordingCallback(Executor executor, AudioManager.AudioRecordingCallback cb)
    {
        throw new RuntimeException("Stub!");
    }

    public void unregisterAudioRecordingCallback(AudioManager.AudioRecordingCallback cb)
    {
        throw new RuntimeException("Stub!");
    }

    public AudioRecordingConfiguration getActiveRecordingConfiguration()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean setPreferredMicrophoneDirection(int direction)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean setPreferredMicrophoneFieldDimension(float zoom)
    {
        throw new RuntimeException("Stub!");
    }

    public static final int ERROR = -1;
    public static final int ERROR_BAD_VALUE = -2;
    public static final int ERROR_DEAD_OBJECT = -6;
    public static final int ERROR_INVALID_OPERATION = -3;
    public static final int READ_BLOCKING = 0;
    public static final int READ_NON_BLOCKING = 1;
    public static final int RECORDSTATE_RECORDING = 3;
    public static final int RECORDSTATE_STOPPED = 1;
    public static final int STATE_INITIALIZED = 1;
    public static final int STATE_UNINITIALIZED = 0;
    public static final int SUCCESS = 0;
}
