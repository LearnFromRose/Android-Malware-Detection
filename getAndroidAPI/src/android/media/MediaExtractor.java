// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   MediaExtractor.java

package android.media;

import android.content.Context;
import android.content.res.AssetFileDescriptor;
import android.net.Uri;
import android.os.PersistableBundle;
import java.io.FileDescriptor;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.util.List;
import java.util.Map;

// Referenced classes of package android.media:
//            MediaCodec, MediaDataSource, MediaCas, DrmInitData, 
//            MediaFormat

public final class MediaExtractor
{
    public static final class MetricsConstants
    {

        public static final String FORMAT = "android.media.mediaextractor.fmt";
        public static final String MIME_TYPE = "android.media.mediaextractor.mime";
        public static final String TRACKS = "android.media.mediaextractor.ntrk";

        MetricsConstants()
        {
            throw new RuntimeException("Stub!");
        }
    }

    public static final class CasInfo
    {

        public int getSystemId()
        {
            throw new RuntimeException("Stub!");
        }

        public byte[] getPrivateData()
        {
            throw new RuntimeException("Stub!");
        }

        public MediaCas.Session getSession()
        {
            throw new RuntimeException("Stub!");
        }

        CasInfo(int systemId, MediaCas.Session session, byte privateData[])
        {
            throw new RuntimeException("Stub!");
        }
    }


    public MediaExtractor()
    {
        throw new RuntimeException("Stub!");
    }

    public native void setDataSource(MediaDataSource mediadatasource)
        throws IOException;

    public void setDataSource(Context context, Uri uri, Map headers)
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public void setDataSource(String path, Map headers)
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public void setDataSource(String path)
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public void setDataSource(AssetFileDescriptor afd)
        throws IOException, IllegalArgumentException, IllegalStateException
    {
        throw new RuntimeException("Stub!");
    }

    public void setDataSource(FileDescriptor fd)
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public native void setDataSource(FileDescriptor filedescriptor, long l, long l1)
        throws IOException;

    public void setMediaCas(MediaCas mediaCas)
    {
        throw new RuntimeException("Stub!");
    }

    public CasInfo getCasInfo(int index)
    {
        throw new RuntimeException("Stub!");
    }

    protected void finalize()
    {
        throw new RuntimeException("Stub!");
    }

    public native void release();

    public native int getTrackCount();

    public DrmInitData getDrmInitData()
    {
        throw new RuntimeException("Stub!");
    }

    public List getAudioPresentations(int trackIndex)
    {
        throw new RuntimeException("Stub!");
    }

    public Map getPsshInfo()
    {
        throw new RuntimeException("Stub!");
    }

    public MediaFormat getTrackFormat(int index)
    {
        throw new RuntimeException("Stub!");
    }

    public native void selectTrack(int i);

    public native void unselectTrack(int i);

    public native void seekTo(long l, int i);

    public native boolean advance();

    public native int readSampleData(ByteBuffer bytebuffer, int i);

    public native int getSampleTrackIndex();

    public native long getSampleTime();

    public native long getSampleSize();

    public native int getSampleFlags();

    public native boolean getSampleCryptoInfo(MediaCodec.CryptoInfo cryptoinfo);

    public native long getCachedDuration();

    public native boolean hasCacheReachedEndOfStream();

    public PersistableBundle getMetrics()
    {
        throw new RuntimeException("Stub!");
    }

    public static final int SAMPLE_FLAG_ENCRYPTED = 2;
    public static final int SAMPLE_FLAG_PARTIAL_FRAME = 4;
    public static final int SAMPLE_FLAG_SYNC = 1;
    public static final int SEEK_TO_CLOSEST_SYNC = 2;
    public static final int SEEK_TO_NEXT_SYNC = 1;
    public static final int SEEK_TO_PREVIOUS_SYNC = 0;
}
