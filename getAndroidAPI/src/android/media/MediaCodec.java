// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   MediaCodec.java

package android.media;

import android.os.*;
import android.view.Surface;
import java.io.IOException;
import java.nio.ByteBuffer;

// Referenced classes of package android.media:
//            MediaFormat, MediaCrypto, MediaDescrambler, Image, 
//            AudioPresentation, MediaCodecInfo

public final class MediaCodec
{
    public static interface OnFrameRenderedListener
    {

        public abstract void onFrameRendered(MediaCodec mediacodec, long l, long l1);
    }

    public static final class MetricsConstants
    {

        public static final String CODEC = "android.media.mediacodec.codec";
        public static final String ENCODER = "android.media.mediacodec.encoder";
        public static final String HEIGHT = "android.media.mediacodec.height";
        public static final String MIME_TYPE = "android.media.mediacodec.mime";
        public static final String MODE = "android.media.mediacodec.mode";
        public static final String MODE_AUDIO = "audio";
        public static final String MODE_VIDEO = "video";
        public static final String ROTATION = "android.media.mediacodec.rotation";
        public static final String SECURE = "android.media.mediacodec.secure";
        public static final String WIDTH = "android.media.mediacodec.width";

        MetricsConstants()
        {
            throw new RuntimeException("Stub!");
        }
    }

    public static final class CryptoInfo
    {
        public static final class Pattern
        {

            public void set(int blocksToEncrypt, int blocksToSkip)
            {
                throw new RuntimeException("Stub!");
            }

            public int getSkipBlocks()
            {
                throw new RuntimeException("Stub!");
            }

            public int getEncryptBlocks()
            {
                throw new RuntimeException("Stub!");
            }

            public Pattern(int blocksToEncrypt, int blocksToSkip)
            {
                throw new RuntimeException("Stub!");
            }
        }


        public void set(int newNumSubSamples, int newNumBytesOfClearData[], int newNumBytesOfEncryptedData[], byte newKey[], byte newIV[], int newMode)
        {
            throw new RuntimeException("Stub!");
        }

        public void setPattern(Pattern newPattern)
        {
            throw new RuntimeException("Stub!");
        }

        public String toString()
        {
            throw new RuntimeException("Stub!");
        }

        public byte iv[];
        public byte key[];
        public int mode;
        public int numBytesOfClearData[];
        public int numBytesOfEncryptedData[];
        public int numSubSamples;

        public CryptoInfo()
        {
            throw new RuntimeException("Stub!");
        }
    }

    public static final class CryptoException extends RuntimeException
    {

        public int getErrorCode()
        {
            throw new RuntimeException("Stub!");
        }

        public static final int ERROR_FRAME_TOO_LARGE = 8;
        public static final int ERROR_INSUFFICIENT_OUTPUT_PROTECTION = 4;
        public static final int ERROR_INSUFFICIENT_SECURITY = 7;
        public static final int ERROR_KEY_EXPIRED = 2;
        public static final int ERROR_LOST_STATE = 9;
        public static final int ERROR_NO_KEY = 1;
        public static final int ERROR_RESOURCE_BUSY = 3;
        public static final int ERROR_SESSION_NOT_OPENED = 5;
        public static final int ERROR_UNSUPPORTED_OPERATION = 6;

        public CryptoException(int errorCode, String detailMessage)
        {
            throw new RuntimeException("Stub!");
        }
    }

    public static final class CodecException extends IllegalStateException
    {

        public boolean isTransient()
        {
            throw new RuntimeException("Stub!");
        }

        public boolean isRecoverable()
        {
            throw new RuntimeException("Stub!");
        }

        public int getErrorCode()
        {
            throw new RuntimeException("Stub!");
        }

        public String getDiagnosticInfo()
        {
            throw new RuntimeException("Stub!");
        }

        public static final int ERROR_INSUFFICIENT_RESOURCE = 1100;
        public static final int ERROR_RECLAIMED = 1101;

        CodecException(int errorCode, int actionCode, String detailMessage)
        {
            throw new RuntimeException("Stub!");
        }
    }

    public static abstract class Callback
    {

        public abstract void onInputBufferAvailable(MediaCodec mediacodec, int i);

        public abstract void onOutputBufferAvailable(MediaCodec mediacodec, int i, BufferInfo bufferinfo);

        public abstract void onError(MediaCodec mediacodec, CodecException codecexception);

        public abstract void onOutputFormatChanged(MediaCodec mediacodec, MediaFormat mediaformat);

        public Callback()
        {
            throw new RuntimeException("Stub!");
        }
    }

    public static final class BufferInfo
    {

        public void set(int newOffset, int newSize, long newTimeUs, int newFlags)
        {
            throw new RuntimeException("Stub!");
        }

        public int flags;
        public int offset;
        public long presentationTimeUs;
        public int size;

        public BufferInfo()
        {
            throw new RuntimeException("Stub!");
        }
    }


    MediaCodec(String name, boolean nameIsType, boolean encoder)
    {
        throw new RuntimeException("Stub!");
    }

    public static MediaCodec createDecoderByType(String type)
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public static MediaCodec createEncoderByType(String type)
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public static MediaCodec createByCodecName(String name)
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    protected void finalize()
    {
        throw new RuntimeException("Stub!");
    }

    public void reset()
    {
        throw new RuntimeException("Stub!");
    }

    public void release()
    {
        throw new RuntimeException("Stub!");
    }

    public void configure(MediaFormat format, Surface surface, MediaCrypto crypto, int flags)
    {
        throw new RuntimeException("Stub!");
    }

    public void configure(MediaFormat format, Surface surface, int flags, MediaDescrambler descrambler)
    {
        throw new RuntimeException("Stub!");
    }

    public void setOutputSurface(Surface surface)
    {
        throw new RuntimeException("Stub!");
    }

    public static Surface createPersistentInputSurface()
    {
        throw new RuntimeException("Stub!");
    }

    public void setInputSurface(Surface surface)
    {
        throw new RuntimeException("Stub!");
    }

    public native Surface createInputSurface();

    public void start()
    {
        throw new RuntimeException("Stub!");
    }

    public void stop()
    {
        throw new RuntimeException("Stub!");
    }

    public void flush()
    {
        throw new RuntimeException("Stub!");
    }

    public void queueInputBuffer(int index, int offset, int size, long presentationTimeUs, int flags)
        throws CryptoException
    {
        throw new RuntimeException("Stub!");
    }

    public void queueSecureInputBuffer(int index, int offset, CryptoInfo info, long presentationTimeUs, int flags)
        throws CryptoException
    {
        throw new RuntimeException("Stub!");
    }

    public int dequeueInputBuffer(long timeoutUs)
    {
        throw new RuntimeException("Stub!");
    }

    public int dequeueOutputBuffer(BufferInfo info, long timeoutUs)
    {
        throw new RuntimeException("Stub!");
    }

    public void releaseOutputBuffer(int index, boolean render)
    {
        throw new RuntimeException("Stub!");
    }

    public void releaseOutputBuffer(int index, long renderTimestampNs)
    {
        throw new RuntimeException("Stub!");
    }

    public native void signalEndOfInputStream();

    public MediaFormat getOutputFormat()
    {
        throw new RuntimeException("Stub!");
    }

    public MediaFormat getInputFormat()
    {
        throw new RuntimeException("Stub!");
    }

    public MediaFormat getOutputFormat(int index)
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method getInputBuffers is deprecated
     */

    public ByteBuffer[] getInputBuffers()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method getOutputBuffers is deprecated
     */

    public ByteBuffer[] getOutputBuffers()
    {
        throw new RuntimeException("Stub!");
    }

    public ByteBuffer getInputBuffer(int index)
    {
        throw new RuntimeException("Stub!");
    }

    public Image getInputImage(int index)
    {
        throw new RuntimeException("Stub!");
    }

    public ByteBuffer getOutputBuffer(int index)
    {
        throw new RuntimeException("Stub!");
    }

    public Image getOutputImage(int index)
    {
        throw new RuntimeException("Stub!");
    }

    public native void setVideoScalingMode(int i);

    public void setAudioPresentation(AudioPresentation presentation)
    {
        throw new RuntimeException("Stub!");
    }

    public String getName()
    {
        throw new RuntimeException("Stub!");
    }

    public native String getCanonicalName();

    public PersistableBundle getMetrics()
    {
        throw new RuntimeException("Stub!");
    }

    public void setParameters(Bundle params)
    {
        throw new RuntimeException("Stub!");
    }

    public void setCallback(Callback cb, Handler handler)
    {
        throw new RuntimeException("Stub!");
    }

    public void setCallback(Callback cb)
    {
        throw new RuntimeException("Stub!");
    }

    public void setOnFrameRenderedListener(OnFrameRenderedListener listener, Handler handler)
    {
        throw new RuntimeException("Stub!");
    }

    public MediaCodecInfo getCodecInfo()
    {
        throw new RuntimeException("Stub!");
    }

    public static final int BUFFER_FLAG_CODEC_CONFIG = 2;
    public static final int BUFFER_FLAG_END_OF_STREAM = 4;
    public static final int BUFFER_FLAG_KEY_FRAME = 1;
    public static final int BUFFER_FLAG_PARTIAL_FRAME = 8;
    /**
     * @deprecated Field BUFFER_FLAG_SYNC_FRAME is deprecated
     */
    public static final int BUFFER_FLAG_SYNC_FRAME = 1;
    public static final int CONFIGURE_FLAG_ENCODE = 1;
    public static final int CRYPTO_MODE_AES_CBC = 2;
    public static final int CRYPTO_MODE_AES_CTR = 1;
    public static final int CRYPTO_MODE_UNENCRYPTED = 0;
    /**
     * @deprecated Field INFO_OUTPUT_BUFFERS_CHANGED is deprecated
     */
    public static final int INFO_OUTPUT_BUFFERS_CHANGED = -3;
    public static final int INFO_OUTPUT_FORMAT_CHANGED = -2;
    public static final int INFO_TRY_AGAIN_LATER = -1;
    public static final String PARAMETER_KEY_HDR10_PLUS_INFO = "hdr10-plus-info";
    public static final String PARAMETER_KEY_OFFSET_TIME = "time-offset-us";
    public static final String PARAMETER_KEY_REQUEST_SYNC_FRAME = "request-sync";
    public static final String PARAMETER_KEY_SUSPEND = "drop-input-frames";
    public static final String PARAMETER_KEY_SUSPEND_TIME = "drop-start-time-us";
    public static final String PARAMETER_KEY_VIDEO_BITRATE = "video-bitrate";
    public static final int VIDEO_SCALING_MODE_SCALE_TO_FIT = 1;
    public static final int VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING = 2;
}
