// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   EnvironmentalReverb.java

package android.media.audiofx;


// Referenced classes of package android.media.audiofx:
//            AudioEffect

public class EnvironmentalReverb extends AudioEffect
{
    public static class Settings
    {

        public String toString()
        {
            throw new RuntimeException("Stub!");
        }

        public short decayHFRatio;
        public int decayTime;
        public short density;
        public short diffusion;
        public int reflectionsDelay;
        public short reflectionsLevel;
        public int reverbDelay;
        public short reverbLevel;
        public short roomHFLevel;
        public short roomLevel;

        public Settings()
        {
            throw new RuntimeException("Stub!");
        }

        public Settings(String settings)
        {
            throw new RuntimeException("Stub!");
        }
    }

    public static interface OnParameterChangeListener
    {

        public abstract void onParameterChange(EnvironmentalReverb environmentalreverb, int i, int j, int k);
    }


    public EnvironmentalReverb(int priority, int audioSession)
        throws IllegalArgumentException, RuntimeException, UnsupportedOperationException
    {
        super(null, null, 0, 0);
        throw new RuntimeException("Stub!");
    }

    public void setRoomLevel(short room)
        throws IllegalArgumentException, IllegalStateException, UnsupportedOperationException
    {
        throw new RuntimeException("Stub!");
    }

    public short getRoomLevel()
        throws IllegalArgumentException, IllegalStateException, UnsupportedOperationException
    {
        throw new RuntimeException("Stub!");
    }

    public void setRoomHFLevel(short roomHF)
        throws IllegalArgumentException, IllegalStateException, UnsupportedOperationException
    {
        throw new RuntimeException("Stub!");
    }

    public short getRoomHFLevel()
        throws IllegalArgumentException, IllegalStateException, UnsupportedOperationException
    {
        throw new RuntimeException("Stub!");
    }

    public void setDecayTime(int decayTime)
        throws IllegalArgumentException, IllegalStateException, UnsupportedOperationException
    {
        throw new RuntimeException("Stub!");
    }

    public int getDecayTime()
        throws IllegalArgumentException, IllegalStateException, UnsupportedOperationException
    {
        throw new RuntimeException("Stub!");
    }

    public void setDecayHFRatio(short decayHFRatio)
        throws IllegalArgumentException, IllegalStateException, UnsupportedOperationException
    {
        throw new RuntimeException("Stub!");
    }

    public short getDecayHFRatio()
        throws IllegalArgumentException, IllegalStateException, UnsupportedOperationException
    {
        throw new RuntimeException("Stub!");
    }

    public void setReflectionsLevel(short reflectionsLevel)
        throws IllegalArgumentException, IllegalStateException, UnsupportedOperationException
    {
        throw new RuntimeException("Stub!");
    }

    public short getReflectionsLevel()
        throws IllegalArgumentException, IllegalStateException, UnsupportedOperationException
    {
        throw new RuntimeException("Stub!");
    }

    public void setReflectionsDelay(int reflectionsDelay)
        throws IllegalArgumentException, IllegalStateException, UnsupportedOperationException
    {
        throw new RuntimeException("Stub!");
    }

    public int getReflectionsDelay()
        throws IllegalArgumentException, IllegalStateException, UnsupportedOperationException
    {
        throw new RuntimeException("Stub!");
    }

    public void setReverbLevel(short reverbLevel)
        throws IllegalArgumentException, IllegalStateException, UnsupportedOperationException
    {
        throw new RuntimeException("Stub!");
    }

    public short getReverbLevel()
        throws IllegalArgumentException, IllegalStateException, UnsupportedOperationException
    {
        throw new RuntimeException("Stub!");
    }

    public void setReverbDelay(int reverbDelay)
        throws IllegalArgumentException, IllegalStateException, UnsupportedOperationException
    {
        throw new RuntimeException("Stub!");
    }

    public int getReverbDelay()
        throws IllegalArgumentException, IllegalStateException, UnsupportedOperationException
    {
        throw new RuntimeException("Stub!");
    }

    public void setDiffusion(short diffusion)
        throws IllegalArgumentException, IllegalStateException, UnsupportedOperationException
    {
        throw new RuntimeException("Stub!");
    }

    public short getDiffusion()
        throws IllegalArgumentException, IllegalStateException, UnsupportedOperationException
    {
        throw new RuntimeException("Stub!");
    }

    public void setDensity(short density)
        throws IllegalArgumentException, IllegalStateException, UnsupportedOperationException
    {
        throw new RuntimeException("Stub!");
    }

    public short getDensity()
        throws IllegalArgumentException, IllegalStateException, UnsupportedOperationException
    {
        throw new RuntimeException("Stub!");
    }

    public void setParameterListener(OnParameterChangeListener listener)
    {
        throw new RuntimeException("Stub!");
    }

    public Settings getProperties()
        throws IllegalArgumentException, IllegalStateException, UnsupportedOperationException
    {
        throw new RuntimeException("Stub!");
    }

    public void setProperties(Settings settings)
        throws IllegalArgumentException, IllegalStateException, UnsupportedOperationException
    {
        throw new RuntimeException("Stub!");
    }

    public static final int PARAM_DECAY_HF_RATIO = 3;
    public static final int PARAM_DECAY_TIME = 2;
    public static final int PARAM_DENSITY = 9;
    public static final int PARAM_DIFFUSION = 8;
    public static final int PARAM_REFLECTIONS_DELAY = 5;
    public static final int PARAM_REFLECTIONS_LEVEL = 4;
    public static final int PARAM_REVERB_DELAY = 7;
    public static final int PARAM_REVERB_LEVEL = 6;
    public static final int PARAM_ROOM_HF_LEVEL = 1;
    public static final int PARAM_ROOM_LEVEL = 0;
}
