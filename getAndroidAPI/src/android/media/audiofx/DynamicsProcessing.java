// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   DynamicsProcessing.java

package android.media.audiofx;


// Referenced classes of package android.media.audiofx:
//            AudioEffect

public final class DynamicsProcessing extends AudioEffect
{
    public static class Stage
    {

        public boolean isEnabled()
        {
            throw new RuntimeException("Stub!");
        }

        public void setEnabled(boolean enabled)
        {
            throw new RuntimeException("Stub!");
        }

        public boolean isInUse()
        {
            throw new RuntimeException("Stub!");
        }

        public String toString()
        {
            throw new RuntimeException("Stub!");
        }

        public Stage(boolean inUse, boolean enabled)
        {
            throw new RuntimeException("Stub!");
        }
    }

    public static final class MbcBand extends BandBase
    {

        public String toString()
        {
            throw new RuntimeException("Stub!");
        }

        public float getAttackTime()
        {
            throw new RuntimeException("Stub!");
        }

        public void setAttackTime(float attackTime)
        {
            throw new RuntimeException("Stub!");
        }

        public float getReleaseTime()
        {
            throw new RuntimeException("Stub!");
        }

        public void setReleaseTime(float releaseTime)
        {
            throw new RuntimeException("Stub!");
        }

        public float getRatio()
        {
            throw new RuntimeException("Stub!");
        }

        public void setRatio(float ratio)
        {
            throw new RuntimeException("Stub!");
        }

        public float getThreshold()
        {
            throw new RuntimeException("Stub!");
        }

        public void setThreshold(float threshold)
        {
            throw new RuntimeException("Stub!");
        }

        public float getKneeWidth()
        {
            throw new RuntimeException("Stub!");
        }

        public void setKneeWidth(float kneeWidth)
        {
            throw new RuntimeException("Stub!");
        }

        public float getNoiseGateThreshold()
        {
            throw new RuntimeException("Stub!");
        }

        public void setNoiseGateThreshold(float noiseGateThreshold)
        {
            throw new RuntimeException("Stub!");
        }

        public float getExpanderRatio()
        {
            throw new RuntimeException("Stub!");
        }

        public void setExpanderRatio(float expanderRatio)
        {
            throw new RuntimeException("Stub!");
        }

        public float getPreGain()
        {
            throw new RuntimeException("Stub!");
        }

        public void setPreGain(float preGain)
        {
            throw new RuntimeException("Stub!");
        }

        public float getPostGain()
        {
            throw new RuntimeException("Stub!");
        }

        public void setPostGain(float postGain)
        {
            throw new RuntimeException("Stub!");
        }

        public MbcBand(boolean enabled, float cutoffFrequency, float attackTime, float releaseTime, float ratio, float threshold, float kneeWidth, 
                float noiseGateThreshold, float expanderRatio, float preGain, float postGain)
        {
            super(false, 0.0F);
            throw new RuntimeException("Stub!");
        }

        public MbcBand(MbcBand cfg)
        {
            super(false, 0.0F);
            throw new RuntimeException("Stub!");
        }
    }

    public static final class Mbc extends BandStage
    {

        public String toString()
        {
            throw new RuntimeException("Stub!");
        }

        public void setBand(int band, MbcBand bandCfg)
        {
            throw new RuntimeException("Stub!");
        }

        public MbcBand getBand(int band)
        {
            throw new RuntimeException("Stub!");
        }

        public Mbc(boolean inUse, boolean enabled, int bandCount)
        {
            super(false, false, 0);
            throw new RuntimeException("Stub!");
        }

        public Mbc(Mbc cfg)
        {
            super(false, false, 0);
            throw new RuntimeException("Stub!");
        }
    }

    public static final class Limiter extends Stage
    {

        public String toString()
        {
            throw new RuntimeException("Stub!");
        }

        public int getLinkGroup()
        {
            throw new RuntimeException("Stub!");
        }

        public void setLinkGroup(int linkGroup)
        {
            throw new RuntimeException("Stub!");
        }

        public float getAttackTime()
        {
            throw new RuntimeException("Stub!");
        }

        public void setAttackTime(float attackTime)
        {
            throw new RuntimeException("Stub!");
        }

        public float getReleaseTime()
        {
            throw new RuntimeException("Stub!");
        }

        public void setReleaseTime(float releaseTime)
        {
            throw new RuntimeException("Stub!");
        }

        public float getRatio()
        {
            throw new RuntimeException("Stub!");
        }

        public void setRatio(float ratio)
        {
            throw new RuntimeException("Stub!");
        }

        public float getThreshold()
        {
            throw new RuntimeException("Stub!");
        }

        public void setThreshold(float threshold)
        {
            throw new RuntimeException("Stub!");
        }

        public float getPostGain()
        {
            throw new RuntimeException("Stub!");
        }

        public void setPostGain(float postGain)
        {
            throw new RuntimeException("Stub!");
        }

        public Limiter(boolean inUse, boolean enabled, int linkGroup, float attackTime, float releaseTime, float ratio, float threshold, 
                float postGain)
        {
            super(false, false);
            throw new RuntimeException("Stub!");
        }

        public Limiter(Limiter cfg)
        {
            super(false, false);
            throw new RuntimeException("Stub!");
        }
    }

    public static final class EqBand extends BandBase
    {

        public String toString()
        {
            throw new RuntimeException("Stub!");
        }

        public float getGain()
        {
            throw new RuntimeException("Stub!");
        }

        public void setGain(float gain)
        {
            throw new RuntimeException("Stub!");
        }

        public EqBand(boolean enabled, float cutoffFrequency, float gain)
        {
            super(false, 0.0F);
            throw new RuntimeException("Stub!");
        }

        public EqBand(EqBand cfg)
        {
            super(false, 0.0F);
            throw new RuntimeException("Stub!");
        }
    }

    public static final class Eq extends BandStage
    {

        public String toString()
        {
            throw new RuntimeException("Stub!");
        }

        public void setBand(int band, EqBand bandCfg)
        {
            throw new RuntimeException("Stub!");
        }

        public EqBand getBand(int band)
        {
            throw new RuntimeException("Stub!");
        }

        public Eq(boolean inUse, boolean enabled, int bandCount)
        {
            super(false, false, 0);
            throw new RuntimeException("Stub!");
        }

        public Eq(Eq cfg)
        {
            super(false, false, 0);
            throw new RuntimeException("Stub!");
        }
    }

    public static final class Config
    {
        public static final class Builder
        {

            public Builder setPreferredFrameDuration(float frameDuration)
            {
                throw new RuntimeException("Stub!");
            }

            public Builder setInputGainByChannelIndex(int channelIndex, float inputGain)
            {
                throw new RuntimeException("Stub!");
            }

            public Builder setInputGainAllChannelsTo(float inputGain)
            {
                throw new RuntimeException("Stub!");
            }

            public Builder setChannelTo(int channelIndex, Channel channel)
            {
                throw new RuntimeException("Stub!");
            }

            public Builder setAllChannelsTo(Channel channel)
            {
                throw new RuntimeException("Stub!");
            }

            public Builder setPreEqByChannelIndex(int channelIndex, Eq preEq)
            {
                throw new RuntimeException("Stub!");
            }

            public Builder setPreEqAllChannelsTo(Eq preEq)
            {
                throw new RuntimeException("Stub!");
            }

            public Builder setMbcByChannelIndex(int channelIndex, Mbc mbc)
            {
                throw new RuntimeException("Stub!");
            }

            public Builder setMbcAllChannelsTo(Mbc mbc)
            {
                throw new RuntimeException("Stub!");
            }

            public Builder setPostEqByChannelIndex(int channelIndex, Eq postEq)
            {
                throw new RuntimeException("Stub!");
            }

            public Builder setPostEqAllChannelsTo(Eq postEq)
            {
                throw new RuntimeException("Stub!");
            }

            public Builder setLimiterByChannelIndex(int channelIndex, Limiter limiter)
            {
                throw new RuntimeException("Stub!");
            }

            public Builder setLimiterAllChannelsTo(Limiter limiter)
            {
                throw new RuntimeException("Stub!");
            }

            public Config build()
            {
                throw new RuntimeException("Stub!");
            }

            public Builder(int variant, int channelCount, boolean preEqInUse, int preEqBandCount, boolean mbcInUse, int mbcBandCount, boolean postEqInUse, 
                    int postEqBandCount, boolean limiterInUse)
            {
                throw new RuntimeException("Stub!");
            }
        }


        public String toString()
        {
            throw new RuntimeException("Stub!");
        }

        public int getVariant()
        {
            throw new RuntimeException("Stub!");
        }

        public float getPreferredFrameDuration()
        {
            throw new RuntimeException("Stub!");
        }

        public boolean isPreEqInUse()
        {
            throw new RuntimeException("Stub!");
        }

        public int getPreEqBandCount()
        {
            throw new RuntimeException("Stub!");
        }

        public boolean isMbcInUse()
        {
            throw new RuntimeException("Stub!");
        }

        public int getMbcBandCount()
        {
            throw new RuntimeException("Stub!");
        }

        public boolean isPostEqInUse()
        {
            throw new RuntimeException("Stub!");
        }

        public int getPostEqBandCount()
        {
            throw new RuntimeException("Stub!");
        }

        public boolean isLimiterInUse()
        {
            throw new RuntimeException("Stub!");
        }

        public Channel getChannelByChannelIndex(int channelIndex)
        {
            throw new RuntimeException("Stub!");
        }

        public void setChannelTo(int channelIndex, Channel channel)
        {
            throw new RuntimeException("Stub!");
        }

        public void setAllChannelsTo(Channel channel)
        {
            throw new RuntimeException("Stub!");
        }

        public float getInputGainByChannelIndex(int channelIndex)
        {
            throw new RuntimeException("Stub!");
        }

        public void setInputGainByChannelIndex(int channelIndex, float inputGain)
        {
            throw new RuntimeException("Stub!");
        }

        public void setInputGainAllChannelsTo(float inputGain)
        {
            throw new RuntimeException("Stub!");
        }

        public Eq getPreEqByChannelIndex(int channelIndex)
        {
            throw new RuntimeException("Stub!");
        }

        public void setPreEqByChannelIndex(int channelIndex, Eq preEq)
        {
            throw new RuntimeException("Stub!");
        }

        public void setPreEqAllChannelsTo(Eq preEq)
        {
            throw new RuntimeException("Stub!");
        }

        public EqBand getPreEqBandByChannelIndex(int channelIndex, int band)
        {
            throw new RuntimeException("Stub!");
        }

        public void setPreEqBandByChannelIndex(int channelIndex, int band, EqBand preEqBand)
        {
            throw new RuntimeException("Stub!");
        }

        public void setPreEqBandAllChannelsTo(int band, EqBand preEqBand)
        {
            throw new RuntimeException("Stub!");
        }

        public Mbc getMbcByChannelIndex(int channelIndex)
        {
            throw new RuntimeException("Stub!");
        }

        public void setMbcByChannelIndex(int channelIndex, Mbc mbc)
        {
            throw new RuntimeException("Stub!");
        }

        public void setMbcAllChannelsTo(Mbc mbc)
        {
            throw new RuntimeException("Stub!");
        }

        public MbcBand getMbcBandByChannelIndex(int channelIndex, int band)
        {
            throw new RuntimeException("Stub!");
        }

        public void setMbcBandByChannelIndex(int channelIndex, int band, MbcBand mbcBand)
        {
            throw new RuntimeException("Stub!");
        }

        public void setMbcBandAllChannelsTo(int band, MbcBand mbcBand)
        {
            throw new RuntimeException("Stub!");
        }

        public Eq getPostEqByChannelIndex(int channelIndex)
        {
            throw new RuntimeException("Stub!");
        }

        public void setPostEqByChannelIndex(int channelIndex, Eq postEq)
        {
            throw new RuntimeException("Stub!");
        }

        public void setPostEqAllChannelsTo(Eq postEq)
        {
            throw new RuntimeException("Stub!");
        }

        public EqBand getPostEqBandByChannelIndex(int channelIndex, int band)
        {
            throw new RuntimeException("Stub!");
        }

        public void setPostEqBandByChannelIndex(int channelIndex, int band, EqBand postEqBand)
        {
            throw new RuntimeException("Stub!");
        }

        public void setPostEqBandAllChannelsTo(int band, EqBand postEqBand)
        {
            throw new RuntimeException("Stub!");
        }

        public Limiter getLimiterByChannelIndex(int channelIndex)
        {
            throw new RuntimeException("Stub!");
        }

        public void setLimiterByChannelIndex(int channelIndex, Limiter limiter)
        {
            throw new RuntimeException("Stub!");
        }

        public void setLimiterAllChannelsTo(Limiter limiter)
        {
            throw new RuntimeException("Stub!");
        }

        Config(Config cfg)
        {
            throw new RuntimeException("Stub!");
        }
    }

    public static final class Channel
    {

        public String toString()
        {
            throw new RuntimeException("Stub!");
        }

        public float getInputGain()
        {
            throw new RuntimeException("Stub!");
        }

        public void setInputGain(float inputGain)
        {
            throw new RuntimeException("Stub!");
        }

        public Eq getPreEq()
        {
            throw new RuntimeException("Stub!");
        }

        public void setPreEq(Eq preEq)
        {
            throw new RuntimeException("Stub!");
        }

        public EqBand getPreEqBand(int band)
        {
            throw new RuntimeException("Stub!");
        }

        public void setPreEqBand(int band, EqBand preEqBand)
        {
            throw new RuntimeException("Stub!");
        }

        public Mbc getMbc()
        {
            throw new RuntimeException("Stub!");
        }

        public void setMbc(Mbc mbc)
        {
            throw new RuntimeException("Stub!");
        }

        public MbcBand getMbcBand(int band)
        {
            throw new RuntimeException("Stub!");
        }

        public void setMbcBand(int band, MbcBand mbcBand)
        {
            throw new RuntimeException("Stub!");
        }

        public Eq getPostEq()
        {
            throw new RuntimeException("Stub!");
        }

        public void setPostEq(Eq postEq)
        {
            throw new RuntimeException("Stub!");
        }

        public EqBand getPostEqBand(int band)
        {
            throw new RuntimeException("Stub!");
        }

        public void setPostEqBand(int band, EqBand postEqBand)
        {
            throw new RuntimeException("Stub!");
        }

        public Limiter getLimiter()
        {
            throw new RuntimeException("Stub!");
        }

        public void setLimiter(Limiter limiter)
        {
            throw new RuntimeException("Stub!");
        }

        public Channel(float inputGain, boolean preEqInUse, int preEqBandCount, boolean mbcInUse, int mbcBandCount, boolean postEqInUse, int postEqBandCount, 
                boolean limiterInUse)
        {
            throw new RuntimeException("Stub!");
        }

        public Channel(Channel cfg)
        {
            throw new RuntimeException("Stub!");
        }
    }

    public static class BandStage extends Stage
    {

        public int getBandCount()
        {
            throw new RuntimeException("Stub!");
        }

        public String toString()
        {
            throw new RuntimeException("Stub!");
        }

        public BandStage(boolean inUse, boolean enabled, int bandCount)
        {
            super(false, false);
            throw new RuntimeException("Stub!");
        }
    }

    public static class BandBase
    {

        public String toString()
        {
            throw new RuntimeException("Stub!");
        }

        public boolean isEnabled()
        {
            throw new RuntimeException("Stub!");
        }

        public void setEnabled(boolean enabled)
        {
            throw new RuntimeException("Stub!");
        }

        public float getCutoffFrequency()
        {
            throw new RuntimeException("Stub!");
        }

        public void setCutoffFrequency(float frequency)
        {
            throw new RuntimeException("Stub!");
        }

        public BandBase(boolean enabled, float cutoffFrequency)
        {
            throw new RuntimeException("Stub!");
        }
    }


    public DynamicsProcessing(int audioSession)
    {
        super(null, null, 0, 0);
        throw new RuntimeException("Stub!");
    }

    public DynamicsProcessing(int priority, int audioSession, Config cfg)
    {
        super(null, null, 0, 0);
        throw new RuntimeException("Stub!");
    }

    public Config getConfig()
    {
        throw new RuntimeException("Stub!");
    }

    public Channel getChannelByChannelIndex(int channelIndex)
    {
        throw new RuntimeException("Stub!");
    }

    public void setChannelTo(int channelIndex, Channel channel)
    {
        throw new RuntimeException("Stub!");
    }

    public void setAllChannelsTo(Channel channel)
    {
        throw new RuntimeException("Stub!");
    }

    public float getInputGainByChannelIndex(int channelIndex)
    {
        throw new RuntimeException("Stub!");
    }

    public void setInputGainbyChannel(int channelIndex, float inputGain)
    {
        throw new RuntimeException("Stub!");
    }

    public void setInputGainAllChannelsTo(float inputGain)
    {
        throw new RuntimeException("Stub!");
    }

    public Eq getPreEqByChannelIndex(int channelIndex)
    {
        throw new RuntimeException("Stub!");
    }

    public void setPreEqByChannelIndex(int channelIndex, Eq preEq)
    {
        throw new RuntimeException("Stub!");
    }

    public void setPreEqAllChannelsTo(Eq preEq)
    {
        throw new RuntimeException("Stub!");
    }

    public EqBand getPreEqBandByChannelIndex(int channelIndex, int band)
    {
        throw new RuntimeException("Stub!");
    }

    public void setPreEqBandByChannelIndex(int channelIndex, int band, EqBand preEqBand)
    {
        throw new RuntimeException("Stub!");
    }

    public void setPreEqBandAllChannelsTo(int band, EqBand preEqBand)
    {
        throw new RuntimeException("Stub!");
    }

    public Mbc getMbcByChannelIndex(int channelIndex)
    {
        throw new RuntimeException("Stub!");
    }

    public void setMbcByChannelIndex(int channelIndex, Mbc mbc)
    {
        throw new RuntimeException("Stub!");
    }

    public void setMbcAllChannelsTo(Mbc mbc)
    {
        throw new RuntimeException("Stub!");
    }

    public MbcBand getMbcBandByChannelIndex(int channelIndex, int band)
    {
        throw new RuntimeException("Stub!");
    }

    public void setMbcBandByChannelIndex(int channelIndex, int band, MbcBand mbcBand)
    {
        throw new RuntimeException("Stub!");
    }

    public void setMbcBandAllChannelsTo(int band, MbcBand mbcBand)
    {
        throw new RuntimeException("Stub!");
    }

    public Eq getPostEqByChannelIndex(int channelIndex)
    {
        throw new RuntimeException("Stub!");
    }

    public void setPostEqByChannelIndex(int channelIndex, Eq postEq)
    {
        throw new RuntimeException("Stub!");
    }

    public void setPostEqAllChannelsTo(Eq postEq)
    {
        throw new RuntimeException("Stub!");
    }

    public EqBand getPostEqBandByChannelIndex(int channelIndex, int band)
    {
        throw new RuntimeException("Stub!");
    }

    public void setPostEqBandByChannelIndex(int channelIndex, int band, EqBand postEqBand)
    {
        throw new RuntimeException("Stub!");
    }

    public void setPostEqBandAllChannelsTo(int band, EqBand postEqBand)
    {
        throw new RuntimeException("Stub!");
    }

    public Limiter getLimiterByChannelIndex(int channelIndex)
    {
        throw new RuntimeException("Stub!");
    }

    public void setLimiterByChannelIndex(int channelIndex, Limiter limiter)
    {
        throw new RuntimeException("Stub!");
    }

    public void setLimiterAllChannelsTo(Limiter limiter)
    {
        throw new RuntimeException("Stub!");
    }

    public int getChannelCount()
    {
        throw new RuntimeException("Stub!");
    }

    public static final int VARIANT_FAVOR_FREQUENCY_RESOLUTION = 0;
    public static final int VARIANT_FAVOR_TIME_RESOLUTION = 1;
}
