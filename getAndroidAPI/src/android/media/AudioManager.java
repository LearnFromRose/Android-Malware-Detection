// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   AudioManager.java

package android.media;

import android.app.PendingIntent;
import android.content.ComponentName;
import android.os.Handler;
import android.view.KeyEvent;
import java.io.IOException;
import java.util.List;

// Referenced classes of package android.media:
//            AudioFormat, AudioAttributes, AudioFocusRequest, RemoteControlClient, 
//            RemoteController, AudioDeviceInfo, AudioDeviceCallback

public class AudioManager
{
    public static interface OnAudioFocusChangeListener
    {

        public abstract void onAudioFocusChange(int i);
    }

    public static abstract class AudioRecordingCallback
    {

        public void onRecordingConfigChanged(List configs)
        {
            throw new RuntimeException("Stub!");
        }

        public AudioRecordingCallback()
        {
            throw new RuntimeException("Stub!");
        }
    }

    public static abstract class AudioPlaybackCallback
    {

        public void onPlaybackConfigChanged(List configs)
        {
            throw new RuntimeException("Stub!");
        }

        public AudioPlaybackCallback()
        {
            throw new RuntimeException("Stub!");
        }
    }


    AudioManager()
    {
        throw new RuntimeException("Stub!");
    }

    public void dispatchMediaKeyEvent(KeyEvent keyEvent)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isVolumeFixed()
    {
        throw new RuntimeException("Stub!");
    }

    public void adjustStreamVolume(int streamType, int direction, int flags)
    {
        throw new RuntimeException("Stub!");
    }

    public void adjustVolume(int direction, int flags)
    {
        throw new RuntimeException("Stub!");
    }

    public void adjustSuggestedStreamVolume(int direction, int suggestedStreamType, int flags)
    {
        throw new RuntimeException("Stub!");
    }

    public int getRingerMode()
    {
        throw new RuntimeException("Stub!");
    }

    public int getStreamMaxVolume(int streamType)
    {
        throw new RuntimeException("Stub!");
    }

    public int getStreamMinVolume(int streamType)
    {
        throw new RuntimeException("Stub!");
    }

    public int getStreamVolume(int streamType)
    {
        throw new RuntimeException("Stub!");
    }

    public float getStreamVolumeDb(int streamType, int index, int deviceType)
    {
        throw new RuntimeException("Stub!");
    }

    public void setRingerMode(int ringerMode)
    {
        throw new RuntimeException("Stub!");
    }

    public void setStreamVolume(int streamType, int index, int flags)
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method setStreamSolo is deprecated
     */

    public void setStreamSolo(int streamType, boolean state)
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method setStreamMute is deprecated
     */

    public void setStreamMute(int streamType, boolean state)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isStreamMute(int streamType)
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method shouldVibrate is deprecated
     */

    public boolean shouldVibrate(int vibrateType)
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method getVibrateSetting is deprecated
     */

    public int getVibrateSetting(int vibrateType)
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method setVibrateSetting is deprecated
     */

    public void setVibrateSetting(int vibrateType, int vibrateSetting)
    {
        throw new RuntimeException("Stub!");
    }

    public void setSpeakerphoneOn(boolean on)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isSpeakerphoneOn()
    {
        throw new RuntimeException("Stub!");
    }

    public void setAllowedCapturePolicy(int capturePolicy)
    {
        throw new RuntimeException("Stub!");
    }

    public int getAllowedCapturePolicy()
    {
        throw new RuntimeException("Stub!");
    }

    public static boolean isOffloadedPlaybackSupported(AudioFormat format, AudioAttributes attributes)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isBluetoothScoAvailableOffCall()
    {
        throw new RuntimeException("Stub!");
    }

    public void startBluetoothSco()
    {
        throw new RuntimeException("Stub!");
    }

    public void stopBluetoothSco()
    {
        throw new RuntimeException("Stub!");
    }

    public void setBluetoothScoOn(boolean on)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isBluetoothScoOn()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method setBluetoothA2dpOn is deprecated
     */

    public void setBluetoothA2dpOn(boolean on)
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method isBluetoothA2dpOn is deprecated
     */

    public boolean isBluetoothA2dpOn()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method setWiredHeadsetOn is deprecated
     */

    public void setWiredHeadsetOn(boolean on)
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method isWiredHeadsetOn is deprecated
     */

    public boolean isWiredHeadsetOn()
    {
        throw new RuntimeException("Stub!");
    }

    public void setMicrophoneMute(boolean on)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isMicrophoneMute()
    {
        throw new RuntimeException("Stub!");
    }

    public void setMode(int mode)
    {
        throw new RuntimeException("Stub!");
    }

    public int getMode()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method setRouting is deprecated
     */

    public void setRouting(int mode, int routes, int mask)
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method getRouting is deprecated
     */

    public int getRouting(int mode)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isMusicActive()
    {
        throw new RuntimeException("Stub!");
    }

    public int generateAudioSessionId()
    {
        throw new RuntimeException("Stub!");
    }

    public void setParameters(String keyValuePairs)
    {
        throw new RuntimeException("Stub!");
    }

    public String getParameters(String keys)
    {
        throw new RuntimeException("Stub!");
    }

    public void playSoundEffect(int effectType)
    {
        throw new RuntimeException("Stub!");
    }

    public void playSoundEffect(int effectType, float volume)
    {
        throw new RuntimeException("Stub!");
    }

    public void loadSoundEffects()
    {
        throw new RuntimeException("Stub!");
    }

    public void unloadSoundEffects()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method requestAudioFocus is deprecated
     */

    public int requestAudioFocus(OnAudioFocusChangeListener l, int streamType, int durationHint)
    {
        throw new RuntimeException("Stub!");
    }

    public int requestAudioFocus(AudioFocusRequest focusRequest)
    {
        throw new RuntimeException("Stub!");
    }

    public int abandonAudioFocusRequest(AudioFocusRequest focusRequest)
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method abandonAudioFocus is deprecated
     */

    public int abandonAudioFocus(OnAudioFocusChangeListener l)
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method registerMediaButtonEventReceiver is deprecated
     */

    public void registerMediaButtonEventReceiver(ComponentName eventReceiver)
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method registerMediaButtonEventReceiver is deprecated
     */

    public void registerMediaButtonEventReceiver(PendingIntent eventReceiver)
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method unregisterMediaButtonEventReceiver is deprecated
     */

    public void unregisterMediaButtonEventReceiver(ComponentName eventReceiver)
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method unregisterMediaButtonEventReceiver is deprecated
     */

    public void unregisterMediaButtonEventReceiver(PendingIntent eventReceiver)
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method registerRemoteControlClient is deprecated
     */

    public void registerRemoteControlClient(RemoteControlClient rcClient)
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method unregisterRemoteControlClient is deprecated
     */

    public void unregisterRemoteControlClient(RemoteControlClient rcClient)
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method registerRemoteController is deprecated
     */

    public boolean registerRemoteController(RemoteController rctlr)
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method unregisterRemoteController is deprecated
     */

    public void unregisterRemoteController(RemoteController rctlr)
    {
        throw new RuntimeException("Stub!");
    }

    public void registerAudioPlaybackCallback(AudioPlaybackCallback cb, Handler handler)
    {
        throw new RuntimeException("Stub!");
    }

    public void unregisterAudioPlaybackCallback(AudioPlaybackCallback cb)
    {
        throw new RuntimeException("Stub!");
    }

    public List getActivePlaybackConfigurations()
    {
        throw new RuntimeException("Stub!");
    }

    public void registerAudioRecordingCallback(AudioRecordingCallback cb, Handler handler)
    {
        throw new RuntimeException("Stub!");
    }

    public void unregisterAudioRecordingCallback(AudioRecordingCallback cb)
    {
        throw new RuntimeException("Stub!");
    }

    public List getActiveRecordingConfigurations()
    {
        throw new RuntimeException("Stub!");
    }

    public String getProperty(String key)
    {
        throw new RuntimeException("Stub!");
    }

    public AudioDeviceInfo[] getDevices(int flags)
    {
        throw new RuntimeException("Stub!");
    }

    public void registerAudioDeviceCallback(AudioDeviceCallback callback, Handler handler)
    {
        throw new RuntimeException("Stub!");
    }

    public void unregisterAudioDeviceCallback(AudioDeviceCallback callback)
    {
        throw new RuntimeException("Stub!");
    }

    public List getMicrophones()
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public static boolean isHapticPlaybackSupported()
    {
        throw new RuntimeException("Stub!");
    }

    public static final String ACTION_AUDIO_BECOMING_NOISY = "android.media.AUDIO_BECOMING_NOISY";
    public static final String ACTION_HDMI_AUDIO_PLUG = "android.media.action.HDMI_AUDIO_PLUG";
    public static final String ACTION_HEADSET_PLUG = "android.intent.action.HEADSET_PLUG";
    public static final String ACTION_MICROPHONE_MUTE_CHANGED = "android.media.action.MICROPHONE_MUTE_CHANGED";
    /**
     * @deprecated Field ACTION_SCO_AUDIO_STATE_CHANGED is deprecated
     */
    public static final String ACTION_SCO_AUDIO_STATE_CHANGED = "android.media.SCO_AUDIO_STATE_CHANGED";
    public static final String ACTION_SCO_AUDIO_STATE_UPDATED = "android.media.ACTION_SCO_AUDIO_STATE_UPDATED";
    public static final String ACTION_SPEAKERPHONE_STATE_CHANGED = "android.media.action.SPEAKERPHONE_STATE_CHANGED";
    public static final int ADJUST_LOWER = -1;
    public static final int ADJUST_MUTE = -100;
    public static final int ADJUST_RAISE = 1;
    public static final int ADJUST_SAME = 0;
    public static final int ADJUST_TOGGLE_MUTE = 101;
    public static final int ADJUST_UNMUTE = 100;
    public static final int AUDIOFOCUS_GAIN = 1;
    public static final int AUDIOFOCUS_GAIN_TRANSIENT = 2;
    public static final int AUDIOFOCUS_GAIN_TRANSIENT_EXCLUSIVE = 4;
    public static final int AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK = 3;
    public static final int AUDIOFOCUS_LOSS = -1;
    public static final int AUDIOFOCUS_LOSS_TRANSIENT = -2;
    public static final int AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK = -3;
    public static final int AUDIOFOCUS_NONE = 0;
    public static final int AUDIOFOCUS_REQUEST_DELAYED = 2;
    public static final int AUDIOFOCUS_REQUEST_FAILED = 0;
    public static final int AUDIOFOCUS_REQUEST_GRANTED = 1;
    public static final int AUDIO_SESSION_ID_GENERATE = 0;
    public static final int ERROR = -1;
    public static final int ERROR_DEAD_OBJECT = -6;
    public static final String EXTRA_AUDIO_PLUG_STATE = "android.media.extra.AUDIO_PLUG_STATE";
    public static final String EXTRA_ENCODINGS = "android.media.extra.ENCODINGS";
    public static final String EXTRA_MAX_CHANNEL_COUNT = "android.media.extra.MAX_CHANNEL_COUNT";
    public static final String EXTRA_RINGER_MODE = "android.media.EXTRA_RINGER_MODE";
    public static final String EXTRA_SCO_AUDIO_PREVIOUS_STATE = "android.media.extra.SCO_AUDIO_PREVIOUS_STATE";
    public static final String EXTRA_SCO_AUDIO_STATE = "android.media.extra.SCO_AUDIO_STATE";
    /**
     * @deprecated Field EXTRA_VIBRATE_SETTING is deprecated
     */
    public static final String EXTRA_VIBRATE_SETTING = "android.media.EXTRA_VIBRATE_SETTING";
    /**
     * @deprecated Field EXTRA_VIBRATE_TYPE is deprecated
     */
    public static final String EXTRA_VIBRATE_TYPE = "android.media.EXTRA_VIBRATE_TYPE";
    public static final int FLAG_ALLOW_RINGER_MODES = 2;
    public static final int FLAG_PLAY_SOUND = 4;
    public static final int FLAG_REMOVE_SOUND_AND_VIBRATE = 8;
    public static final int FLAG_SHOW_UI = 1;
    public static final int FLAG_VIBRATE = 16;
    public static final int FX_FOCUS_NAVIGATION_DOWN = 2;
    public static final int FX_FOCUS_NAVIGATION_LEFT = 3;
    public static final int FX_FOCUS_NAVIGATION_RIGHT = 4;
    public static final int FX_FOCUS_NAVIGATION_UP = 1;
    public static final int FX_KEYPRESS_DELETE = 7;
    public static final int FX_KEYPRESS_INVALID = 9;
    public static final int FX_KEYPRESS_RETURN = 8;
    public static final int FX_KEYPRESS_SPACEBAR = 6;
    public static final int FX_KEYPRESS_STANDARD = 5;
    public static final int FX_KEY_CLICK = 0;
    public static final int GET_DEVICES_ALL = 3;
    public static final int GET_DEVICES_INPUTS = 1;
    public static final int GET_DEVICES_OUTPUTS = 2;
    public static final int MODE_CURRENT = -1;
    public static final int MODE_INVALID = -2;
    public static final int MODE_IN_CALL = 2;
    public static final int MODE_IN_COMMUNICATION = 3;
    public static final int MODE_NORMAL = 0;
    public static final int MODE_RINGTONE = 1;
    /**
     * @deprecated Field NUM_STREAMS is deprecated
     */
    public static final int NUM_STREAMS = 5;
    public static final String PROPERTY_OUTPUT_FRAMES_PER_BUFFER = "android.media.property.OUTPUT_FRAMES_PER_BUFFER";
    public static final String PROPERTY_OUTPUT_SAMPLE_RATE = "android.media.property.OUTPUT_SAMPLE_RATE";
    public static final String PROPERTY_SUPPORT_AUDIO_SOURCE_UNPROCESSED = "android.media.property.SUPPORT_AUDIO_SOURCE_UNPROCESSED";
    public static final String PROPERTY_SUPPORT_MIC_NEAR_ULTRASOUND = "android.media.property.SUPPORT_MIC_NEAR_ULTRASOUND";
    public static final String PROPERTY_SUPPORT_SPEAKER_NEAR_ULTRASOUND = "android.media.property.SUPPORT_SPEAKER_NEAR_ULTRASOUND";
    public static final String RINGER_MODE_CHANGED_ACTION = "android.media.RINGER_MODE_CHANGED";
    public static final int RINGER_MODE_NORMAL = 2;
    public static final int RINGER_MODE_SILENT = 0;
    public static final int RINGER_MODE_VIBRATE = 1;
    /**
     * @deprecated Field ROUTE_ALL is deprecated
     */
    public static final int ROUTE_ALL = -1;
    /**
     * @deprecated Field ROUTE_BLUETOOTH is deprecated
     */
    public static final int ROUTE_BLUETOOTH = 4;
    /**
     * @deprecated Field ROUTE_BLUETOOTH_A2DP is deprecated
     */
    public static final int ROUTE_BLUETOOTH_A2DP = 16;
    /**
     * @deprecated Field ROUTE_BLUETOOTH_SCO is deprecated
     */
    public static final int ROUTE_BLUETOOTH_SCO = 4;
    /**
     * @deprecated Field ROUTE_EARPIECE is deprecated
     */
    public static final int ROUTE_EARPIECE = 1;
    /**
     * @deprecated Field ROUTE_HEADSET is deprecated
     */
    public static final int ROUTE_HEADSET = 8;
    /**
     * @deprecated Field ROUTE_SPEAKER is deprecated
     */
    public static final int ROUTE_SPEAKER = 2;
    public static final int SCO_AUDIO_STATE_CONNECTED = 1;
    public static final int SCO_AUDIO_STATE_CONNECTING = 2;
    public static final int SCO_AUDIO_STATE_DISCONNECTED = 0;
    public static final int SCO_AUDIO_STATE_ERROR = -1;
    public static final int STREAM_ACCESSIBILITY = 10;
    public static final int STREAM_ALARM = 4;
    public static final int STREAM_DTMF = 8;
    public static final int STREAM_MUSIC = 3;
    public static final int STREAM_NOTIFICATION = 5;
    public static final int STREAM_RING = 2;
    public static final int STREAM_SYSTEM = 1;
    public static final int STREAM_VOICE_CALL = 0;
    public static final int USE_DEFAULT_STREAM_TYPE = 0x80000000;
    /**
     * @deprecated Field VIBRATE_SETTING_CHANGED_ACTION is deprecated
     */
    public static final String VIBRATE_SETTING_CHANGED_ACTION = "android.media.VIBRATE_SETTING_CHANGED";
    /**
     * @deprecated Field VIBRATE_SETTING_OFF is deprecated
     */
    public static final int VIBRATE_SETTING_OFF = 0;
    /**
     * @deprecated Field VIBRATE_SETTING_ON is deprecated
     */
    public static final int VIBRATE_SETTING_ON = 1;
    /**
     * @deprecated Field VIBRATE_SETTING_ONLY_SILENT is deprecated
     */
    public static final int VIBRATE_SETTING_ONLY_SILENT = 2;
    /**
     * @deprecated Field VIBRATE_TYPE_NOTIFICATION is deprecated
     */
    public static final int VIBRATE_TYPE_NOTIFICATION = 1;
    /**
     * @deprecated Field VIBRATE_TYPE_RINGER is deprecated
     */
    public static final int VIBRATE_TYPE_RINGER = 0;
}
