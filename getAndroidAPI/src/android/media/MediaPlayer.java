// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   MediaPlayer.java

package android.media;

import android.content.Context;
import android.content.res.AssetFileDescriptor;
import android.net.Uri;
import android.os.*;
import android.view.Surface;
import android.view.SurfaceHolder;
import java.io.FileDescriptor;
import java.io.IOException;
import java.util.*;

// Referenced classes of package android.media:
//            VolumeAutomation, AudioRouting, ResourceBusyException, UnsupportedSchemeException, 
//            DeniedByServerException, VolumeShaper, MediaDrm, AudioAttributes, 
//            MediaDataSource, AudioDeviceInfo, PlaybackParams, SyncParams, 
//            MediaTimestamp, MediaFormat, MediaDrmException, TimedText, 
//            TimedMetaData, SubtitleData

public class MediaPlayer
    implements VolumeAutomation, AudioRouting
{
    public static class TrackInfo
        implements Parcelable
    {

        public int getTrackType()
        {
            throw new RuntimeException("Stub!");
        }

        public String getLanguage()
        {
            throw new RuntimeException("Stub!");
        }

        public MediaFormat getFormat()
        {
            throw new RuntimeException("Stub!");
        }

        public int describeContents()
        {
            throw new RuntimeException("Stub!");
        }

        public void writeToParcel(Parcel dest, int flags)
        {
            throw new RuntimeException("Stub!");
        }

        public String toString()
        {
            throw new RuntimeException("Stub!");
        }

        public static final int MEDIA_TRACK_TYPE_AUDIO = 2;
        public static final int MEDIA_TRACK_TYPE_METADATA = 5;
        public static final int MEDIA_TRACK_TYPE_SUBTITLE = 4;
        public static final int MEDIA_TRACK_TYPE_TIMEDTEXT = 3;
        public static final int MEDIA_TRACK_TYPE_UNKNOWN = 0;
        public static final int MEDIA_TRACK_TYPE_VIDEO = 1;

        TrackInfo(Parcel in)
        {
            throw new RuntimeException("Stub!");
        }
    }

    public static final class ProvisioningServerErrorException extends MediaDrmException
    {

        public ProvisioningServerErrorException(String detailMessage)
        {
            super(null);
            throw new RuntimeException("Stub!");
        }
    }

    public static final class ProvisioningNetworkErrorException extends MediaDrmException
    {

        public ProvisioningNetworkErrorException(String detailMessage)
        {
            super(null);
            throw new RuntimeException("Stub!");
        }
    }

    public static interface OnVideoSizeChangedListener
    {

        public abstract void onVideoSizeChanged(MediaPlayer mediaplayer, int i, int j);
    }

    public static interface OnTimedTextListener
    {

        public abstract void onTimedText(MediaPlayer mediaplayer, TimedText timedtext);
    }

    public static interface OnTimedMetaDataAvailableListener
    {

        public abstract void onTimedMetaDataAvailable(MediaPlayer mediaplayer, TimedMetaData timedmetadata);
    }

    public static interface OnSubtitleDataListener
    {

        public abstract void onSubtitleData(MediaPlayer mediaplayer, SubtitleData subtitledata);
    }

    public static interface OnSeekCompleteListener
    {

        public abstract void onSeekComplete(MediaPlayer mediaplayer);
    }

    public static interface OnPreparedListener
    {

        public abstract void onPrepared(MediaPlayer mediaplayer);
    }

    public static interface OnMediaTimeDiscontinuityListener
    {

        public abstract void onMediaTimeDiscontinuity(MediaPlayer mediaplayer, MediaTimestamp mediatimestamp);
    }

    public static interface OnInfoListener
    {

        public abstract boolean onInfo(MediaPlayer mediaplayer, int i, int j);
    }

    public static interface OnErrorListener
    {

        public abstract boolean onError(MediaPlayer mediaplayer, int i, int j);
    }

    public static interface OnDrmPreparedListener
    {

        public abstract void onDrmPrepared(MediaPlayer mediaplayer, int i);
    }

    public static interface OnDrmInfoListener
    {

        public abstract void onDrmInfo(MediaPlayer mediaplayer, DrmInfo drminfo);
    }

    public static interface OnDrmConfigHelper
    {

        public abstract void onDrmConfig(MediaPlayer mediaplayer);
    }

    public static interface OnCompletionListener
    {

        public abstract void onCompletion(MediaPlayer mediaplayer);
    }

    public static interface OnBufferingUpdateListener
    {

        public abstract void onBufferingUpdate(MediaPlayer mediaplayer, int i);
    }

    public static final class NoDrmSchemeException extends MediaDrmException
    {

        public NoDrmSchemeException(String detailMessage)
        {
            super(null);
            throw new RuntimeException("Stub!");
        }
    }

    public static final class MetricsConstants
    {

        public static final String CODEC_AUDIO = "android.media.mediaplayer.audio.codec";
        public static final String CODEC_VIDEO = "android.media.mediaplayer.video.codec";
        public static final String DURATION = "android.media.mediaplayer.durationMs";
        public static final String ERRORS = "android.media.mediaplayer.err";
        public static final String ERROR_CODE = "android.media.mediaplayer.errcode";
        public static final String FRAMES = "android.media.mediaplayer.frames";
        public static final String FRAMES_DROPPED = "android.media.mediaplayer.dropped";
        public static final String HEIGHT = "android.media.mediaplayer.height";
        public static final String MIME_TYPE_AUDIO = "android.media.mediaplayer.audio.mime";
        public static final String MIME_TYPE_VIDEO = "android.media.mediaplayer.video.mime";
        public static final String PLAYING = "android.media.mediaplayer.playingMs";
        public static final String WIDTH = "android.media.mediaplayer.width";

        MetricsConstants()
        {
            throw new RuntimeException("Stub!");
        }
    }

    public static final class DrmInfo
    {

        public Map getPssh()
        {
            throw new RuntimeException("Stub!");
        }

        public UUID[] getSupportedSchemes()
        {
            throw new RuntimeException("Stub!");
        }

        DrmInfo(Parcel parcel)
        {
            throw new RuntimeException("Stub!");
        }
    }


    public MediaPlayer()
    {
        throw new RuntimeException("Stub!");
    }

    public void setDisplay(SurfaceHolder sh)
    {
        throw new RuntimeException("Stub!");
    }

    public void setSurface(Surface surface)
    {
        throw new RuntimeException("Stub!");
    }

    public void setVideoScalingMode(int mode)
    {
        throw new RuntimeException("Stub!");
    }

    public static MediaPlayer create(Context context, Uri uri)
    {
        throw new RuntimeException("Stub!");
    }

    public static MediaPlayer create(Context context, Uri uri, SurfaceHolder holder)
    {
        throw new RuntimeException("Stub!");
    }

    public static MediaPlayer create(Context context, Uri uri, SurfaceHolder holder, AudioAttributes audioAttributes, int audioSessionId)
    {
        throw new RuntimeException("Stub!");
    }

    public static MediaPlayer create(Context context, int resid)
    {
        throw new RuntimeException("Stub!");
    }

    public static MediaPlayer create(Context context, int resid, AudioAttributes audioAttributes, int audioSessionId)
    {
        throw new RuntimeException("Stub!");
    }

    public void setDataSource(Context context, Uri uri)
        throws IOException, IllegalArgumentException, IllegalStateException, SecurityException
    {
        throw new RuntimeException("Stub!");
    }

    public void setDataSource(Context context, Uri uri, Map headers, List cookies)
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public void setDataSource(Context context, Uri uri, Map headers)
        throws IOException, IllegalArgumentException, IllegalStateException, SecurityException
    {
        throw new RuntimeException("Stub!");
    }

    public void setDataSource(String path)
        throws IOException, IllegalArgumentException, IllegalStateException, SecurityException
    {
        throw new RuntimeException("Stub!");
    }

    public void setDataSource(AssetFileDescriptor afd)
        throws IOException, IllegalArgumentException, IllegalStateException
    {
        throw new RuntimeException("Stub!");
    }

    public void setDataSource(FileDescriptor fd)
        throws IOException, IllegalArgumentException, IllegalStateException
    {
        throw new RuntimeException("Stub!");
    }

    public void setDataSource(FileDescriptor fd, long offset, long length)
        throws IOException, IllegalArgumentException, IllegalStateException
    {
        throw new RuntimeException("Stub!");
    }

    public void setDataSource(MediaDataSource dataSource)
        throws IllegalArgumentException, IllegalStateException
    {
        throw new RuntimeException("Stub!");
    }

    public void prepare()
        throws IOException, IllegalStateException
    {
        throw new RuntimeException("Stub!");
    }

    public native void prepareAsync()
        throws IllegalStateException;

    public void start()
        throws IllegalStateException
    {
        throw new RuntimeException("Stub!");
    }

    public void stop()
        throws IllegalStateException
    {
        throw new RuntimeException("Stub!");
    }

    public void pause()
        throws IllegalStateException
    {
        throw new RuntimeException("Stub!");
    }

    public VolumeShaper createVolumeShaper(VolumeShaper.Configuration configuration)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean setPreferredDevice(AudioDeviceInfo deviceInfo)
    {
        throw new RuntimeException("Stub!");
    }

    public AudioDeviceInfo getPreferredDevice()
    {
        throw new RuntimeException("Stub!");
    }

    public AudioDeviceInfo getRoutedDevice()
    {
        throw new RuntimeException("Stub!");
    }

    public void addOnRoutingChangedListener(AudioRouting.OnRoutingChangedListener listener, Handler handler)
    {
        throw new RuntimeException("Stub!");
    }

    public void removeOnRoutingChangedListener(AudioRouting.OnRoutingChangedListener listener)
    {
        throw new RuntimeException("Stub!");
    }

    public void setWakeMode(Context context, int mode)
    {
        throw new RuntimeException("Stub!");
    }

    public void setScreenOnWhilePlaying(boolean screenOn)
    {
        throw new RuntimeException("Stub!");
    }

    public native int getVideoWidth();

    public native int getVideoHeight();

    public PersistableBundle getMetrics()
    {
        throw new RuntimeException("Stub!");
    }

    public native boolean isPlaying();

    public native void setPlaybackParams(PlaybackParams playbackparams);

    public native PlaybackParams getPlaybackParams();

    public native void setSyncParams(SyncParams syncparams);

    public native SyncParams getSyncParams();

    public void seekTo(long msec, int mode)
    {
        throw new RuntimeException("Stub!");
    }

    public void seekTo(int msec)
        throws IllegalStateException
    {
        throw new RuntimeException("Stub!");
    }

    public MediaTimestamp getTimestamp()
    {
        throw new RuntimeException("Stub!");
    }

    public native int getCurrentPosition();

    public native int getDuration();

    public native void setNextMediaPlayer(MediaPlayer mediaplayer);

    public void release()
    {
        throw new RuntimeException("Stub!");
    }

    public void reset()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method setAudioStreamType is deprecated
     */

    public void setAudioStreamType(int streamtype)
    {
        throw new RuntimeException("Stub!");
    }

    public void setAudioAttributes(AudioAttributes attributes)
        throws IllegalArgumentException
    {
        throw new RuntimeException("Stub!");
    }

    public native void setLooping(boolean flag);

    public native boolean isLooping();

    public void setVolume(float leftVolume, float rightVolume)
    {
        throw new RuntimeException("Stub!");
    }

    public native void setAudioSessionId(int i)
        throws IllegalArgumentException, IllegalStateException;

    public native int getAudioSessionId();

    public native void attachAuxEffect(int i);

    public void setAuxEffectSendLevel(float level)
    {
        throw new RuntimeException("Stub!");
    }

    public TrackInfo[] getTrackInfo()
        throws IllegalStateException
    {
        throw new RuntimeException("Stub!");
    }

    public void addTimedTextSource(String path, String mimeType)
        throws IOException, IllegalArgumentException, IllegalStateException
    {
        throw new RuntimeException("Stub!");
    }

    public void addTimedTextSource(Context context, Uri uri, String mimeType)
        throws IOException, IllegalArgumentException, IllegalStateException
    {
        throw new RuntimeException("Stub!");
    }

    public void addTimedTextSource(FileDescriptor fd, String mimeType)
        throws IllegalArgumentException, IllegalStateException
    {
        throw new RuntimeException("Stub!");
    }

    public void addTimedTextSource(FileDescriptor fd, long offset, long length, String mime)
        throws IllegalArgumentException, IllegalStateException
    {
        throw new RuntimeException("Stub!");
    }

    public int getSelectedTrack(int trackType)
        throws IllegalStateException
    {
        throw new RuntimeException("Stub!");
    }

    public void selectTrack(int index)
        throws IllegalStateException
    {
        throw new RuntimeException("Stub!");
    }

    public void deselectTrack(int index)
        throws IllegalStateException
    {
        throw new RuntimeException("Stub!");
    }

    protected void finalize()
    {
        throw new RuntimeException("Stub!");
    }

    public void setOnPreparedListener(OnPreparedListener listener)
    {
        throw new RuntimeException("Stub!");
    }

    public void setOnCompletionListener(OnCompletionListener listener)
    {
        throw new RuntimeException("Stub!");
    }

    public void setOnBufferingUpdateListener(OnBufferingUpdateListener listener)
    {
        throw new RuntimeException("Stub!");
    }

    public void setOnSeekCompleteListener(OnSeekCompleteListener listener)
    {
        throw new RuntimeException("Stub!");
    }

    public void setOnVideoSizeChangedListener(OnVideoSizeChangedListener listener)
    {
        throw new RuntimeException("Stub!");
    }

    public void setOnTimedTextListener(OnTimedTextListener listener)
    {
        throw new RuntimeException("Stub!");
    }

    public void setOnSubtitleDataListener(OnSubtitleDataListener listener, Handler handler)
    {
        throw new RuntimeException("Stub!");
    }

    public void setOnSubtitleDataListener(OnSubtitleDataListener listener)
    {
        throw new RuntimeException("Stub!");
    }

    public void clearOnSubtitleDataListener()
    {
        throw new RuntimeException("Stub!");
    }

    public void setOnMediaTimeDiscontinuityListener(OnMediaTimeDiscontinuityListener listener, Handler handler)
    {
        throw new RuntimeException("Stub!");
    }

    public void setOnMediaTimeDiscontinuityListener(OnMediaTimeDiscontinuityListener listener)
    {
        throw new RuntimeException("Stub!");
    }

    public void clearOnMediaTimeDiscontinuityListener()
    {
        throw new RuntimeException("Stub!");
    }

    public void setOnTimedMetaDataAvailableListener(OnTimedMetaDataAvailableListener listener)
    {
        throw new RuntimeException("Stub!");
    }

    public void setOnErrorListener(OnErrorListener listener)
    {
        throw new RuntimeException("Stub!");
    }

    public void setOnInfoListener(OnInfoListener listener)
    {
        throw new RuntimeException("Stub!");
    }

    public void setOnDrmConfigHelper(OnDrmConfigHelper listener)
    {
        throw new RuntimeException("Stub!");
    }

    public void setOnDrmInfoListener(OnDrmInfoListener listener)
    {
        throw new RuntimeException("Stub!");
    }

    public void setOnDrmInfoListener(OnDrmInfoListener listener, Handler handler)
    {
        throw new RuntimeException("Stub!");
    }

    public void setOnDrmPreparedListener(OnDrmPreparedListener listener)
    {
        throw new RuntimeException("Stub!");
    }

    public void setOnDrmPreparedListener(OnDrmPreparedListener listener, Handler handler)
    {
        throw new RuntimeException("Stub!");
    }

    public DrmInfo getDrmInfo()
    {
        throw new RuntimeException("Stub!");
    }

    public void prepareDrm(UUID uuid)
        throws ProvisioningNetworkErrorException, ProvisioningServerErrorException, ResourceBusyException, UnsupportedSchemeException
    {
        throw new RuntimeException("Stub!");
    }

    public void releaseDrm()
        throws NoDrmSchemeException
    {
        throw new RuntimeException("Stub!");
    }

    public MediaDrm.KeyRequest getKeyRequest(byte keySetId[], byte initData[], String mimeType, int keyType, Map optionalParameters)
        throws NoDrmSchemeException
    {
        throw new RuntimeException("Stub!");
    }

    public byte[] provideKeyResponse(byte keySetId[], byte response[])
        throws DeniedByServerException, NoDrmSchemeException
    {
        throw new RuntimeException("Stub!");
    }

    public void restoreKeys(byte keySetId[])
        throws NoDrmSchemeException
    {
        throw new RuntimeException("Stub!");
    }

    public String getDrmPropertyString(String propertyName)
        throws NoDrmSchemeException
    {
        throw new RuntimeException("Stub!");
    }

    public void setDrmPropertyString(String propertyName, String value)
        throws NoDrmSchemeException
    {
        throw new RuntimeException("Stub!");
    }

    public static final int MEDIA_ERROR_IO = -1004;
    public static final int MEDIA_ERROR_MALFORMED = -1007;
    public static final int MEDIA_ERROR_NOT_VALID_FOR_PROGRESSIVE_PLAYBACK = 200;
    public static final int MEDIA_ERROR_SERVER_DIED = 100;
    public static final int MEDIA_ERROR_TIMED_OUT = -110;
    public static final int MEDIA_ERROR_UNKNOWN = 1;
    public static final int MEDIA_ERROR_UNSUPPORTED = -1010;
    public static final int MEDIA_INFO_AUDIO_NOT_PLAYING = 804;
    public static final int MEDIA_INFO_BAD_INTERLEAVING = 800;
    public static final int MEDIA_INFO_BUFFERING_END = 702;
    public static final int MEDIA_INFO_BUFFERING_START = 701;
    public static final int MEDIA_INFO_METADATA_UPDATE = 802;
    public static final int MEDIA_INFO_NOT_SEEKABLE = 801;
    public static final int MEDIA_INFO_STARTED_AS_NEXT = 2;
    public static final int MEDIA_INFO_SUBTITLE_TIMED_OUT = 902;
    public static final int MEDIA_INFO_UNKNOWN = 1;
    public static final int MEDIA_INFO_UNSUPPORTED_SUBTITLE = 901;
    public static final int MEDIA_INFO_VIDEO_NOT_PLAYING = 805;
    public static final int MEDIA_INFO_VIDEO_RENDERING_START = 3;
    public static final int MEDIA_INFO_VIDEO_TRACK_LAGGING = 700;
    /**
     * @deprecated Field MEDIA_MIMETYPE_TEXT_SUBRIP is deprecated
     */
    public static final String MEDIA_MIMETYPE_TEXT_SUBRIP = "application/x-subrip";
    public static final int PREPARE_DRM_STATUS_PREPARATION_ERROR = 3;
    public static final int PREPARE_DRM_STATUS_PROVISIONING_NETWORK_ERROR = 1;
    public static final int PREPARE_DRM_STATUS_PROVISIONING_SERVER_ERROR = 2;
    public static final int PREPARE_DRM_STATUS_SUCCESS = 0;
    public static final int SEEK_CLOSEST = 3;
    public static final int SEEK_CLOSEST_SYNC = 2;
    public static final int SEEK_NEXT_SYNC = 1;
    public static final int SEEK_PREVIOUS_SYNC = 0;
    public static final int VIDEO_SCALING_MODE_SCALE_TO_FIT = 1;
    public static final int VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING = 2;
}
