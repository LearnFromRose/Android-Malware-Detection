// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   KeyGenParameterSpec.java

package android.security.keystore;

import java.math.BigInteger;
import java.security.spec.AlgorithmParameterSpec;
import java.util.Date;
import javax.security.auth.x500.X500Principal;

public final class KeyGenParameterSpec
    implements AlgorithmParameterSpec
{
    public static final class Builder
    {

        public Builder setKeySize(int keySize)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setAlgorithmParameterSpec(AlgorithmParameterSpec spec)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setCertificateSubject(X500Principal subject)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setCertificateSerialNumber(BigInteger serialNumber)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setCertificateNotBefore(Date date)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setCertificateNotAfter(Date date)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setKeyValidityStart(Date startDate)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setKeyValidityEnd(Date endDate)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setKeyValidityForOriginationEnd(Date endDate)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setKeyValidityForConsumptionEnd(Date endDate)
        {
            throw new RuntimeException("Stub!");
        }

        public transient Builder setDigests(String digests[])
        {
            throw new RuntimeException("Stub!");
        }

        public transient Builder setEncryptionPaddings(String paddings[])
        {
            throw new RuntimeException("Stub!");
        }

        public transient Builder setSignaturePaddings(String paddings[])
        {
            throw new RuntimeException("Stub!");
        }

        public transient Builder setBlockModes(String blockModes[])
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setRandomizedEncryptionRequired(boolean required)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setUserAuthenticationRequired(boolean required)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setUserConfirmationRequired(boolean required)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setUserAuthenticationValidityDurationSeconds(int seconds)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setUserPresenceRequired(boolean required)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setAttestationChallenge(byte attestationChallenge[])
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setUserAuthenticationValidWhileOnBody(boolean remainsValid)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setInvalidatedByBiometricEnrollment(boolean invalidateKey)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setIsStrongBoxBacked(boolean isStrongBoxBacked)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setUnlockedDeviceRequired(boolean unlockedDeviceRequired)
        {
            throw new RuntimeException("Stub!");
        }

        public KeyGenParameterSpec build()
        {
            throw new RuntimeException("Stub!");
        }

        public Builder(String keystoreAlias, int purposes)
        {
            throw new RuntimeException("Stub!");
        }
    }


    KeyGenParameterSpec(String keyStoreAlias, int uid, int keySize, AlgorithmParameterSpec spec, X500Principal certificateSubject, BigInteger certificateSerialNumber, Date certificateNotBefore, 
            Date certificateNotAfter, Date keyValidityStart, Date keyValidityForOriginationEnd, Date keyValidityForConsumptionEnd, int purposes, String digests[], String encryptionPaddings[], 
            String signaturePaddings[], String blockModes[], boolean randomizedEncryptionRequired, boolean userAuthenticationRequired, int userAuthenticationValidityDurationSeconds, boolean userPresenceRequired, byte attestationChallenge[], 
            boolean uniqueIdIncluded, boolean userAuthenticationValidWhileOnBody, boolean invalidatedByBiometricEnrollment, boolean isStrongBoxBacked, boolean userConfirmationRequired, boolean unlockedDeviceRequired)
    {
        throw new RuntimeException("Stub!");
    }

    public String getKeystoreAlias()
    {
        throw new RuntimeException("Stub!");
    }

    public int getKeySize()
    {
        throw new RuntimeException("Stub!");
    }

    public AlgorithmParameterSpec getAlgorithmParameterSpec()
    {
        throw new RuntimeException("Stub!");
    }

    public X500Principal getCertificateSubject()
    {
        throw new RuntimeException("Stub!");
    }

    public BigInteger getCertificateSerialNumber()
    {
        throw new RuntimeException("Stub!");
    }

    public Date getCertificateNotBefore()
    {
        throw new RuntimeException("Stub!");
    }

    public Date getCertificateNotAfter()
    {
        throw new RuntimeException("Stub!");
    }

    public Date getKeyValidityStart()
    {
        throw new RuntimeException("Stub!");
    }

    public Date getKeyValidityForConsumptionEnd()
    {
        throw new RuntimeException("Stub!");
    }

    public Date getKeyValidityForOriginationEnd()
    {
        throw new RuntimeException("Stub!");
    }

    public int getPurposes()
    {
        throw new RuntimeException("Stub!");
    }

    public String[] getDigests()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isDigestsSpecified()
    {
        throw new RuntimeException("Stub!");
    }

    public String[] getEncryptionPaddings()
    {
        throw new RuntimeException("Stub!");
    }

    public String[] getSignaturePaddings()
    {
        throw new RuntimeException("Stub!");
    }

    public String[] getBlockModes()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isRandomizedEncryptionRequired()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isUserAuthenticationRequired()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isUserConfirmationRequired()
    {
        throw new RuntimeException("Stub!");
    }

    public int getUserAuthenticationValidityDurationSeconds()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isUserPresenceRequired()
    {
        throw new RuntimeException("Stub!");
    }

    public byte[] getAttestationChallenge()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isUserAuthenticationValidWhileOnBody()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isInvalidatedByBiometricEnrollment()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isStrongBoxBacked()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isUnlockedDeviceRequired()
    {
        throw new RuntimeException("Stub!");
    }
}
