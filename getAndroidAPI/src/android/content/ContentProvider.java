// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   ContentProvider.java

package android.content;

import android.content.pm.PathPermission;
import android.content.pm.ProviderInfo;
import android.content.res.AssetFileDescriptor;
import android.content.res.Configuration;
import android.database.Cursor;
import android.net.Uri;
import android.os.*;
import java.io.*;
import java.util.ArrayList;

// Referenced classes of package android.content:
//            ComponentCallbacks2, OperationApplicationException, Context, ContentValues, 
//            ContentProviderResult

public abstract class ContentProvider
    implements ComponentCallbacks2
{
    public static interface PipeDataWriter
    {

        public abstract void writeDataToPipe(ParcelFileDescriptor parcelfiledescriptor, Uri uri, String s, Bundle bundle, Object obj);
    }

    public final class CallingIdentity
    {

        final ContentProvider this$0;

        CallingIdentity(long binderToken, String callingPackage)
        {
            this.this$0 = ContentProvider.this;
            super();
            throw new RuntimeException("Stub!");
        }
    }


    public ContentProvider()
    {
        throw new RuntimeException("Stub!");
    }

    public final Context getContext()
    {
        throw new RuntimeException("Stub!");
    }

    public final String getCallingPackage()
    {
        throw new RuntimeException("Stub!");
    }

    public final CallingIdentity clearCallingIdentity()
    {
        throw new RuntimeException("Stub!");
    }

    public final void restoreCallingIdentity(CallingIdentity identity)
    {
        throw new RuntimeException("Stub!");
    }

    protected final void setReadPermission(String permission)
    {
        throw new RuntimeException("Stub!");
    }

    public final String getReadPermission()
    {
        throw new RuntimeException("Stub!");
    }

    protected final void setWritePermission(String permission)
    {
        throw new RuntimeException("Stub!");
    }

    public final String getWritePermission()
    {
        throw new RuntimeException("Stub!");
    }

    protected final void setPathPermissions(PathPermission permissions[])
    {
        throw new RuntimeException("Stub!");
    }

    public final PathPermission[] getPathPermissions()
    {
        throw new RuntimeException("Stub!");
    }

    public abstract boolean onCreate();

    public void onConfigurationChanged(Configuration newConfig)
    {
        throw new RuntimeException("Stub!");
    }

    public void onLowMemory()
    {
        throw new RuntimeException("Stub!");
    }

    public void onTrimMemory(int level)
    {
        throw new RuntimeException("Stub!");
    }

    public abstract Cursor query(Uri uri, String as[], String s, String as1[], String s1);

    public Cursor query(Uri uri, String projection[], String selection, String selectionArgs[], String sortOrder, CancellationSignal cancellationSignal)
    {
        throw new RuntimeException("Stub!");
    }

    public Cursor query(Uri uri, String projection[], Bundle queryArgs, CancellationSignal cancellationSignal)
    {
        throw new RuntimeException("Stub!");
    }

    public abstract String getType(Uri uri);

    public Uri canonicalize(Uri url)
    {
        throw new RuntimeException("Stub!");
    }

    public Uri uncanonicalize(Uri url)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean refresh(Uri uri, Bundle args, CancellationSignal cancellationSignal)
    {
        throw new RuntimeException("Stub!");
    }

    public abstract Uri insert(Uri uri, ContentValues contentvalues);

    public int bulkInsert(Uri uri, ContentValues values[])
    {
        throw new RuntimeException("Stub!");
    }

    public abstract int delete(Uri uri, String s, String as[]);

    public abstract int update(Uri uri, ContentValues contentvalues, String s, String as[]);

    public ParcelFileDescriptor openFile(Uri uri, String mode)
        throws FileNotFoundException
    {
        throw new RuntimeException("Stub!");
    }

    public ParcelFileDescriptor openFile(Uri uri, String mode, CancellationSignal signal)
        throws FileNotFoundException
    {
        throw new RuntimeException("Stub!");
    }

    public AssetFileDescriptor openAssetFile(Uri uri, String mode)
        throws FileNotFoundException
    {
        throw new RuntimeException("Stub!");
    }

    public AssetFileDescriptor openAssetFile(Uri uri, String mode, CancellationSignal signal)
        throws FileNotFoundException
    {
        throw new RuntimeException("Stub!");
    }

    protected final ParcelFileDescriptor openFileHelper(Uri uri, String mode)
        throws FileNotFoundException
    {
        throw new RuntimeException("Stub!");
    }

    public String[] getStreamTypes(Uri uri, String mimeTypeFilter)
    {
        throw new RuntimeException("Stub!");
    }

    public AssetFileDescriptor openTypedAssetFile(Uri uri, String mimeTypeFilter, Bundle opts)
        throws FileNotFoundException
    {
        throw new RuntimeException("Stub!");
    }

    public AssetFileDescriptor openTypedAssetFile(Uri uri, String mimeTypeFilter, Bundle opts, CancellationSignal signal)
        throws FileNotFoundException
    {
        throw new RuntimeException("Stub!");
    }

    public ParcelFileDescriptor openPipeHelper(Uri uri, String mimeType, Bundle opts, Object args, PipeDataWriter func)
        throws FileNotFoundException
    {
        throw new RuntimeException("Stub!");
    }

    protected boolean isTemporary()
    {
        throw new RuntimeException("Stub!");
    }

    public void attachInfo(Context context, ProviderInfo info)
    {
        throw new RuntimeException("Stub!");
    }

    public ContentProviderResult[] applyBatch(String authority, ArrayList operations)
        throws OperationApplicationException
    {
        throw new RuntimeException("Stub!");
    }

    public ContentProviderResult[] applyBatch(ArrayList operations)
        throws OperationApplicationException
    {
        throw new RuntimeException("Stub!");
    }

    public Bundle call(String authority, String method, String arg, Bundle extras)
    {
        throw new RuntimeException("Stub!");
    }

    public Bundle call(String method, String arg, Bundle extras)
    {
        throw new RuntimeException("Stub!");
    }

    public void shutdown()
    {
        throw new RuntimeException("Stub!");
    }

    public void dump(FileDescriptor fd, PrintWriter writer, String args[])
    {
        throw new RuntimeException("Stub!");
    }
}
