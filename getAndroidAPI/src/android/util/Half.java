// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   Half.java

package android.util;


public final class Half extends Number
    implements Comparable
{

    public Half(short value)
    {
        throw new RuntimeException("Stub!");
    }

    public Half(float value)
    {
        throw new RuntimeException("Stub!");
    }

    public Half(double value)
    {
        throw new RuntimeException("Stub!");
    }

    public Half(String value)
        throws NumberFormatException
    {
        throw new RuntimeException("Stub!");
    }

    public short halfValue()
    {
        throw new RuntimeException("Stub!");
    }

    public byte byteValue()
    {
        throw new RuntimeException("Stub!");
    }

    public short shortValue()
    {
        throw new RuntimeException("Stub!");
    }

    public int intValue()
    {
        throw new RuntimeException("Stub!");
    }

    public long longValue()
    {
        throw new RuntimeException("Stub!");
    }

    public float floatValue()
    {
        throw new RuntimeException("Stub!");
    }

    public double doubleValue()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isNaN()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean equals(Object o)
    {
        throw new RuntimeException("Stub!");
    }

    public int hashCode()
    {
        throw new RuntimeException("Stub!");
    }

    public String toString()
    {
        throw new RuntimeException("Stub!");
    }

    public int compareTo(Half h)
    {
        throw new RuntimeException("Stub!");
    }

    public static int hashCode(short h)
    {
        throw new RuntimeException("Stub!");
    }

    public static int compare(short x, short y)
    {
        throw new RuntimeException("Stub!");
    }

    public static short halfToShortBits(short h)
    {
        throw new RuntimeException("Stub!");
    }

    public static int halfToIntBits(short h)
    {
        throw new RuntimeException("Stub!");
    }

    public static int halfToRawIntBits(short h)
    {
        throw new RuntimeException("Stub!");
    }

    public static short intBitsToHalf(int bits)
    {
        throw new RuntimeException("Stub!");
    }

    public static short copySign(short magnitude, short sign)
    {
        throw new RuntimeException("Stub!");
    }

    public static short abs(short h)
    {
        throw new RuntimeException("Stub!");
    }

    public static short round(short h)
    {
        throw new RuntimeException("Stub!");
    }

    public static short ceil(short h)
    {
        throw new RuntimeException("Stub!");
    }

    public static short floor(short h)
    {
        throw new RuntimeException("Stub!");
    }

    public static short trunc(short h)
    {
        throw new RuntimeException("Stub!");
    }

    public static short min(short x, short y)
    {
        throw new RuntimeException("Stub!");
    }

    public static short max(short x, short y)
    {
        throw new RuntimeException("Stub!");
    }

    public static boolean less(short x, short y)
    {
        throw new RuntimeException("Stub!");
    }

    public static boolean lessEquals(short x, short y)
    {
        throw new RuntimeException("Stub!");
    }

    public static boolean greater(short x, short y)
    {
        throw new RuntimeException("Stub!");
    }

    public static boolean greaterEquals(short x, short y)
    {
        throw new RuntimeException("Stub!");
    }

    public static boolean equals(short x, short y)
    {
        throw new RuntimeException("Stub!");
    }

    public static int getSign(short h)
    {
        throw new RuntimeException("Stub!");
    }

    public static int getExponent(short h)
    {
        throw new RuntimeException("Stub!");
    }

    public static int getSignificand(short h)
    {
        throw new RuntimeException("Stub!");
    }

    public static boolean isInfinite(short h)
    {
        throw new RuntimeException("Stub!");
    }

    public static boolean isNaN(short h)
    {
        throw new RuntimeException("Stub!");
    }

    public static boolean isNormalized(short h)
    {
        throw new RuntimeException("Stub!");
    }

    public static float toFloat(short h)
    {
        throw new RuntimeException("Stub!");
    }

    public static short toHalf(float f)
    {
        throw new RuntimeException("Stub!");
    }

    public static Half valueOf(short h)
    {
        throw new RuntimeException("Stub!");
    }

    public static Half valueOf(float f)
    {
        throw new RuntimeException("Stub!");
    }

    public static Half valueOf(String s)
    {
        throw new RuntimeException("Stub!");
    }

    public static short parseHalf(String s)
        throws NumberFormatException
    {
        throw new RuntimeException("Stub!");
    }

    public static String toString(short h)
    {
        throw new RuntimeException("Stub!");
    }

    public static String toHexString(short h)
    {
        throw new RuntimeException("Stub!");
    }

    public volatile int compareTo(Object obj)
    {
        return compareTo((Half)obj);
    }

    public static final short EPSILON = 5120;
    public static final short LOWEST_VALUE = -1025;
    public static final int MAX_EXPONENT = 15;
    public static final short MAX_VALUE = 31743;
    public static final int MIN_EXPONENT = -14;
    public static final short MIN_NORMAL = 1024;
    public static final short MIN_VALUE = 1;
    public static final short NEGATIVE_INFINITY = -1024;
    public static final short NEGATIVE_ZERO = -32768;
    public static final short NaN = 32256;
    public static final short POSITIVE_INFINITY = 31744;
    public static final short POSITIVE_ZERO = 0;
    public static final int SIZE = 16;
}
