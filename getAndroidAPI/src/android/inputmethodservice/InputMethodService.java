// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   InputMethodService.java

package android.inputmethodservice;

import android.app.Dialog;
import android.content.res.Configuration;
import android.graphics.Rect;
import android.graphics.Region;
import android.os.*;
import android.view.*;
import android.view.inputmethod.*;
import java.io.FileDescriptor;
import java.io.PrintWriter;

// Referenced classes of package android.inputmethodservice:
//            AbstractInputMethodService

public class InputMethodService extends AbstractInputMethodService
{
    public static final class Insets
    {

        public static final int TOUCHABLE_INSETS_CONTENT = 1;
        public static final int TOUCHABLE_INSETS_FRAME = 0;
        public static final int TOUCHABLE_INSETS_REGION = 3;
        public static final int TOUCHABLE_INSETS_VISIBLE = 2;
        public int contentTopInsets;
        public int touchableInsets;
        public final Region touchableRegion = null;
        public int visibleTopInsets;

        public Insets()
        {
            throw new RuntimeException("Stub!");
        }
    }

    public class InputMethodSessionImpl extends AbstractInputMethodService.AbstractInputMethodSessionImpl
    {

        public void finishInput()
        {
            throw new RuntimeException("Stub!");
        }

        public void displayCompletions(CompletionInfo completions[])
        {
            throw new RuntimeException("Stub!");
        }

        public void updateExtractedText(int token, ExtractedText text)
        {
            throw new RuntimeException("Stub!");
        }

        public void updateSelection(int oldSelStart, int oldSelEnd, int newSelStart, int newSelEnd, int candidatesStart, int candidatesEnd)
        {
            throw new RuntimeException("Stub!");
        }

        public void viewClicked(boolean focusChanged)
        {
            throw new RuntimeException("Stub!");
        }

        public void updateCursor(Rect newCursor)
        {
            throw new RuntimeException("Stub!");
        }

        public void appPrivateCommand(String action, Bundle data)
        {
            throw new RuntimeException("Stub!");
        }

        public void toggleSoftInput(int showFlags, int hideFlags)
        {
            throw new RuntimeException("Stub!");
        }

        public void updateCursorAnchorInfo(CursorAnchorInfo info)
        {
            throw new RuntimeException("Stub!");
        }

        final InputMethodService this$0;

        public InputMethodSessionImpl()
        {
            this.this$0 = InputMethodService.this;
            super(InputMethodService.this);
            throw new RuntimeException("Stub!");
        }
    }

    public class InputMethodImpl extends AbstractInputMethodService.AbstractInputMethodImpl
    {

        public void attachToken(IBinder token)
        {
            throw new RuntimeException("Stub!");
        }

        public void bindInput(InputBinding binding)
        {
            throw new RuntimeException("Stub!");
        }

        public void unbindInput()
        {
            throw new RuntimeException("Stub!");
        }

        public void startInput(InputConnection ic, EditorInfo attribute)
        {
            throw new RuntimeException("Stub!");
        }

        public void restartInput(InputConnection ic, EditorInfo attribute)
        {
            throw new RuntimeException("Stub!");
        }

        public void hideSoftInput(int flags, ResultReceiver resultReceiver)
        {
            throw new RuntimeException("Stub!");
        }

        public void showSoftInput(int flags, ResultReceiver resultReceiver)
        {
            throw new RuntimeException("Stub!");
        }

        public void changeInputMethodSubtype(InputMethodSubtype subtype)
        {
            throw new RuntimeException("Stub!");
        }

        final InputMethodService this$0;

        public InputMethodImpl()
        {
            this.this$0 = InputMethodService.this;
            super(InputMethodService.this);
            throw new RuntimeException("Stub!");
        }
    }


    public InputMethodService()
    {
        throw new RuntimeException("Stub!");
    }

    public void setTheme(int theme)
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method enableHardwareAcceleration is deprecated
     */

    public boolean enableHardwareAcceleration()
    {
        throw new RuntimeException("Stub!");
    }

    public void onCreate()
    {
        throw new RuntimeException("Stub!");
    }

    public void onInitializeInterface()
    {
        throw new RuntimeException("Stub!");
    }

    public void onDestroy()
    {
        throw new RuntimeException("Stub!");
    }

    public void onConfigurationChanged(Configuration newConfig)
    {
        throw new RuntimeException("Stub!");
    }

    public AbstractInputMethodService.AbstractInputMethodImpl onCreateInputMethodInterface()
    {
        throw new RuntimeException("Stub!");
    }

    public AbstractInputMethodService.AbstractInputMethodSessionImpl onCreateInputMethodSessionInterface()
    {
        throw new RuntimeException("Stub!");
    }

    public LayoutInflater getLayoutInflater()
    {
        throw new RuntimeException("Stub!");
    }

    public Dialog getWindow()
    {
        throw new RuntimeException("Stub!");
    }

    public void setBackDisposition(int disposition)
    {
        throw new RuntimeException("Stub!");
    }

    public int getBackDisposition()
    {
        throw new RuntimeException("Stub!");
    }

    public int getMaxWidth()
    {
        throw new RuntimeException("Stub!");
    }

    public InputBinding getCurrentInputBinding()
    {
        throw new RuntimeException("Stub!");
    }

    public InputConnection getCurrentInputConnection()
    {
        throw new RuntimeException("Stub!");
    }

    public final boolean switchToPreviousInputMethod()
    {
        throw new RuntimeException("Stub!");
    }

    public final boolean switchToNextInputMethod(boolean onlyCurrentIme)
    {
        throw new RuntimeException("Stub!");
    }

    public final boolean shouldOfferSwitchingToNextInputMethod()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean getCurrentInputStarted()
    {
        throw new RuntimeException("Stub!");
    }

    public EditorInfo getCurrentInputEditorInfo()
    {
        throw new RuntimeException("Stub!");
    }

    public void updateFullscreenMode()
    {
        throw new RuntimeException("Stub!");
    }

    public void onConfigureWindow(Window win, boolean isFullscreen, boolean isCandidatesOnly)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isFullscreenMode()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean onEvaluateFullscreenMode()
    {
        throw new RuntimeException("Stub!");
    }

    public void setExtractViewShown(boolean shown)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isExtractViewShown()
    {
        throw new RuntimeException("Stub!");
    }

    public void onComputeInsets(Insets outInsets)
    {
        throw new RuntimeException("Stub!");
    }

    public void updateInputViewShown()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isShowInputRequested()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isInputViewShown()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean onEvaluateInputViewShown()
    {
        throw new RuntimeException("Stub!");
    }

    public void setCandidatesViewShown(boolean shown)
    {
        throw new RuntimeException("Stub!");
    }

    public int getCandidatesHiddenVisibility()
    {
        throw new RuntimeException("Stub!");
    }

    public void showStatusIcon(int iconResId)
    {
        throw new RuntimeException("Stub!");
    }

    public void hideStatusIcon()
    {
        throw new RuntimeException("Stub!");
    }

    public void switchInputMethod(String id)
    {
        throw new RuntimeException("Stub!");
    }

    public final void switchInputMethod(String id, InputMethodSubtype subtype)
    {
        throw new RuntimeException("Stub!");
    }

    public void setExtractView(View view)
    {
        throw new RuntimeException("Stub!");
    }

    public void setCandidatesView(View view)
    {
        throw new RuntimeException("Stub!");
    }

    public void setInputView(View view)
    {
        throw new RuntimeException("Stub!");
    }

    public View onCreateExtractTextView()
    {
        throw new RuntimeException("Stub!");
    }

    public View onCreateCandidatesView()
    {
        throw new RuntimeException("Stub!");
    }

    public View onCreateInputView()
    {
        throw new RuntimeException("Stub!");
    }

    public void onStartInputView(EditorInfo info, boolean restarting)
    {
        throw new RuntimeException("Stub!");
    }

    public void onFinishInputView(boolean finishingInput)
    {
        throw new RuntimeException("Stub!");
    }

    public void onStartCandidatesView(EditorInfo info, boolean restarting)
    {
        throw new RuntimeException("Stub!");
    }

    public void onFinishCandidatesView(boolean finishingInput)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean onShowInputRequested(int flags, boolean configChange)
    {
        throw new RuntimeException("Stub!");
    }

    public void showWindow(boolean showInput)
    {
        throw new RuntimeException("Stub!");
    }

    public void hideWindow()
    {
        throw new RuntimeException("Stub!");
    }

    public void onWindowShown()
    {
        throw new RuntimeException("Stub!");
    }

    public void onWindowHidden()
    {
        throw new RuntimeException("Stub!");
    }

    public void onBindInput()
    {
        throw new RuntimeException("Stub!");
    }

    public void onUnbindInput()
    {
        throw new RuntimeException("Stub!");
    }

    public void onStartInput(EditorInfo attribute, boolean restarting)
    {
        throw new RuntimeException("Stub!");
    }

    public void onFinishInput()
    {
        throw new RuntimeException("Stub!");
    }

    public void onDisplayCompletions(CompletionInfo completions[])
    {
        throw new RuntimeException("Stub!");
    }

    public void onUpdateExtractedText(int token, ExtractedText text)
    {
        throw new RuntimeException("Stub!");
    }

    public void onUpdateSelection(int oldSelStart, int oldSelEnd, int newSelStart, int newSelEnd, int candidatesStart, int candidatesEnd)
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method onViewClicked is deprecated
     */

    public void onViewClicked(boolean focusChanged)
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method onUpdateCursor is deprecated
     */

    public void onUpdateCursor(Rect newCursor)
    {
        throw new RuntimeException("Stub!");
    }

    public void onUpdateCursorAnchorInfo(CursorAnchorInfo cursorAnchorInfo)
    {
        throw new RuntimeException("Stub!");
    }

    public void requestHideSelf(int flags)
    {
        throw new RuntimeException("Stub!");
    }

    public final void requestShowSelf(int flags)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean onKeyDown(int keyCode, KeyEvent event)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean onKeyLongPress(int keyCode, KeyEvent event)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean onKeyMultiple(int keyCode, int count, KeyEvent event)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean onKeyUp(int keyCode, KeyEvent event)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean onTrackballEvent(MotionEvent event)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean onGenericMotionEvent(MotionEvent event)
    {
        throw new RuntimeException("Stub!");
    }

    public void onAppPrivateCommand(String action, Bundle data)
    {
        throw new RuntimeException("Stub!");
    }

    public void sendDownUpKeyEvents(int keyEventCode)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean sendDefaultEditorAction(boolean fromEnterKey)
    {
        throw new RuntimeException("Stub!");
    }

    public void sendKeyChar(char charCode)
    {
        throw new RuntimeException("Stub!");
    }

    public void onExtractedSelectionChanged(int start, int end)
    {
        throw new RuntimeException("Stub!");
    }

    public void onExtractedTextClicked()
    {
        throw new RuntimeException("Stub!");
    }

    public void onExtractedCursorMovement(int dx, int dy)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean onExtractTextContextMenuItem(int id)
    {
        throw new RuntimeException("Stub!");
    }

    public CharSequence getTextForImeAction(int imeOptions)
    {
        throw new RuntimeException("Stub!");
    }

    public void onUpdateExtractingVisibility(EditorInfo ei)
    {
        throw new RuntimeException("Stub!");
    }

    public void onUpdateExtractingViews(EditorInfo ei)
    {
        throw new RuntimeException("Stub!");
    }

    public void onExtractingInputChanged(EditorInfo ei)
    {
        throw new RuntimeException("Stub!");
    }

    protected void onCurrentInputMethodSubtypeChanged(InputMethodSubtype newSubtype)
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method getInputMethodWindowRecommendedHeight is deprecated
     */

    public int getInputMethodWindowRecommendedHeight()
    {
        throw new RuntimeException("Stub!");
    }

    protected void dump(FileDescriptor fd, PrintWriter fout, String args[])
    {
        throw new RuntimeException("Stub!");
    }

    public static final int BACK_DISPOSITION_ADJUST_NOTHING = 3;
    public static final int BACK_DISPOSITION_DEFAULT = 0;
    /**
     * @deprecated Field BACK_DISPOSITION_WILL_DISMISS is deprecated
     */
    public static final int BACK_DISPOSITION_WILL_DISMISS = 2;
    /**
     * @deprecated Field BACK_DISPOSITION_WILL_NOT_DISMISS is deprecated
     */
    public static final int BACK_DISPOSITION_WILL_NOT_DISMISS = 1;
}
