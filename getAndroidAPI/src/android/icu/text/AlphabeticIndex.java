// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   AlphabeticIndex.java

package android.icu.text;

import android.icu.util.ULocale;
import java.util.*;

// Referenced classes of package android.icu.text:
//            RuleBasedCollator, UnicodeSet

public final class AlphabeticIndex
    implements Iterable
{
    public static class Record
    {

        public CharSequence getName()
        {
            throw new RuntimeException("Stub!");
        }

        public Object getData()
        {
            throw new RuntimeException("Stub!");
        }

        public String toString()
        {
            throw new RuntimeException("Stub!");
        }

        Record(CharSequence name, Object data)
        {
            throw new RuntimeException("Stub!");
        }
    }

    public static final class ImmutableIndex
        implements Iterable
    {

        public int getBucketCount()
        {
            throw new RuntimeException("Stub!");
        }

        public int getBucketIndex(CharSequence name)
        {
            throw new RuntimeException("Stub!");
        }

        public Bucket getBucket(int index)
        {
            throw new RuntimeException("Stub!");
        }

        public Iterator iterator()
        {
            throw new RuntimeException("Stub!");
        }

        ImmutableIndex()
        {
            throw new RuntimeException("Stub!");
        }
    }

    public static class Bucket
        implements Iterable
    {
        public static final class LabelType extends Enum
        {

            public static LabelType[] values()
            {
                return (LabelType[])$VALUES.clone();
            }

            public static LabelType valueOf(String name)
            {
                return (LabelType)Enum.valueOf(android/icu/text/AlphabeticIndex$Bucket$LabelType, name);
            }

            public static final LabelType NORMAL;
            public static final LabelType UNDERFLOW;
            public static final LabelType INFLOW;
            public static final LabelType OVERFLOW;
            private static final LabelType $VALUES[];

            static 
            {
                NORMAL = new LabelType("NORMAL", 0);
                UNDERFLOW = new LabelType("UNDERFLOW", 1);
                INFLOW = new LabelType("INFLOW", 2);
                OVERFLOW = new LabelType("OVERFLOW", 3);
                $VALUES = (new LabelType[] {
                    NORMAL, UNDERFLOW, INFLOW, OVERFLOW
                });
            }

            private LabelType(String s, int i)
            {
                super(s, i);
            }
        }


        public String getLabel()
        {
            throw new RuntimeException("Stub!");
        }

        public LabelType getLabelType()
        {
            throw new RuntimeException("Stub!");
        }

        public int size()
        {
            throw new RuntimeException("Stub!");
        }

        public Iterator iterator()
        {
            throw new RuntimeException("Stub!");
        }

        public String toString()
        {
            throw new RuntimeException("Stub!");
        }

        Bucket(String label, String lowerBoundary, LabelType labelType)
        {
            throw new RuntimeException("Stub!");
        }
    }


    public AlphabeticIndex(ULocale locale)
    {
        throw new RuntimeException("Stub!");
    }

    public AlphabeticIndex(Locale locale)
    {
        throw new RuntimeException("Stub!");
    }

    public AlphabeticIndex(RuleBasedCollator collator)
    {
        throw new RuntimeException("Stub!");
    }

    public AlphabeticIndex addLabels(UnicodeSet additions)
    {
        throw new RuntimeException("Stub!");
    }

    public transient AlphabeticIndex addLabels(ULocale additions[])
    {
        throw new RuntimeException("Stub!");
    }

    public transient AlphabeticIndex addLabels(Locale additions[])
    {
        throw new RuntimeException("Stub!");
    }

    public AlphabeticIndex setOverflowLabel(String overflowLabel)
    {
        throw new RuntimeException("Stub!");
    }

    public String getUnderflowLabel()
    {
        throw new RuntimeException("Stub!");
    }

    public AlphabeticIndex setUnderflowLabel(String underflowLabel)
    {
        throw new RuntimeException("Stub!");
    }

    public String getOverflowLabel()
    {
        throw new RuntimeException("Stub!");
    }

    public AlphabeticIndex setInflowLabel(String inflowLabel)
    {
        throw new RuntimeException("Stub!");
    }

    public String getInflowLabel()
    {
        throw new RuntimeException("Stub!");
    }

    public int getMaxLabelCount()
    {
        throw new RuntimeException("Stub!");
    }

    public AlphabeticIndex setMaxLabelCount(int maxLabelCount)
    {
        throw new RuntimeException("Stub!");
    }

    public ImmutableIndex buildImmutableIndex()
    {
        throw new RuntimeException("Stub!");
    }

    public List getBucketLabels()
    {
        throw new RuntimeException("Stub!");
    }

    public RuleBasedCollator getCollator()
    {
        throw new RuntimeException("Stub!");
    }

    public AlphabeticIndex addRecord(CharSequence name, Object data)
    {
        throw new RuntimeException("Stub!");
    }

    public int getBucketIndex(CharSequence name)
    {
        throw new RuntimeException("Stub!");
    }

    public AlphabeticIndex clearRecords()
    {
        throw new RuntimeException("Stub!");
    }

    public int getBucketCount()
    {
        throw new RuntimeException("Stub!");
    }

    public int getRecordCount()
    {
        throw new RuntimeException("Stub!");
    }

    public Iterator iterator()
    {
        throw new RuntimeException("Stub!");
    }
}
