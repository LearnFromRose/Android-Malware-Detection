// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   UnicodeSet.java

package android.icu.text;

import android.icu.util.Freezable;
import java.text.ParsePosition;
import java.util.Collection;
import java.util.Iterator;

// Referenced classes of package android.icu.text:
//            UnicodeFilter, SymbolTable, Replaceable

public class UnicodeSet extends UnicodeFilter
    implements Iterable, Comparable, Freezable
{
    public static final class SpanCondition extends Enum
    {

        public static SpanCondition[] values()
        {
            return (SpanCondition[])$VALUES.clone();
        }

        public static SpanCondition valueOf(String name)
        {
            return (SpanCondition)Enum.valueOf(android/icu/text/UnicodeSet$SpanCondition, name);
        }

        public static final SpanCondition NOT_CONTAINED;
        public static final SpanCondition CONTAINED;
        public static final SpanCondition SIMPLE;
        public static final SpanCondition CONDITION_COUNT;
        private static final SpanCondition $VALUES[];

        static 
        {
            NOT_CONTAINED = new SpanCondition("NOT_CONTAINED", 0);
            CONTAINED = new SpanCondition("CONTAINED", 1);
            SIMPLE = new SpanCondition("SIMPLE", 2);
            CONDITION_COUNT = new SpanCondition("CONDITION_COUNT", 3);
            $VALUES = (new SpanCondition[] {
                NOT_CONTAINED, CONTAINED, SIMPLE, CONDITION_COUNT
            });
        }

        private SpanCondition(String s, int i)
        {
            super(s, i);
        }
    }

    public static class EntryRange
    {

        public String toString()
        {
            throw new RuntimeException("Stub!");
        }

        public int codepoint;
        public int codepointEnd;

        EntryRange()
        {
            throw new RuntimeException("Stub!");
        }
    }

    public static final class ComparisonStyle extends Enum
    {

        public static ComparisonStyle[] values()
        {
            return (ComparisonStyle[])$VALUES.clone();
        }

        public static ComparisonStyle valueOf(String name)
        {
            return (ComparisonStyle)Enum.valueOf(android/icu/text/UnicodeSet$ComparisonStyle, name);
        }

        public static final ComparisonStyle SHORTER_FIRST;
        public static final ComparisonStyle LEXICOGRAPHIC;
        public static final ComparisonStyle LONGER_FIRST;
        private static final ComparisonStyle $VALUES[];

        static 
        {
            SHORTER_FIRST = new ComparisonStyle("SHORTER_FIRST", 0);
            LEXICOGRAPHIC = new ComparisonStyle("LEXICOGRAPHIC", 1);
            LONGER_FIRST = new ComparisonStyle("LONGER_FIRST", 2);
            $VALUES = (new ComparisonStyle[] {
                SHORTER_FIRST, LEXICOGRAPHIC, LONGER_FIRST
            });
        }

        private ComparisonStyle(String s, int i)
        {
            super(s, i);
        }
    }


    public UnicodeSet()
    {
        throw new RuntimeException("Stub!");
    }

    public UnicodeSet(UnicodeSet other)
    {
        throw new RuntimeException("Stub!");
    }

    public UnicodeSet(int start, int end)
    {
        throw new RuntimeException("Stub!");
    }

    public transient UnicodeSet(int pairs[])
    {
        throw new RuntimeException("Stub!");
    }

    public UnicodeSet(String pattern)
    {
        throw new RuntimeException("Stub!");
    }

    public UnicodeSet(String pattern, boolean ignoreWhitespace)
    {
        throw new RuntimeException("Stub!");
    }

    public UnicodeSet(String pattern, int options)
    {
        throw new RuntimeException("Stub!");
    }

    public UnicodeSet(String pattern, ParsePosition pos, SymbolTable symbols)
    {
        throw new RuntimeException("Stub!");
    }

    public UnicodeSet(String pattern, ParsePosition pos, SymbolTable symbols, int options)
    {
        throw new RuntimeException("Stub!");
    }

    public Object clone()
    {
        throw new RuntimeException("Stub!");
    }

    public UnicodeSet set(int start, int end)
    {
        throw new RuntimeException("Stub!");
    }

    public UnicodeSet set(UnicodeSet other)
    {
        throw new RuntimeException("Stub!");
    }

    public final UnicodeSet applyPattern(String pattern)
    {
        throw new RuntimeException("Stub!");
    }

    public UnicodeSet applyPattern(String pattern, boolean ignoreWhitespace)
    {
        throw new RuntimeException("Stub!");
    }

    public UnicodeSet applyPattern(String pattern, int options)
    {
        throw new RuntimeException("Stub!");
    }

    public String toPattern(boolean escapeUnprintable)
    {
        throw new RuntimeException("Stub!");
    }

    public StringBuffer _generatePattern(StringBuffer result, boolean escapeUnprintable)
    {
        throw new RuntimeException("Stub!");
    }

    public StringBuffer _generatePattern(StringBuffer result, boolean escapeUnprintable, boolean includeStrings)
    {
        throw new RuntimeException("Stub!");
    }

    public int size()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isEmpty()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean matchesIndexValue(int v)
    {
        throw new RuntimeException("Stub!");
    }

    public int matches(Replaceable text, int offset[], int limit, boolean incremental)
    {
        throw new RuntimeException("Stub!");
    }

    public void addMatchSetTo(UnicodeSet toUnionTo)
    {
        throw new RuntimeException("Stub!");
    }

    public int indexOf(int c)
    {
        throw new RuntimeException("Stub!");
    }

    public int charAt(int index)
    {
        throw new RuntimeException("Stub!");
    }

    public UnicodeSet add(int start, int end)
    {
        throw new RuntimeException("Stub!");
    }

    public UnicodeSet addAll(int start, int end)
    {
        throw new RuntimeException("Stub!");
    }

    public final UnicodeSet add(int c)
    {
        throw new RuntimeException("Stub!");
    }

    public final UnicodeSet add(CharSequence s)
    {
        throw new RuntimeException("Stub!");
    }

    public final UnicodeSet addAll(CharSequence s)
    {
        throw new RuntimeException("Stub!");
    }

    public final UnicodeSet retainAll(CharSequence s)
    {
        throw new RuntimeException("Stub!");
    }

    public final UnicodeSet complementAll(CharSequence s)
    {
        throw new RuntimeException("Stub!");
    }

    public final UnicodeSet removeAll(CharSequence s)
    {
        throw new RuntimeException("Stub!");
    }

    public final UnicodeSet removeAllStrings()
    {
        throw new RuntimeException("Stub!");
    }

    public static UnicodeSet from(CharSequence s)
    {
        throw new RuntimeException("Stub!");
    }

    public static UnicodeSet fromAll(CharSequence s)
    {
        throw new RuntimeException("Stub!");
    }

    public UnicodeSet retain(int start, int end)
    {
        throw new RuntimeException("Stub!");
    }

    public final UnicodeSet retain(int c)
    {
        throw new RuntimeException("Stub!");
    }

    public final UnicodeSet retain(CharSequence cs)
    {
        throw new RuntimeException("Stub!");
    }

    public UnicodeSet remove(int start, int end)
    {
        throw new RuntimeException("Stub!");
    }

    public final UnicodeSet remove(int c)
    {
        throw new RuntimeException("Stub!");
    }

    public final UnicodeSet remove(CharSequence s)
    {
        throw new RuntimeException("Stub!");
    }

    public UnicodeSet complement(int start, int end)
    {
        throw new RuntimeException("Stub!");
    }

    public final UnicodeSet complement(int c)
    {
        throw new RuntimeException("Stub!");
    }

    public UnicodeSet complement()
    {
        throw new RuntimeException("Stub!");
    }

    public final UnicodeSet complement(CharSequence s)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean contains(int c)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean contains(int start, int end)
    {
        throw new RuntimeException("Stub!");
    }

    public final boolean contains(CharSequence s)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean containsAll(UnicodeSet b)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean containsAll(String s)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean containsNone(int start, int end)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean containsNone(UnicodeSet b)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean containsNone(CharSequence s)
    {
        throw new RuntimeException("Stub!");
    }

    public final boolean containsSome(int start, int end)
    {
        throw new RuntimeException("Stub!");
    }

    public final boolean containsSome(UnicodeSet s)
    {
        throw new RuntimeException("Stub!");
    }

    public final boolean containsSome(CharSequence s)
    {
        throw new RuntimeException("Stub!");
    }

    public UnicodeSet addAll(UnicodeSet c)
    {
        throw new RuntimeException("Stub!");
    }

    public UnicodeSet retainAll(UnicodeSet c)
    {
        throw new RuntimeException("Stub!");
    }

    public UnicodeSet removeAll(UnicodeSet c)
    {
        throw new RuntimeException("Stub!");
    }

    public UnicodeSet complementAll(UnicodeSet c)
    {
        throw new RuntimeException("Stub!");
    }

    public UnicodeSet clear()
    {
        throw new RuntimeException("Stub!");
    }

    public int getRangeCount()
    {
        throw new RuntimeException("Stub!");
    }

    public int getRangeStart(int index)
    {
        throw new RuntimeException("Stub!");
    }

    public int getRangeEnd(int index)
    {
        throw new RuntimeException("Stub!");
    }

    public UnicodeSet compact()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean equals(Object o)
    {
        throw new RuntimeException("Stub!");
    }

    public int hashCode()
    {
        throw new RuntimeException("Stub!");
    }

    public String toString()
    {
        throw new RuntimeException("Stub!");
    }

    public Collection addAllTo(Collection target)
    {
        throw new RuntimeException("Stub!");
    }

    public UnicodeSet add(Iterable source)
    {
        throw new RuntimeException("Stub!");
    }

    public UnicodeSet addAll(Iterable source)
    {
        throw new RuntimeException("Stub!");
    }

    public UnicodeSet applyIntPropertyValue(int prop, int value)
    {
        throw new RuntimeException("Stub!");
    }

    public UnicodeSet applyPropertyAlias(String propertyAlias, String valueAlias)
    {
        throw new RuntimeException("Stub!");
    }

    public UnicodeSet applyPropertyAlias(String propertyAlias, String valueAlias, SymbolTable symbols)
    {
        throw new RuntimeException("Stub!");
    }

    public UnicodeSet closeOver(int attribute)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isFrozen()
    {
        throw new RuntimeException("Stub!");
    }

    public UnicodeSet freeze()
    {
        throw new RuntimeException("Stub!");
    }

    public int span(CharSequence s, SpanCondition spanCondition)
    {
        throw new RuntimeException("Stub!");
    }

    public int span(CharSequence s, int start, SpanCondition spanCondition)
    {
        throw new RuntimeException("Stub!");
    }

    public int spanBack(CharSequence s, SpanCondition spanCondition)
    {
        throw new RuntimeException("Stub!");
    }

    public int spanBack(CharSequence s, int fromIndex, SpanCondition spanCondition)
    {
        throw new RuntimeException("Stub!");
    }

    public UnicodeSet cloneAsThawed()
    {
        throw new RuntimeException("Stub!");
    }

    public Iterable ranges()
    {
        throw new RuntimeException("Stub!");
    }

    public Iterator iterator()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean containsAll(Iterable collection)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean containsNone(Iterable collection)
    {
        throw new RuntimeException("Stub!");
    }

    public final boolean containsSome(Iterable collection)
    {
        throw new RuntimeException("Stub!");
    }

    public transient UnicodeSet addAll(CharSequence collection[])
    {
        throw new RuntimeException("Stub!");
    }

    public UnicodeSet removeAll(Iterable collection)
    {
        throw new RuntimeException("Stub!");
    }

    public UnicodeSet retainAll(Iterable collection)
    {
        throw new RuntimeException("Stub!");
    }

    public int compareTo(UnicodeSet o)
    {
        throw new RuntimeException("Stub!");
    }

    public int compareTo(UnicodeSet o, ComparisonStyle style)
    {
        throw new RuntimeException("Stub!");
    }

    public int compareTo(Iterable other)
    {
        throw new RuntimeException("Stub!");
    }

    public Collection strings()
    {
        throw new RuntimeException("Stub!");
    }

    public volatile int compareTo(Object obj)
    {
        return compareTo((UnicodeSet)obj);
    }

    public volatile Object cloneAsThawed()
    {
        return cloneAsThawed();
    }

    public volatile Object freeze()
    {
        return freeze();
    }

    public static final int ADD_CASE_MAPPINGS = 4;
    public static final UnicodeSet ALL_CODE_POINTS = null;
    public static final int CASE = 2;
    public static final int CASE_INSENSITIVE = 2;
    public static final UnicodeSet EMPTY = null;
    public static final int IGNORE_SPACE = 1;
    public static final int MAX_VALUE = 0x10ffff;
    public static final int MIN_VALUE = 0;

}
