// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   LocaleDisplayNames.java

package android.icu.text;

import android.icu.util.ULocale;
import java.util.*;

// Referenced classes of package android.icu.text:
//            DisplayContext

public abstract class LocaleDisplayNames
{
    public static class UiListItem
    {

        public boolean equals(Object obj)
        {
            throw new RuntimeException("Stub!");
        }

        public int hashCode()
        {
            throw new RuntimeException("Stub!");
        }

        public String toString()
        {
            throw new RuntimeException("Stub!");
        }

        public static Comparator getComparator(Comparator comparator, boolean inSelf)
        {
            throw new RuntimeException("Stub!");
        }

        public final ULocale minimized = null;
        public final ULocale modified = null;
        public final String nameInDisplayLocale = null;
        public final String nameInSelf = null;

        public UiListItem(ULocale minimized, ULocale modified, String nameInDisplayLocale, String nameInSelf)
        {
            throw new RuntimeException("Stub!");
        }
    }

    public static final class DialectHandling extends Enum
    {

        public static DialectHandling[] values()
        {
            return (DialectHandling[])$VALUES.clone();
        }

        public static DialectHandling valueOf(String name)
        {
            return (DialectHandling)Enum.valueOf(android/icu/text/LocaleDisplayNames$DialectHandling, name);
        }

        public static final DialectHandling STANDARD_NAMES;
        public static final DialectHandling DIALECT_NAMES;
        private static final DialectHandling $VALUES[];

        static 
        {
            STANDARD_NAMES = new DialectHandling("STANDARD_NAMES", 0);
            DIALECT_NAMES = new DialectHandling("DIALECT_NAMES", 1);
            $VALUES = (new DialectHandling[] {
                STANDARD_NAMES, DIALECT_NAMES
            });
        }

        private DialectHandling(String s, int i)
        {
            super(s, i);
        }
    }


    /**
     * @deprecated Method LocaleDisplayNames is deprecated
     */

    LocaleDisplayNames()
    {
        throw new RuntimeException("Stub!");
    }

    public static LocaleDisplayNames getInstance(ULocale locale)
    {
        throw new RuntimeException("Stub!");
    }

    public static LocaleDisplayNames getInstance(Locale locale)
    {
        throw new RuntimeException("Stub!");
    }

    public static LocaleDisplayNames getInstance(ULocale locale, DialectHandling dialectHandling)
    {
        throw new RuntimeException("Stub!");
    }

    public static transient LocaleDisplayNames getInstance(ULocale locale, DisplayContext contexts[])
    {
        throw new RuntimeException("Stub!");
    }

    public static transient LocaleDisplayNames getInstance(Locale locale, DisplayContext contexts[])
    {
        throw new RuntimeException("Stub!");
    }

    public abstract ULocale getLocale();

    public abstract DialectHandling getDialectHandling();

    public abstract DisplayContext getContext(DisplayContext.Type type);

    public abstract String localeDisplayName(ULocale ulocale);

    public abstract String localeDisplayName(Locale locale);

    public abstract String localeDisplayName(String s);

    public abstract String languageDisplayName(String s);

    public abstract String scriptDisplayName(String s);

    public abstract String scriptDisplayName(int i);

    public abstract String regionDisplayName(String s);

    public abstract String variantDisplayName(String s);

    public abstract String keyDisplayName(String s);

    public abstract String keyValueDisplayName(String s, String s1);

    public List getUiList(Set localeSet, boolean inSelf, Comparator collator)
    {
        throw new RuntimeException("Stub!");
    }

    public abstract List getUiListCompareWholeItems(Set set, Comparator comparator);
}
