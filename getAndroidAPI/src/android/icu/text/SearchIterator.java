// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   SearchIterator.java

package android.icu.text;

import java.text.CharacterIterator;

// Referenced classes of package android.icu.text:
//            BreakIterator

public abstract class SearchIterator
{
    public static final class ElementComparisonType extends Enum
    {

        public static ElementComparisonType[] values()
        {
            return (ElementComparisonType[])$VALUES.clone();
        }

        public static ElementComparisonType valueOf(String name)
        {
            return (ElementComparisonType)Enum.valueOf(android/icu/text/SearchIterator$ElementComparisonType, name);
        }

        public static final ElementComparisonType STANDARD_ELEMENT_COMPARISON;
        public static final ElementComparisonType PATTERN_BASE_WEIGHT_IS_WILDCARD;
        public static final ElementComparisonType ANY_BASE_WEIGHT_IS_WILDCARD;
        private static final ElementComparisonType $VALUES[];

        static 
        {
            STANDARD_ELEMENT_COMPARISON = new ElementComparisonType("STANDARD_ELEMENT_COMPARISON", 0);
            PATTERN_BASE_WEIGHT_IS_WILDCARD = new ElementComparisonType("PATTERN_BASE_WEIGHT_IS_WILDCARD", 1);
            ANY_BASE_WEIGHT_IS_WILDCARD = new ElementComparisonType("ANY_BASE_WEIGHT_IS_WILDCARD", 2);
            $VALUES = (new ElementComparisonType[] {
                STANDARD_ELEMENT_COMPARISON, PATTERN_BASE_WEIGHT_IS_WILDCARD, ANY_BASE_WEIGHT_IS_WILDCARD
            });
        }

        private ElementComparisonType(String s, int i)
        {
            super(s, i);
        }
    }


    protected SearchIterator(CharacterIterator target, BreakIterator breaker)
    {
        throw new RuntimeException("Stub!");
    }

    public void setIndex(int position)
    {
        throw new RuntimeException("Stub!");
    }

    public void setOverlapping(boolean allowOverlap)
    {
        throw new RuntimeException("Stub!");
    }

    public void setBreakIterator(BreakIterator breakiter)
    {
        throw new RuntimeException("Stub!");
    }

    public void setTarget(CharacterIterator text)
    {
        throw new RuntimeException("Stub!");
    }

    public int getMatchStart()
    {
        throw new RuntimeException("Stub!");
    }

    public abstract int getIndex();

    public int getMatchLength()
    {
        throw new RuntimeException("Stub!");
    }

    public BreakIterator getBreakIterator()
    {
        throw new RuntimeException("Stub!");
    }

    public CharacterIterator getTarget()
    {
        throw new RuntimeException("Stub!");
    }

    public String getMatchedText()
    {
        throw new RuntimeException("Stub!");
    }

    public int next()
    {
        throw new RuntimeException("Stub!");
    }

    public int previous()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isOverlapping()
    {
        throw new RuntimeException("Stub!");
    }

    public void reset()
    {
        throw new RuntimeException("Stub!");
    }

    public final int first()
    {
        throw new RuntimeException("Stub!");
    }

    public final int following(int position)
    {
        throw new RuntimeException("Stub!");
    }

    public final int last()
    {
        throw new RuntimeException("Stub!");
    }

    public final int preceding(int position)
    {
        throw new RuntimeException("Stub!");
    }

    protected void setMatchLength(int length)
    {
        throw new RuntimeException("Stub!");
    }

    protected abstract int handleNext(int i);

    protected abstract int handlePrevious(int i);

    public void setElementComparisonType(ElementComparisonType type)
    {
        throw new RuntimeException("Stub!");
    }

    public ElementComparisonType getElementComparisonType()
    {
        throw new RuntimeException("Stub!");
    }

    public static final int DONE = -1;
    protected BreakIterator breakIterator;
    protected int matchLength;
    protected CharacterIterator targetText;
}
