// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   Normalizer2.java

package android.icu.text;

import java.io.InputStream;

// Referenced classes of package android.icu.text:
//            Normalizer

public abstract class Normalizer2
{
    public static final class Mode extends Enum
    {

        public static Mode[] values()
        {
            return (Mode[])$VALUES.clone();
        }

        public static Mode valueOf(String name)
        {
            return (Mode)Enum.valueOf(android/icu/text/Normalizer2$Mode, name);
        }

        public static final Mode COMPOSE;
        public static final Mode DECOMPOSE;
        public static final Mode FCD;
        public static final Mode COMPOSE_CONTIGUOUS;
        private static final Mode $VALUES[];

        static 
        {
            COMPOSE = new Mode("COMPOSE", 0);
            DECOMPOSE = new Mode("DECOMPOSE", 1);
            FCD = new Mode("FCD", 2);
            COMPOSE_CONTIGUOUS = new Mode("COMPOSE_CONTIGUOUS", 3);
            $VALUES = (new Mode[] {
                COMPOSE, DECOMPOSE, FCD, COMPOSE_CONTIGUOUS
            });
        }

        private Mode(String s, int i)
        {
            super(s, i);
        }
    }


    /**
     * @deprecated Method Normalizer2 is deprecated
     */

    Normalizer2()
    {
        throw new RuntimeException("Stub!");
    }

    public static Normalizer2 getNFCInstance()
    {
        throw new RuntimeException("Stub!");
    }

    public static Normalizer2 getNFDInstance()
    {
        throw new RuntimeException("Stub!");
    }

    public static Normalizer2 getNFKCInstance()
    {
        throw new RuntimeException("Stub!");
    }

    public static Normalizer2 getNFKDInstance()
    {
        throw new RuntimeException("Stub!");
    }

    public static Normalizer2 getNFKCCasefoldInstance()
    {
        throw new RuntimeException("Stub!");
    }

    public static Normalizer2 getInstance(InputStream data, String name, Mode mode)
    {
        throw new RuntimeException("Stub!");
    }

    public String normalize(CharSequence src)
    {
        throw new RuntimeException("Stub!");
    }

    public abstract StringBuilder normalize(CharSequence charsequence, StringBuilder stringbuilder);

    public abstract Appendable normalize(CharSequence charsequence, Appendable appendable);

    public abstract StringBuilder normalizeSecondAndAppend(StringBuilder stringbuilder, CharSequence charsequence);

    public abstract StringBuilder append(StringBuilder stringbuilder, CharSequence charsequence);

    public abstract String getDecomposition(int i);

    public String getRawDecomposition(int c)
    {
        throw new RuntimeException("Stub!");
    }

    public int composePair(int a, int b)
    {
        throw new RuntimeException("Stub!");
    }

    public int getCombiningClass(int c)
    {
        throw new RuntimeException("Stub!");
    }

    public abstract boolean isNormalized(CharSequence charsequence);

    public abstract Normalizer.QuickCheckResult quickCheck(CharSequence charsequence);

    public abstract int spanQuickCheckYes(CharSequence charsequence);

    public abstract boolean hasBoundaryBefore(int i);

    public abstract boolean hasBoundaryAfter(int i);

    public abstract boolean isInert(int i);
}
