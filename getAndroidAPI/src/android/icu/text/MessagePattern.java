// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   MessagePattern.java

package android.icu.text;

import android.icu.util.Freezable;

public final class MessagePattern
    implements Cloneable, Freezable
{
    public static final class Part
    {

        public Type getType()
        {
            throw new RuntimeException("Stub!");
        }

        public int getIndex()
        {
            throw new RuntimeException("Stub!");
        }

        public int getLength()
        {
            throw new RuntimeException("Stub!");
        }

        public int getLimit()
        {
            throw new RuntimeException("Stub!");
        }

        public int getValue()
        {
            throw new RuntimeException("Stub!");
        }

        public ArgType getArgType()
        {
            throw new RuntimeException("Stub!");
        }

        public String toString()
        {
            throw new RuntimeException("Stub!");
        }

        public boolean equals(Object other)
        {
            throw new RuntimeException("Stub!");
        }

        public int hashCode()
        {
            throw new RuntimeException("Stub!");
        }

        Part(Type t, int i, int l, int v)
        {
            throw new RuntimeException("Stub!");
        }
    }

    public static final class ArgType extends Enum
    {

        public static ArgType[] values()
        {
            return (ArgType[])$VALUES.clone();
        }

        public static ArgType valueOf(String name)
        {
            return (ArgType)Enum.valueOf(android/icu/text/MessagePattern$ArgType, name);
        }

        public boolean hasPluralStyle()
        {
            throw new RuntimeException("Stub!");
        }

        public static final ArgType NONE;
        public static final ArgType SIMPLE;
        public static final ArgType CHOICE;
        public static final ArgType PLURAL;
        public static final ArgType SELECT;
        public static final ArgType SELECTORDINAL;
        private static final ArgType $VALUES[];

        static 
        {
            NONE = new ArgType("NONE", 0);
            SIMPLE = new ArgType("SIMPLE", 1);
            CHOICE = new ArgType("CHOICE", 2);
            PLURAL = new ArgType("PLURAL", 3);
            SELECT = new ArgType("SELECT", 4);
            SELECTORDINAL = new ArgType("SELECTORDINAL", 5);
            $VALUES = (new ArgType[] {
                NONE, SIMPLE, CHOICE, PLURAL, SELECT, SELECTORDINAL
            });
        }

        private ArgType(String s, int i)
        {
            super(s, i);
        }
    }

    public static final class ApostropheMode extends Enum
    {

        public static ApostropheMode[] values()
        {
            return (ApostropheMode[])$VALUES.clone();
        }

        public static ApostropheMode valueOf(String name)
        {
            return (ApostropheMode)Enum.valueOf(android/icu/text/MessagePattern$ApostropheMode, name);
        }

        public static final ApostropheMode DOUBLE_OPTIONAL;
        public static final ApostropheMode DOUBLE_REQUIRED;
        private static final ApostropheMode $VALUES[];

        static 
        {
            DOUBLE_OPTIONAL = new ApostropheMode("DOUBLE_OPTIONAL", 0);
            DOUBLE_REQUIRED = new ApostropheMode("DOUBLE_REQUIRED", 1);
            $VALUES = (new ApostropheMode[] {
                DOUBLE_OPTIONAL, DOUBLE_REQUIRED
            });
        }

        private ApostropheMode(String s, int i)
        {
            super(s, i);
        }
    }


    public MessagePattern()
    {
        throw new RuntimeException("Stub!");
    }

    public MessagePattern(ApostropheMode mode)
    {
        throw new RuntimeException("Stub!");
    }

    public MessagePattern(String pattern)
    {
        throw new RuntimeException("Stub!");
    }

    public MessagePattern parse(String pattern)
    {
        throw new RuntimeException("Stub!");
    }

    public MessagePattern parseChoiceStyle(String pattern)
    {
        throw new RuntimeException("Stub!");
    }

    public MessagePattern parsePluralStyle(String pattern)
    {
        throw new RuntimeException("Stub!");
    }

    public MessagePattern parseSelectStyle(String pattern)
    {
        throw new RuntimeException("Stub!");
    }

    public void clear()
    {
        throw new RuntimeException("Stub!");
    }

    public void clearPatternAndSetApostropheMode(ApostropheMode mode)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean equals(Object other)
    {
        throw new RuntimeException("Stub!");
    }

    public int hashCode()
    {
        throw new RuntimeException("Stub!");
    }

    public ApostropheMode getApostropheMode()
    {
        throw new RuntimeException("Stub!");
    }

    public String getPatternString()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean hasNamedArguments()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean hasNumberedArguments()
    {
        throw new RuntimeException("Stub!");
    }

    public String toString()
    {
        throw new RuntimeException("Stub!");
    }

    public static int validateArgumentName(String name)
    {
        throw new RuntimeException("Stub!");
    }

    public String autoQuoteApostropheDeep()
    {
        throw new RuntimeException("Stub!");
    }

    public int countParts()
    {
        throw new RuntimeException("Stub!");
    }

    public Part getPart(int i)
    {
        throw new RuntimeException("Stub!");
    }

    public Part.Type getPartType(int i)
    {
        throw new RuntimeException("Stub!");
    }

    public int getPatternIndex(int partIndex)
    {
        throw new RuntimeException("Stub!");
    }

    public String getSubstring(Part part)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean partSubstringMatches(Part part, String s)
    {
        throw new RuntimeException("Stub!");
    }

    public double getNumericValue(Part part)
    {
        throw new RuntimeException("Stub!");
    }

    public double getPluralOffset(int pluralStart)
    {
        throw new RuntimeException("Stub!");
    }

    public int getLimitPartIndex(int start)
    {
        throw new RuntimeException("Stub!");
    }

    public Object clone()
    {
        throw new RuntimeException("Stub!");
    }

    public MessagePattern cloneAsThawed()
    {
        throw new RuntimeException("Stub!");
    }

    public MessagePattern freeze()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isFrozen()
    {
        throw new RuntimeException("Stub!");
    }

    public volatile Object cloneAsThawed()
    {
        return cloneAsThawed();
    }

    public volatile Object freeze()
    {
        return freeze();
    }

    public static final int ARG_NAME_NOT_NUMBER = -1;
    public static final int ARG_NAME_NOT_VALID = -2;
    public static final double NO_NUMERIC_VALUE = -123456789D;
}
