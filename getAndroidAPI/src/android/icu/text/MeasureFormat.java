// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   MeasureFormat.java

package android.icu.text;

import android.icu.util.*;
import java.text.FieldPosition;
import java.text.ParsePosition;
import java.util.Locale;

// Referenced classes of package android.icu.text:
//            UFormat, NumberFormat

public class MeasureFormat extends UFormat
{
    public static final class FormatWidth extends Enum
    {

        public static FormatWidth[] values()
        {
            return (FormatWidth[])$VALUES.clone();
        }

        public static FormatWidth valueOf(String name)
        {
            return (FormatWidth)Enum.valueOf(android/icu/text/MeasureFormat$FormatWidth, name);
        }

        public static final FormatWidth WIDE;
        public static final FormatWidth SHORT;
        public static final FormatWidth NARROW;
        public static final FormatWidth NUMERIC;
        private static final FormatWidth $VALUES[];

        static 
        {
            WIDE = new FormatWidth("WIDE", 0);
            SHORT = new FormatWidth("SHORT", 1);
            NARROW = new FormatWidth("NARROW", 2);
            NUMERIC = new FormatWidth("NUMERIC", 3);
            $VALUES = (new FormatWidth[] {
                WIDE, SHORT, NARROW, NUMERIC
            });
        }

        private FormatWidth(String s, int i)
        {
            super(s, i);
        }
    }


    MeasureFormat(ULocale locale, FormatWidth formatWidth)
    {
        throw new RuntimeException("Stub!");
    }

    public static MeasureFormat getInstance(ULocale locale, FormatWidth formatWidth)
    {
        throw new RuntimeException("Stub!");
    }

    public static MeasureFormat getInstance(Locale locale, FormatWidth formatWidth)
    {
        throw new RuntimeException("Stub!");
    }

    public static MeasureFormat getInstance(ULocale locale, FormatWidth formatWidth, NumberFormat format)
    {
        throw new RuntimeException("Stub!");
    }

    public static MeasureFormat getInstance(Locale locale, FormatWidth formatWidth, NumberFormat format)
    {
        throw new RuntimeException("Stub!");
    }

    public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition fpos)
    {
        throw new RuntimeException("Stub!");
    }

    public Measure parseObject(String source, ParsePosition pos)
    {
        throw new RuntimeException("Stub!");
    }

    public final transient String formatMeasures(Measure measures[])
    {
        throw new RuntimeException("Stub!");
    }

    public StringBuilder formatMeasurePerUnit(Measure measure, MeasureUnit perUnit, StringBuilder appendTo, FieldPosition pos)
    {
        throw new RuntimeException("Stub!");
    }

    public transient StringBuilder formatMeasures(StringBuilder appendTo, FieldPosition fpos, Measure measures[])
    {
        throw new RuntimeException("Stub!");
    }

    public String getUnitDisplayName(MeasureUnit unit)
    {
        throw new RuntimeException("Stub!");
    }

    public final boolean equals(Object other)
    {
        throw new RuntimeException("Stub!");
    }

    public final int hashCode()
    {
        throw new RuntimeException("Stub!");
    }

    public FormatWidth getWidth()
    {
        throw new RuntimeException("Stub!");
    }

    public final ULocale getLocale()
    {
        throw new RuntimeException("Stub!");
    }

    public NumberFormat getNumberFormat()
    {
        throw new RuntimeException("Stub!");
    }

    public static MeasureFormat getCurrencyFormat(ULocale locale)
    {
        throw new RuntimeException("Stub!");
    }

    public static MeasureFormat getCurrencyFormat(Locale locale)
    {
        throw new RuntimeException("Stub!");
    }

    public static MeasureFormat getCurrencyFormat()
    {
        throw new RuntimeException("Stub!");
    }

    public volatile Object parseObject(String s, ParsePosition parseposition)
    {
        return parseObject(s, parseposition);
    }
}
