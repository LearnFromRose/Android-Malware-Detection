// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   TimeZoneFormat.java

package android.icu.text;

import android.icu.util.*;
import java.io.Serializable;
import java.text.*;
import java.util.EnumSet;
import java.util.Locale;

// Referenced classes of package android.icu.text:
//            UFormat, TimeZoneNames

public class TimeZoneFormat extends UFormat
    implements Freezable, Serializable
{
    public static final class TimeType extends Enum
    {

        public static TimeType[] values()
        {
            return (TimeType[])$VALUES.clone();
        }

        public static TimeType valueOf(String name)
        {
            return (TimeType)Enum.valueOf(android/icu/text/TimeZoneFormat$TimeType, name);
        }

        public static final TimeType UNKNOWN;
        public static final TimeType STANDARD;
        public static final TimeType DAYLIGHT;
        private static final TimeType $VALUES[];

        static 
        {
            UNKNOWN = new TimeType("UNKNOWN", 0);
            STANDARD = new TimeType("STANDARD", 1);
            DAYLIGHT = new TimeType("DAYLIGHT", 2);
            $VALUES = (new TimeType[] {
                UNKNOWN, STANDARD, DAYLIGHT
            });
        }

        private TimeType(String s, int i)
        {
            super(s, i);
        }
    }

    public static final class Style extends Enum
    {

        public static Style[] values()
        {
            return (Style[])$VALUES.clone();
        }

        public static Style valueOf(String name)
        {
            return (Style)Enum.valueOf(android/icu/text/TimeZoneFormat$Style, name);
        }

        public static final Style GENERIC_LOCATION;
        public static final Style GENERIC_LONG;
        public static final Style GENERIC_SHORT;
        public static final Style SPECIFIC_LONG;
        public static final Style SPECIFIC_SHORT;
        public static final Style LOCALIZED_GMT;
        public static final Style LOCALIZED_GMT_SHORT;
        public static final Style ISO_BASIC_SHORT;
        public static final Style ISO_BASIC_LOCAL_SHORT;
        public static final Style ISO_BASIC_FIXED;
        public static final Style ISO_BASIC_LOCAL_FIXED;
        public static final Style ISO_BASIC_FULL;
        public static final Style ISO_BASIC_LOCAL_FULL;
        public static final Style ISO_EXTENDED_FIXED;
        public static final Style ISO_EXTENDED_LOCAL_FIXED;
        public static final Style ISO_EXTENDED_FULL;
        public static final Style ISO_EXTENDED_LOCAL_FULL;
        public static final Style ZONE_ID;
        public static final Style ZONE_ID_SHORT;
        public static final Style EXEMPLAR_LOCATION;
        private static final Style $VALUES[];

        static 
        {
            GENERIC_LOCATION = new Style("GENERIC_LOCATION", 0);
            GENERIC_LONG = new Style("GENERIC_LONG", 1);
            GENERIC_SHORT = new Style("GENERIC_SHORT", 2);
            SPECIFIC_LONG = new Style("SPECIFIC_LONG", 3);
            SPECIFIC_SHORT = new Style("SPECIFIC_SHORT", 4);
            LOCALIZED_GMT = new Style("LOCALIZED_GMT", 5);
            LOCALIZED_GMT_SHORT = new Style("LOCALIZED_GMT_SHORT", 6);
            ISO_BASIC_SHORT = new Style("ISO_BASIC_SHORT", 7);
            ISO_BASIC_LOCAL_SHORT = new Style("ISO_BASIC_LOCAL_SHORT", 8);
            ISO_BASIC_FIXED = new Style("ISO_BASIC_FIXED", 9);
            ISO_BASIC_LOCAL_FIXED = new Style("ISO_BASIC_LOCAL_FIXED", 10);
            ISO_BASIC_FULL = new Style("ISO_BASIC_FULL", 11);
            ISO_BASIC_LOCAL_FULL = new Style("ISO_BASIC_LOCAL_FULL", 12);
            ISO_EXTENDED_FIXED = new Style("ISO_EXTENDED_FIXED", 13);
            ISO_EXTENDED_LOCAL_FIXED = new Style("ISO_EXTENDED_LOCAL_FIXED", 14);
            ISO_EXTENDED_FULL = new Style("ISO_EXTENDED_FULL", 15);
            ISO_EXTENDED_LOCAL_FULL = new Style("ISO_EXTENDED_LOCAL_FULL", 16);
            ZONE_ID = new Style("ZONE_ID", 17);
            ZONE_ID_SHORT = new Style("ZONE_ID_SHORT", 18);
            EXEMPLAR_LOCATION = new Style("EXEMPLAR_LOCATION", 19);
            $VALUES = (new Style[] {
                GENERIC_LOCATION, GENERIC_LONG, GENERIC_SHORT, SPECIFIC_LONG, SPECIFIC_SHORT, LOCALIZED_GMT, LOCALIZED_GMT_SHORT, ISO_BASIC_SHORT, ISO_BASIC_LOCAL_SHORT, ISO_BASIC_FIXED, 
                ISO_BASIC_LOCAL_FIXED, ISO_BASIC_FULL, ISO_BASIC_LOCAL_FULL, ISO_EXTENDED_FIXED, ISO_EXTENDED_LOCAL_FIXED, ISO_EXTENDED_FULL, ISO_EXTENDED_LOCAL_FULL, ZONE_ID, ZONE_ID_SHORT, EXEMPLAR_LOCATION
            });
        }

        private Style(String s, int i)
        {
            super(s, i);
        }
    }

    public static final class ParseOption extends Enum
    {

        public static ParseOption[] values()
        {
            return (ParseOption[])$VALUES.clone();
        }

        public static ParseOption valueOf(String name)
        {
            return (ParseOption)Enum.valueOf(android/icu/text/TimeZoneFormat$ParseOption, name);
        }

        public static final ParseOption ALL_STYLES;
        public static final ParseOption TZ_DATABASE_ABBREVIATIONS;
        private static final ParseOption $VALUES[];

        static 
        {
            ALL_STYLES = new ParseOption("ALL_STYLES", 0);
            TZ_DATABASE_ABBREVIATIONS = new ParseOption("TZ_DATABASE_ABBREVIATIONS", 1);
            $VALUES = (new ParseOption[] {
                ALL_STYLES, TZ_DATABASE_ABBREVIATIONS
            });
        }

        private ParseOption(String s, int i)
        {
            super(s, i);
        }
    }

    public static final class GMTOffsetPatternType extends Enum
    {

        public static GMTOffsetPatternType[] values()
        {
            return (GMTOffsetPatternType[])$VALUES.clone();
        }

        public static GMTOffsetPatternType valueOf(String name)
        {
            return (GMTOffsetPatternType)Enum.valueOf(android/icu/text/TimeZoneFormat$GMTOffsetPatternType, name);
        }

        public static final GMTOffsetPatternType POSITIVE_HM;
        public static final GMTOffsetPatternType POSITIVE_HMS;
        public static final GMTOffsetPatternType NEGATIVE_HM;
        public static final GMTOffsetPatternType NEGATIVE_HMS;
        public static final GMTOffsetPatternType POSITIVE_H;
        public static final GMTOffsetPatternType NEGATIVE_H;
        private static final GMTOffsetPatternType $VALUES[];

        static 
        {
            POSITIVE_HM = new GMTOffsetPatternType("POSITIVE_HM", 0);
            POSITIVE_HMS = new GMTOffsetPatternType("POSITIVE_HMS", 1);
            NEGATIVE_HM = new GMTOffsetPatternType("NEGATIVE_HM", 2);
            NEGATIVE_HMS = new GMTOffsetPatternType("NEGATIVE_HMS", 3);
            POSITIVE_H = new GMTOffsetPatternType("POSITIVE_H", 4);
            NEGATIVE_H = new GMTOffsetPatternType("NEGATIVE_H", 5);
            $VALUES = (new GMTOffsetPatternType[] {
                POSITIVE_HM, POSITIVE_HMS, NEGATIVE_HM, NEGATIVE_HMS, POSITIVE_H, NEGATIVE_H
            });
        }

        private GMTOffsetPatternType(String s, int i)
        {
            super(s, i);
        }
    }


    protected TimeZoneFormat(ULocale locale)
    {
        throw new RuntimeException("Stub!");
    }

    public static TimeZoneFormat getInstance(ULocale locale)
    {
        throw new RuntimeException("Stub!");
    }

    public static TimeZoneFormat getInstance(Locale locale)
    {
        throw new RuntimeException("Stub!");
    }

    public TimeZoneNames getTimeZoneNames()
    {
        throw new RuntimeException("Stub!");
    }

    public TimeZoneFormat setTimeZoneNames(TimeZoneNames tznames)
    {
        throw new RuntimeException("Stub!");
    }

    public String getGMTPattern()
    {
        throw new RuntimeException("Stub!");
    }

    public TimeZoneFormat setGMTPattern(String pattern)
    {
        throw new RuntimeException("Stub!");
    }

    public String getGMTOffsetPattern(GMTOffsetPatternType type)
    {
        throw new RuntimeException("Stub!");
    }

    public TimeZoneFormat setGMTOffsetPattern(GMTOffsetPatternType type, String pattern)
    {
        throw new RuntimeException("Stub!");
    }

    public String getGMTOffsetDigits()
    {
        throw new RuntimeException("Stub!");
    }

    public TimeZoneFormat setGMTOffsetDigits(String digits)
    {
        throw new RuntimeException("Stub!");
    }

    public String getGMTZeroFormat()
    {
        throw new RuntimeException("Stub!");
    }

    public TimeZoneFormat setGMTZeroFormat(String gmtZeroFormat)
    {
        throw new RuntimeException("Stub!");
    }

    public TimeZoneFormat setDefaultParseOptions(EnumSet options)
    {
        throw new RuntimeException("Stub!");
    }

    public EnumSet getDefaultParseOptions()
    {
        throw new RuntimeException("Stub!");
    }

    public final String formatOffsetISO8601Basic(int offset, boolean useUtcIndicator, boolean isShort, boolean ignoreSeconds)
    {
        throw new RuntimeException("Stub!");
    }

    public final String formatOffsetISO8601Extended(int offset, boolean useUtcIndicator, boolean isShort, boolean ignoreSeconds)
    {
        throw new RuntimeException("Stub!");
    }

    public String formatOffsetLocalizedGMT(int offset)
    {
        throw new RuntimeException("Stub!");
    }

    public String formatOffsetShortLocalizedGMT(int offset)
    {
        throw new RuntimeException("Stub!");
    }

    public final String format(Style style, TimeZone tz, long date)
    {
        throw new RuntimeException("Stub!");
    }

    public String format(Style style, TimeZone tz, long date, Output timeType)
    {
        throw new RuntimeException("Stub!");
    }

    public final int parseOffsetISO8601(String text, ParsePosition pos)
    {
        throw new RuntimeException("Stub!");
    }

    public int parseOffsetLocalizedGMT(String text, ParsePosition pos)
    {
        throw new RuntimeException("Stub!");
    }

    public int parseOffsetShortLocalizedGMT(String text, ParsePosition pos)
    {
        throw new RuntimeException("Stub!");
    }

    public TimeZone parse(Style style, String text, ParsePosition pos, EnumSet options, Output timeType)
    {
        throw new RuntimeException("Stub!");
    }

    public TimeZone parse(Style style, String text, ParsePosition pos, Output timeType)
    {
        throw new RuntimeException("Stub!");
    }

    public final TimeZone parse(String text, ParsePosition pos)
    {
        throw new RuntimeException("Stub!");
    }

    public final TimeZone parse(String text)
        throws ParseException
    {
        throw new RuntimeException("Stub!");
    }

    public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos)
    {
        throw new RuntimeException("Stub!");
    }

    public AttributedCharacterIterator formatToCharacterIterator(Object obj)
    {
        throw new RuntimeException("Stub!");
    }

    public Object parseObject(String source, ParsePosition pos)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isFrozen()
    {
        throw new RuntimeException("Stub!");
    }

    public TimeZoneFormat freeze()
    {
        throw new RuntimeException("Stub!");
    }

    public TimeZoneFormat cloneAsThawed()
    {
        throw new RuntimeException("Stub!");
    }

    public volatile Object cloneAsThawed()
    {
        return cloneAsThawed();
    }

    public volatile Object freeze()
    {
        return freeze();
    }
}
