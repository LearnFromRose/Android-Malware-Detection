// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   TimeZone.java

package android.icu.util;

import java.io.Serializable;
import java.util.*;

// Referenced classes of package android.icu.util:
//            Freezable, ULocale

public abstract class TimeZone
    implements Serializable, Cloneable, Freezable
{
    public static final class SystemTimeZoneType extends Enum
    {

        public static SystemTimeZoneType[] values()
        {
            return (SystemTimeZoneType[])$VALUES.clone();
        }

        public static SystemTimeZoneType valueOf(String name)
        {
            return (SystemTimeZoneType)Enum.valueOf(android/icu/util/TimeZone$SystemTimeZoneType, name);
        }

        public static final SystemTimeZoneType ANY;
        public static final SystemTimeZoneType CANONICAL;
        public static final SystemTimeZoneType CANONICAL_LOCATION;
        private static final SystemTimeZoneType $VALUES[];

        static 
        {
            ANY = new SystemTimeZoneType("ANY", 0);
            CANONICAL = new SystemTimeZoneType("CANONICAL", 1);
            CANONICAL_LOCATION = new SystemTimeZoneType("CANONICAL_LOCATION", 2);
            $VALUES = (new SystemTimeZoneType[] {
                ANY, CANONICAL, CANONICAL_LOCATION
            });
        }

        private SystemTimeZoneType(String s, int i)
        {
            super(s, i);
        }
    }


    public TimeZone()
    {
        throw new RuntimeException("Stub!");
    }

    public abstract int getOffset(int i, int j, int k, int l, int i1, int j1);

    public int getOffset(long date)
    {
        throw new RuntimeException("Stub!");
    }

    public void getOffset(long date, boolean local, int offsets[])
    {
        throw new RuntimeException("Stub!");
    }

    public abstract void setRawOffset(int i);

    public abstract int getRawOffset();

    public String getID()
    {
        throw new RuntimeException("Stub!");
    }

    public void setID(String ID)
    {
        throw new RuntimeException("Stub!");
    }

    public final String getDisplayName()
    {
        throw new RuntimeException("Stub!");
    }

    public final String getDisplayName(Locale locale)
    {
        throw new RuntimeException("Stub!");
    }

    public final String getDisplayName(ULocale locale)
    {
        throw new RuntimeException("Stub!");
    }

    public final String getDisplayName(boolean daylight, int style)
    {
        throw new RuntimeException("Stub!");
    }

    public String getDisplayName(boolean daylight, int style, Locale locale)
    {
        throw new RuntimeException("Stub!");
    }

    public String getDisplayName(boolean daylight, int style, ULocale locale)
    {
        throw new RuntimeException("Stub!");
    }

    public int getDSTSavings()
    {
        throw new RuntimeException("Stub!");
    }

    public abstract boolean useDaylightTime();

    public boolean observesDaylightTime()
    {
        throw new RuntimeException("Stub!");
    }

    public abstract boolean inDaylightTime(Date date);

    public static TimeZone getTimeZone(String ID)
    {
        throw new RuntimeException("Stub!");
    }

    public static TimeZone getFrozenTimeZone(String ID)
    {
        throw new RuntimeException("Stub!");
    }

    public static TimeZone getTimeZone(String ID, int type)
    {
        throw new RuntimeException("Stub!");
    }

    public static Set getAvailableIDs(SystemTimeZoneType zoneType, String region, Integer rawOffset)
    {
        throw new RuntimeException("Stub!");
    }

    public static String[] getAvailableIDs(int rawOffset)
    {
        throw new RuntimeException("Stub!");
    }

    public static String[] getAvailableIDs(String country)
    {
        throw new RuntimeException("Stub!");
    }

    public static String[] getAvailableIDs()
    {
        throw new RuntimeException("Stub!");
    }

    public static int countEquivalentIDs(String id)
    {
        throw new RuntimeException("Stub!");
    }

    public static String getEquivalentID(String id, int index)
    {
        throw new RuntimeException("Stub!");
    }

    public static TimeZone getDefault()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean hasSameRules(TimeZone other)
    {
        throw new RuntimeException("Stub!");
    }

    public Object clone()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean equals(Object obj)
    {
        throw new RuntimeException("Stub!");
    }

    public int hashCode()
    {
        throw new RuntimeException("Stub!");
    }

    public static String getTZDataVersion()
    {
        throw new RuntimeException("Stub!");
    }

    public static String getCanonicalID(String id)
    {
        throw new RuntimeException("Stub!");
    }

    public static String getCanonicalID(String id, boolean isSystemID[])
    {
        throw new RuntimeException("Stub!");
    }

    public static String getRegion(String id)
    {
        throw new RuntimeException("Stub!");
    }

    public static String getWindowsID(String id)
    {
        throw new RuntimeException("Stub!");
    }

    public static String getIDForWindowsID(String winid, String region)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isFrozen()
    {
        throw new RuntimeException("Stub!");
    }

    public TimeZone freeze()
    {
        throw new RuntimeException("Stub!");
    }

    public TimeZone cloneAsThawed()
    {
        throw new RuntimeException("Stub!");
    }

    public volatile Object cloneAsThawed()
    {
        return cloneAsThawed();
    }

    public volatile Object freeze()
    {
        return freeze();
    }

    public static final int GENERIC_LOCATION = 7;
    public static final TimeZone GMT_ZONE = null;
    public static final int LONG = 1;
    public static final int LONG_GENERIC = 3;
    public static final int LONG_GMT = 5;
    public static final int SHORT = 0;
    public static final int SHORT_COMMONLY_USED = 6;
    public static final int SHORT_GENERIC = 2;
    public static final int SHORT_GMT = 4;
    public static final int TIMEZONE_ICU = 0;
    public static final int TIMEZONE_JDK = 1;
    public static final TimeZone UNKNOWN_ZONE = null;
    public static final String UNKNOWN_ZONE_ID = "Etc/Unknown";

}
