// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   CameraCaptureSession.java

package android.hardware.camera2;

import android.hardware.camera2.params.OutputConfiguration;
import android.os.Handler;
import android.view.Surface;
import java.util.List;
import java.util.concurrent.Executor;

// Referenced classes of package android.hardware.camera2:
//            CameraAccessException, CameraDevice, CaptureRequest, CaptureResult, 
//            TotalCaptureResult, CaptureFailure

public abstract class CameraCaptureSession
    implements AutoCloseable
{
    public static abstract class StateCallback
    {

        public abstract void onConfigured(CameraCaptureSession cameracapturesession);

        public abstract void onConfigureFailed(CameraCaptureSession cameracapturesession);

        public void onReady(CameraCaptureSession session)
        {
            throw new RuntimeException("Stub!");
        }

        public void onActive(CameraCaptureSession session)
        {
            throw new RuntimeException("Stub!");
        }

        public void onCaptureQueueEmpty(CameraCaptureSession session)
        {
            throw new RuntimeException("Stub!");
        }

        public void onClosed(CameraCaptureSession session)
        {
            throw new RuntimeException("Stub!");
        }

        public void onSurfacePrepared(CameraCaptureSession session, Surface surface)
        {
            throw new RuntimeException("Stub!");
        }

        public StateCallback()
        {
            throw new RuntimeException("Stub!");
        }
    }

    public static abstract class CaptureCallback
    {

        public void onCaptureStarted(CameraCaptureSession session, CaptureRequest request, long timestamp, long frameNumber)
        {
            throw new RuntimeException("Stub!");
        }

        public void onCaptureProgressed(CameraCaptureSession session, CaptureRequest request, CaptureResult partialResult)
        {
            throw new RuntimeException("Stub!");
        }

        public void onCaptureCompleted(CameraCaptureSession session, CaptureRequest request, TotalCaptureResult result)
        {
            throw new RuntimeException("Stub!");
        }

        public void onCaptureFailed(CameraCaptureSession session, CaptureRequest request, CaptureFailure failure)
        {
            throw new RuntimeException("Stub!");
        }

        public void onCaptureSequenceCompleted(CameraCaptureSession session, int sequenceId, long frameNumber)
        {
            throw new RuntimeException("Stub!");
        }

        public void onCaptureSequenceAborted(CameraCaptureSession session, int sequenceId)
        {
            throw new RuntimeException("Stub!");
        }

        public void onCaptureBufferLost(CameraCaptureSession session, CaptureRequest request, Surface target, long frameNumber)
        {
            throw new RuntimeException("Stub!");
        }

        public CaptureCallback()
        {
            throw new RuntimeException("Stub!");
        }
    }


    public CameraCaptureSession()
    {
        throw new RuntimeException("Stub!");
    }

    public abstract CameraDevice getDevice();

    public abstract void prepare(Surface surface)
        throws CameraAccessException;

    public abstract void finalizeOutputConfigurations(List list)
        throws CameraAccessException;

    public abstract int capture(CaptureRequest capturerequest, CaptureCallback capturecallback, Handler handler)
        throws CameraAccessException;

    public int captureSingleRequest(CaptureRequest request, Executor executor, CaptureCallback listener)
        throws CameraAccessException
    {
        throw new RuntimeException("Stub!");
    }

    public abstract int captureBurst(List list, CaptureCallback capturecallback, Handler handler)
        throws CameraAccessException;

    public int captureBurstRequests(List requests, Executor executor, CaptureCallback listener)
        throws CameraAccessException
    {
        throw new RuntimeException("Stub!");
    }

    public abstract int setRepeatingRequest(CaptureRequest capturerequest, CaptureCallback capturecallback, Handler handler)
        throws CameraAccessException;

    public int setSingleRepeatingRequest(CaptureRequest request, Executor executor, CaptureCallback listener)
        throws CameraAccessException
    {
        throw new RuntimeException("Stub!");
    }

    public abstract int setRepeatingBurst(List list, CaptureCallback capturecallback, Handler handler)
        throws CameraAccessException;

    public int setRepeatingBurstRequests(List requests, Executor executor, CaptureCallback listener)
        throws CameraAccessException
    {
        throw new RuntimeException("Stub!");
    }

    public abstract void stopRepeating()
        throws CameraAccessException;

    public abstract void abortCaptures()
        throws CameraAccessException;

    public abstract boolean isReprocessable();

    public abstract Surface getInputSurface();

    public void updateOutputConfiguration(OutputConfiguration config)
        throws CameraAccessException
    {
        throw new RuntimeException("Stub!");
    }

    public abstract void close();
}
