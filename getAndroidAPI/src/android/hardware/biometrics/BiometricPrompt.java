// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   BiometricPrompt.java

package android.hardware.biometrics;

import android.content.Context;
import android.content.DialogInterface;
import android.os.CancellationSignal;
import java.security.Signature;
import java.util.concurrent.Executor;
import javax.crypto.Cipher;
import javax.crypto.Mac;

public class BiometricPrompt
{
    public static final class CryptoObject
    {

        public Signature getSignature()
        {
            throw new RuntimeException("Stub!");
        }

        public Cipher getCipher()
        {
            throw new RuntimeException("Stub!");
        }

        public Mac getMac()
        {
            throw new RuntimeException("Stub!");
        }

        public CryptoObject(Signature signature)
        {
            throw new RuntimeException("Stub!");
        }

        public CryptoObject(Cipher cipher)
        {
            throw new RuntimeException("Stub!");
        }

        public CryptoObject(Mac mac)
        {
            throw new RuntimeException("Stub!");
        }
    }

    public static class Builder
    {

        public Builder setTitle(CharSequence title)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setSubtitle(CharSequence subtitle)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setDescription(CharSequence description)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setNegativeButton(CharSequence text, Executor executor, android.content.DialogInterface.OnClickListener listener)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setConfirmationRequired(boolean requireConfirmation)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setDeviceCredentialAllowed(boolean allowed)
        {
            throw new RuntimeException("Stub!");
        }

        public BiometricPrompt build()
        {
            throw new RuntimeException("Stub!");
        }

        public Builder(Context context)
        {
            throw new RuntimeException("Stub!");
        }
    }

    public static class AuthenticationResult
    {

        public CryptoObject getCryptoObject()
        {
            throw new RuntimeException("Stub!");
        }

        AuthenticationResult(CryptoObject crypto)
        {
            throw new RuntimeException("Stub!");
        }
    }

    public static abstract class AuthenticationCallback
    {

        public void onAuthenticationError(int errorCode, CharSequence errString)
        {
            throw new RuntimeException("Stub!");
        }

        public void onAuthenticationHelp(int helpCode, CharSequence helpString)
        {
            throw new RuntimeException("Stub!");
        }

        public void onAuthenticationSucceeded(AuthenticationResult result)
        {
            throw new RuntimeException("Stub!");
        }

        public void onAuthenticationFailed()
        {
            throw new RuntimeException("Stub!");
        }

        public AuthenticationCallback()
        {
            throw new RuntimeException("Stub!");
        }
    }


    BiometricPrompt()
    {
        throw new RuntimeException("Stub!");
    }

    public void authenticate(CryptoObject crypto, CancellationSignal cancel, Executor executor, AuthenticationCallback callback)
    {
        throw new RuntimeException("Stub!");
    }

    public void authenticate(CancellationSignal cancel, Executor executor, AuthenticationCallback callback)
    {
        throw new RuntimeException("Stub!");
    }

    public static final int BIOMETRIC_ACQUIRED_GOOD = 0;
    public static final int BIOMETRIC_ACQUIRED_IMAGER_DIRTY = 3;
    public static final int BIOMETRIC_ACQUIRED_INSUFFICIENT = 2;
    public static final int BIOMETRIC_ACQUIRED_PARTIAL = 1;
    public static final int BIOMETRIC_ACQUIRED_TOO_FAST = 5;
    public static final int BIOMETRIC_ACQUIRED_TOO_SLOW = 4;
    public static final int BIOMETRIC_ERROR_CANCELED = 5;
    public static final int BIOMETRIC_ERROR_HW_NOT_PRESENT = 12;
    public static final int BIOMETRIC_ERROR_HW_UNAVAILABLE = 1;
    public static final int BIOMETRIC_ERROR_LOCKOUT = 7;
    public static final int BIOMETRIC_ERROR_LOCKOUT_PERMANENT = 9;
    public static final int BIOMETRIC_ERROR_NO_BIOMETRICS = 11;
    public static final int BIOMETRIC_ERROR_NO_DEVICE_CREDENTIAL = 14;
    public static final int BIOMETRIC_ERROR_NO_SPACE = 4;
    public static final int BIOMETRIC_ERROR_TIMEOUT = 3;
    public static final int BIOMETRIC_ERROR_UNABLE_TO_PROCESS = 2;
    public static final int BIOMETRIC_ERROR_USER_CANCELED = 10;
    public static final int BIOMETRIC_ERROR_VENDOR = 8;
}
