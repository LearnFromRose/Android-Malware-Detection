// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   AsyncTask.java

package android.os;

import java.util.concurrent.*;

public abstract class AsyncTask
{
    public static final class Status extends Enum
    {

        public static Status[] values()
        {
            return (Status[])$VALUES.clone();
        }

        public static Status valueOf(String name)
        {
            return (Status)Enum.valueOf(android/os/AsyncTask$Status, name);
        }

        public static final Status PENDING;
        public static final Status RUNNING;
        public static final Status FINISHED;
        private static final Status $VALUES[];

        static 
        {
            PENDING = new Status("PENDING", 0);
            RUNNING = new Status("RUNNING", 1);
            FINISHED = new Status("FINISHED", 2);
            $VALUES = (new Status[] {
                PENDING, RUNNING, FINISHED
            });
        }

        private Status(String s, int i)
        {
            super(s, i);
        }
    }


    public AsyncTask()
    {
        throw new RuntimeException("Stub!");
    }

    public final Status getStatus()
    {
        throw new RuntimeException("Stub!");
    }

    protected transient abstract Object doInBackground(Object aobj[]);

    protected void onPreExecute()
    {
        throw new RuntimeException("Stub!");
    }

    protected void onPostExecute(Object result)
    {
        throw new RuntimeException("Stub!");
    }

    protected transient void onProgressUpdate(Object values[])
    {
        throw new RuntimeException("Stub!");
    }

    protected void onCancelled(Object result)
    {
        throw new RuntimeException("Stub!");
    }

    protected void onCancelled()
    {
        throw new RuntimeException("Stub!");
    }

    public final boolean isCancelled()
    {
        throw new RuntimeException("Stub!");
    }

    public final boolean cancel(boolean mayInterruptIfRunning)
    {
        throw new RuntimeException("Stub!");
    }

    public final Object get()
        throws ExecutionException, InterruptedException
    {
        throw new RuntimeException("Stub!");
    }

    public final Object get(long timeout, TimeUnit unit)
        throws ExecutionException, InterruptedException, TimeoutException
    {
        throw new RuntimeException("Stub!");
    }

    public final transient AsyncTask execute(Object params[])
    {
        throw new RuntimeException("Stub!");
    }

    public final transient AsyncTask executeOnExecutor(Executor exec, Object params[])
    {
        throw new RuntimeException("Stub!");
    }

    public static void execute(Runnable runnable)
    {
        throw new RuntimeException("Stub!");
    }

    protected final transient void publishProgress(Object values[])
    {
        throw new RuntimeException("Stub!");
    }

    public static final Executor SERIAL_EXECUTOR = null;
    public static final Executor THREAD_POOL_EXECUTOR = null;

}
