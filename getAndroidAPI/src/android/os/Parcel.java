// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   Parcel.java

package android.os;

import android.util.*;
import java.io.FileDescriptor;
import java.io.Serializable;
import java.util.*;

// Referenced classes of package android.os:
//            Parcelable, IBinder, IInterface, Bundle, 
//            PersistableBundle, ParcelFileDescriptor

public final class Parcel
{

    Parcel(long nativePtr)
    {
        throw new RuntimeException("Stub!");
    }

    public static Parcel obtain()
    {
        throw new RuntimeException("Stub!");
    }

    public void recycle()
    {
        throw new RuntimeException("Stub!");
    }

    public int dataSize()
    {
        throw new RuntimeException("Stub!");
    }

    public int dataAvail()
    {
        throw new RuntimeException("Stub!");
    }

    public int dataPosition()
    {
        throw new RuntimeException("Stub!");
    }

    public int dataCapacity()
    {
        throw new RuntimeException("Stub!");
    }

    public void setDataSize(int size)
    {
        throw new RuntimeException("Stub!");
    }

    public void setDataPosition(int pos)
    {
        throw new RuntimeException("Stub!");
    }

    public void setDataCapacity(int size)
    {
        throw new RuntimeException("Stub!");
    }

    public byte[] marshall()
    {
        throw new RuntimeException("Stub!");
    }

    public void unmarshall(byte data[], int offset, int length)
    {
        throw new RuntimeException("Stub!");
    }

    public void appendFrom(Parcel parcel, int offset, int length)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean hasFileDescriptors()
    {
        throw new RuntimeException("Stub!");
    }

    public void writeInterfaceToken(String interfaceName)
    {
        throw new RuntimeException("Stub!");
    }

    public void enforceInterface(String interfaceName)
    {
        throw new RuntimeException("Stub!");
    }

    public void writeByteArray(byte b[])
    {
        throw new RuntimeException("Stub!");
    }

    public void writeByteArray(byte b[], int offset, int len)
    {
        throw new RuntimeException("Stub!");
    }

    public void writeInt(int val)
    {
        throw new RuntimeException("Stub!");
    }

    public void writeLong(long val)
    {
        throw new RuntimeException("Stub!");
    }

    public void writeFloat(float val)
    {
        throw new RuntimeException("Stub!");
    }

    public void writeDouble(double val)
    {
        throw new RuntimeException("Stub!");
    }

    public void writeString(String val)
    {
        throw new RuntimeException("Stub!");
    }

    public void writeBoolean(boolean val)
    {
        throw new RuntimeException("Stub!");
    }

    public void writeStrongBinder(IBinder val)
    {
        throw new RuntimeException("Stub!");
    }

    public void writeStrongInterface(IInterface val)
    {
        throw new RuntimeException("Stub!");
    }

    public void writeFileDescriptor(FileDescriptor val)
    {
        throw new RuntimeException("Stub!");
    }

    public void writeByte(byte val)
    {
        throw new RuntimeException("Stub!");
    }

    public void writeMap(Map val)
    {
        throw new RuntimeException("Stub!");
    }

    public void writeTypedArrayMap(ArrayMap val, int parcelableFlags)
    {
        throw new RuntimeException("Stub!");
    }

    public void writeBundle(Bundle val)
    {
        throw new RuntimeException("Stub!");
    }

    public void writePersistableBundle(PersistableBundle val)
    {
        throw new RuntimeException("Stub!");
    }

    public void writeSize(Size val)
    {
        throw new RuntimeException("Stub!");
    }

    public void writeSizeF(SizeF val)
    {
        throw new RuntimeException("Stub!");
    }

    public void writeList(List val)
    {
        throw new RuntimeException("Stub!");
    }

    public void writeArray(Object val[])
    {
        throw new RuntimeException("Stub!");
    }

    public void writeSparseArray(SparseArray val)
    {
        throw new RuntimeException("Stub!");
    }

    public void writeSparseBooleanArray(SparseBooleanArray val)
    {
        throw new RuntimeException("Stub!");
    }

    public void writeBooleanArray(boolean val[])
    {
        throw new RuntimeException("Stub!");
    }

    public boolean[] createBooleanArray()
    {
        throw new RuntimeException("Stub!");
    }

    public void readBooleanArray(boolean val[])
    {
        throw new RuntimeException("Stub!");
    }

    public void writeCharArray(char val[])
    {
        throw new RuntimeException("Stub!");
    }

    public char[] createCharArray()
    {
        throw new RuntimeException("Stub!");
    }

    public void readCharArray(char val[])
    {
        throw new RuntimeException("Stub!");
    }

    public void writeIntArray(int val[])
    {
        throw new RuntimeException("Stub!");
    }

    public int[] createIntArray()
    {
        throw new RuntimeException("Stub!");
    }

    public void readIntArray(int val[])
    {
        throw new RuntimeException("Stub!");
    }

    public void writeLongArray(long val[])
    {
        throw new RuntimeException("Stub!");
    }

    public long[] createLongArray()
    {
        throw new RuntimeException("Stub!");
    }

    public void readLongArray(long val[])
    {
        throw new RuntimeException("Stub!");
    }

    public void writeFloatArray(float val[])
    {
        throw new RuntimeException("Stub!");
    }

    public float[] createFloatArray()
    {
        throw new RuntimeException("Stub!");
    }

    public void readFloatArray(float val[])
    {
        throw new RuntimeException("Stub!");
    }

    public void writeDoubleArray(double val[])
    {
        throw new RuntimeException("Stub!");
    }

    public double[] createDoubleArray()
    {
        throw new RuntimeException("Stub!");
    }

    public void readDoubleArray(double val[])
    {
        throw new RuntimeException("Stub!");
    }

    public void writeStringArray(String val[])
    {
        throw new RuntimeException("Stub!");
    }

    public String[] createStringArray()
    {
        throw new RuntimeException("Stub!");
    }

    public void readStringArray(String val[])
    {
        throw new RuntimeException("Stub!");
    }

    public void writeBinderArray(IBinder val[])
    {
        throw new RuntimeException("Stub!");
    }

    public IBinder[] createBinderArray()
    {
        throw new RuntimeException("Stub!");
    }

    public void readBinderArray(IBinder val[])
    {
        throw new RuntimeException("Stub!");
    }

    public void writeTypedList(List val)
    {
        throw new RuntimeException("Stub!");
    }

    public void writeTypedSparseArray(SparseArray val, int parcelableFlags)
    {
        throw new RuntimeException("Stub!");
    }

    public void writeStringList(List val)
    {
        throw new RuntimeException("Stub!");
    }

    public void writeBinderList(List val)
    {
        throw new RuntimeException("Stub!");
    }

    public void writeParcelableList(List val, int flags)
    {
        throw new RuntimeException("Stub!");
    }

    public void writeTypedArray(Parcelable val[], int parcelableFlags)
    {
        throw new RuntimeException("Stub!");
    }

    public void writeTypedObject(Parcelable val, int parcelableFlags)
    {
        throw new RuntimeException("Stub!");
    }

    public void writeValue(Object v)
    {
        throw new RuntimeException("Stub!");
    }

    public void writeParcelable(Parcelable p, int parcelableFlags)
    {
        throw new RuntimeException("Stub!");
    }

    public void writeSerializable(Serializable s)
    {
        throw new RuntimeException("Stub!");
    }

    public void writeException(Exception e)
    {
        throw new RuntimeException("Stub!");
    }

    public void writeNoException()
    {
        throw new RuntimeException("Stub!");
    }

    public void readException()
    {
        throw new RuntimeException("Stub!");
    }

    public void readException(int code, String msg)
    {
        throw new RuntimeException("Stub!");
    }

    public int readInt()
    {
        throw new RuntimeException("Stub!");
    }

    public long readLong()
    {
        throw new RuntimeException("Stub!");
    }

    public float readFloat()
    {
        throw new RuntimeException("Stub!");
    }

    public double readDouble()
    {
        throw new RuntimeException("Stub!");
    }

    public String readString()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean readBoolean()
    {
        throw new RuntimeException("Stub!");
    }

    public IBinder readStrongBinder()
    {
        throw new RuntimeException("Stub!");
    }

    public ParcelFileDescriptor readFileDescriptor()
    {
        throw new RuntimeException("Stub!");
    }

    public byte readByte()
    {
        throw new RuntimeException("Stub!");
    }

    public void readMap(Map outVal, ClassLoader loader)
    {
        throw new RuntimeException("Stub!");
    }

    public void readList(List outVal, ClassLoader loader)
    {
        throw new RuntimeException("Stub!");
    }

    public HashMap readHashMap(ClassLoader loader)
    {
        throw new RuntimeException("Stub!");
    }

    public Bundle readBundle()
    {
        throw new RuntimeException("Stub!");
    }

    public Bundle readBundle(ClassLoader loader)
    {
        throw new RuntimeException("Stub!");
    }

    public PersistableBundle readPersistableBundle()
    {
        throw new RuntimeException("Stub!");
    }

    public PersistableBundle readPersistableBundle(ClassLoader loader)
    {
        throw new RuntimeException("Stub!");
    }

    public Size readSize()
    {
        throw new RuntimeException("Stub!");
    }

    public SizeF readSizeF()
    {
        throw new RuntimeException("Stub!");
    }

    public byte[] createByteArray()
    {
        throw new RuntimeException("Stub!");
    }

    public void readByteArray(byte val[])
    {
        throw new RuntimeException("Stub!");
    }

    public ArrayList readArrayList(ClassLoader loader)
    {
        throw new RuntimeException("Stub!");
    }

    public Object[] readArray(ClassLoader loader)
    {
        throw new RuntimeException("Stub!");
    }

    public SparseArray readSparseArray(ClassLoader loader)
    {
        throw new RuntimeException("Stub!");
    }

    public SparseBooleanArray readSparseBooleanArray()
    {
        throw new RuntimeException("Stub!");
    }

    public ArrayList createTypedArrayList(Parcelable.Creator c)
    {
        throw new RuntimeException("Stub!");
    }

    public void readTypedList(List list, Parcelable.Creator c)
    {
        throw new RuntimeException("Stub!");
    }

    public SparseArray createTypedSparseArray(Parcelable.Creator creator)
    {
        throw new RuntimeException("Stub!");
    }

    public ArrayMap createTypedArrayMap(Parcelable.Creator creator)
    {
        throw new RuntimeException("Stub!");
    }

    public ArrayList createStringArrayList()
    {
        throw new RuntimeException("Stub!");
    }

    public ArrayList createBinderArrayList()
    {
        throw new RuntimeException("Stub!");
    }

    public void readStringList(List list)
    {
        throw new RuntimeException("Stub!");
    }

    public void readBinderList(List list)
    {
        throw new RuntimeException("Stub!");
    }

    public List readParcelableList(List list, ClassLoader cl)
    {
        throw new RuntimeException("Stub!");
    }

    public Object[] createTypedArray(Parcelable.Creator c)
    {
        throw new RuntimeException("Stub!");
    }

    public void readTypedArray(Object val[], Parcelable.Creator c)
    {
        throw new RuntimeException("Stub!");
    }

    public Object readTypedObject(Parcelable.Creator c)
    {
        throw new RuntimeException("Stub!");
    }

    public void writeParcelableArray(Parcelable value[], int parcelableFlags)
    {
        throw new RuntimeException("Stub!");
    }

    public Object readValue(ClassLoader loader)
    {
        throw new RuntimeException("Stub!");
    }

    public Parcelable readParcelable(ClassLoader loader)
    {
        throw new RuntimeException("Stub!");
    }

    public Parcelable[] readParcelableArray(ClassLoader loader)
    {
        throw new RuntimeException("Stub!");
    }

    public Serializable readSerializable()
    {
        throw new RuntimeException("Stub!");
    }

    protected void finalize()
        throws Throwable
    {
        throw new RuntimeException("Stub!");
    }

    public static final Parcelable.Creator STRING_CREATOR = null;

}
