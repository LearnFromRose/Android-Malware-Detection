// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   Debug.java

package android.os;

import java.io.FileDescriptor;
import java.io.IOException;
import java.util.Map;

// Referenced classes of package android.os:
//            Parcelable, Parcel

public final class Debug
{
    public static class MemoryInfo
        implements Parcelable
    {

        public int getTotalPss()
        {
            throw new RuntimeException("Stub!");
        }

        public int getTotalSwappablePss()
        {
            throw new RuntimeException("Stub!");
        }

        public int getTotalPrivateDirty()
        {
            throw new RuntimeException("Stub!");
        }

        public int getTotalSharedDirty()
        {
            throw new RuntimeException("Stub!");
        }

        public int getTotalPrivateClean()
        {
            throw new RuntimeException("Stub!");
        }

        public int getTotalSharedClean()
        {
            throw new RuntimeException("Stub!");
        }

        public String getMemoryStat(String statName)
        {
            throw new RuntimeException("Stub!");
        }

        public Map getMemoryStats()
        {
            throw new RuntimeException("Stub!");
        }

        public int describeContents()
        {
            throw new RuntimeException("Stub!");
        }

        public void writeToParcel(Parcel dest, int flags)
        {
            throw new RuntimeException("Stub!");
        }

        public void readFromParcel(Parcel source)
        {
            throw new RuntimeException("Stub!");
        }

        public static final Parcelable.Creator CREATOR = null;
        public int dalvikPrivateDirty;
        public int dalvikPss;
        public int dalvikSharedDirty;
        public int nativePrivateDirty;
        public int nativePss;
        public int nativeSharedDirty;
        public int otherPrivateDirty;
        public int otherPss;
        public int otherSharedDirty;


        public MemoryInfo()
        {
            throw new RuntimeException("Stub!");
        }
    }

    /**
     * @deprecated Class InstructionCount is deprecated
     */

    public static class InstructionCount
    {

        /**
         * @deprecated Method resetAndStart is deprecated
         */

        public boolean resetAndStart()
        {
            throw new RuntimeException("Stub!");
        }

        /**
         * @deprecated Method collect is deprecated
         */

        public boolean collect()
        {
            throw new RuntimeException("Stub!");
        }

        /**
         * @deprecated Method globalTotal is deprecated
         */

        public int globalTotal()
        {
            throw new RuntimeException("Stub!");
        }

        /**
         * @deprecated Method globalMethodInvocations is deprecated
         */

        public int globalMethodInvocations()
        {
            throw new RuntimeException("Stub!");
        }

        /**
         * @deprecated Method InstructionCount is deprecated
         */

        public InstructionCount()
        {
            throw new RuntimeException("Stub!");
        }
    }


    Debug()
    {
        throw new RuntimeException("Stub!");
    }

    public static void waitForDebugger()
    {
        throw new RuntimeException("Stub!");
    }

    public static boolean waitingForDebugger()
    {
        throw new RuntimeException("Stub!");
    }

    public static boolean isDebuggerConnected()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method changeDebugPort is deprecated
     */

    public static void changeDebugPort(int port)
    {
        throw new RuntimeException("Stub!");
    }

    public static void startNativeTracing()
    {
        throw new RuntimeException("Stub!");
    }

    public static void stopNativeTracing()
    {
        throw new RuntimeException("Stub!");
    }

    public static void enableEmulatorTraceOutput()
    {
        throw new RuntimeException("Stub!");
    }

    public static void startMethodTracing()
    {
        throw new RuntimeException("Stub!");
    }

    public static void startMethodTracing(String tracePath)
    {
        throw new RuntimeException("Stub!");
    }

    public static void startMethodTracing(String tracePath, int bufferSize)
    {
        throw new RuntimeException("Stub!");
    }

    public static void startMethodTracing(String tracePath, int bufferSize, int flags)
    {
        throw new RuntimeException("Stub!");
    }

    public static void startMethodTracingSampling(String tracePath, int bufferSize, int intervalUs)
    {
        throw new RuntimeException("Stub!");
    }

    public static void stopMethodTracing()
    {
        throw new RuntimeException("Stub!");
    }

    public static long threadCpuTimeNanos()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method startAllocCounting is deprecated
     */

    public static void startAllocCounting()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method stopAllocCounting is deprecated
     */

    public static void stopAllocCounting()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method getGlobalAllocCount is deprecated
     */

    public static int getGlobalAllocCount()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method resetGlobalAllocCount is deprecated
     */

    public static void resetGlobalAllocCount()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method getGlobalAllocSize is deprecated
     */

    public static int getGlobalAllocSize()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method resetGlobalAllocSize is deprecated
     */

    public static void resetGlobalAllocSize()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method getGlobalFreedCount is deprecated
     */

    public static int getGlobalFreedCount()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method resetGlobalFreedCount is deprecated
     */

    public static void resetGlobalFreedCount()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method getGlobalFreedSize is deprecated
     */

    public static int getGlobalFreedSize()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method resetGlobalFreedSize is deprecated
     */

    public static void resetGlobalFreedSize()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method getGlobalGcInvocationCount is deprecated
     */

    public static int getGlobalGcInvocationCount()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method resetGlobalGcInvocationCount is deprecated
     */

    public static void resetGlobalGcInvocationCount()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method getGlobalClassInitCount is deprecated
     */

    public static int getGlobalClassInitCount()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method resetGlobalClassInitCount is deprecated
     */

    public static void resetGlobalClassInitCount()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method getGlobalClassInitTime is deprecated
     */

    public static int getGlobalClassInitTime()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method resetGlobalClassInitTime is deprecated
     */

    public static void resetGlobalClassInitTime()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method getGlobalExternalAllocCount is deprecated
     */

    public static int getGlobalExternalAllocCount()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method resetGlobalExternalAllocSize is deprecated
     */

    public static void resetGlobalExternalAllocSize()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method resetGlobalExternalAllocCount is deprecated
     */

    public static void resetGlobalExternalAllocCount()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method getGlobalExternalAllocSize is deprecated
     */

    public static int getGlobalExternalAllocSize()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method getGlobalExternalFreedCount is deprecated
     */

    public static int getGlobalExternalFreedCount()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method resetGlobalExternalFreedCount is deprecated
     */

    public static void resetGlobalExternalFreedCount()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method getGlobalExternalFreedSize is deprecated
     */

    public static int getGlobalExternalFreedSize()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method resetGlobalExternalFreedSize is deprecated
     */

    public static void resetGlobalExternalFreedSize()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method getThreadAllocCount is deprecated
     */

    public static int getThreadAllocCount()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method resetThreadAllocCount is deprecated
     */

    public static void resetThreadAllocCount()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method getThreadAllocSize is deprecated
     */

    public static int getThreadAllocSize()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method resetThreadAllocSize is deprecated
     */

    public static void resetThreadAllocSize()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method getThreadExternalAllocCount is deprecated
     */

    public static int getThreadExternalAllocCount()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method resetThreadExternalAllocCount is deprecated
     */

    public static void resetThreadExternalAllocCount()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method getThreadExternalAllocSize is deprecated
     */

    public static int getThreadExternalAllocSize()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method resetThreadExternalAllocSize is deprecated
     */

    public static void resetThreadExternalAllocSize()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method getThreadGcInvocationCount is deprecated
     */

    public static int getThreadGcInvocationCount()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method resetThreadGcInvocationCount is deprecated
     */

    public static void resetThreadGcInvocationCount()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method resetAllCounts is deprecated
     */

    public static void resetAllCounts()
    {
        throw new RuntimeException("Stub!");
    }

    public static String getRuntimeStat(String statName)
    {
        throw new RuntimeException("Stub!");
    }

    public static Map getRuntimeStats()
    {
        throw new RuntimeException("Stub!");
    }

    public static native long getNativeHeapSize();

    public static native long getNativeHeapAllocatedSize();

    public static native long getNativeHeapFreeSize();

    public static native void getMemoryInfo(MemoryInfo memoryinfo);

    public static native long getPss();

    /**
     * @deprecated Method setAllocationLimit is deprecated
     */

    public static int setAllocationLimit(int limit)
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method setGlobalAllocationLimit is deprecated
     */

    public static int setGlobalAllocationLimit(int limit)
    {
        throw new RuntimeException("Stub!");
    }

    public static void printLoadedClasses(int flags)
    {
        throw new RuntimeException("Stub!");
    }

    public static int getLoadedClassCount()
    {
        throw new RuntimeException("Stub!");
    }

    public static void dumpHprofData(String fileName)
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public static native int getBinderSentTransactions();

    public static native int getBinderReceivedTransactions();

    public static native int getBinderLocalObjectCount();

    public static native int getBinderProxyObjectCount();

    public static native int getBinderDeathObjectCount();

    public static boolean dumpService(String name, FileDescriptor fd, String args[])
    {
        throw new RuntimeException("Stub!");
    }

    public static void attachJvmtiAgent(String library, String options, ClassLoader classLoader)
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public static final int SHOW_CLASSLOADER = 2;
    public static final int SHOW_FULL_DETAIL = 1;
    public static final int SHOW_INITIALIZED = 4;
    /**
     * @deprecated Field TRACE_COUNT_ALLOCS is deprecated
     */
    public static final int TRACE_COUNT_ALLOCS = 1;
}
