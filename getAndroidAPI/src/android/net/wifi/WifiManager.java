// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   WifiManager.java

package android.net.wifi;

import android.net.DhcpInfo;
import android.net.wifi.hotspot2.PasspointConfiguration;
import android.os.Handler;
import android.os.WorkSource;
import java.net.InetAddress;
import java.util.List;

// Referenced classes of package android.net.wifi:
//            WifiConfiguration, WifiInfo, WpsInfo

public class WifiManager
{
    /**
     * @deprecated Class WpsCallback is deprecated
     */

    public static abstract class WpsCallback
    {

        /**
         * @deprecated Method onStarted is deprecated
         */

        public abstract void onStarted(String s);

        /**
         * @deprecated Method onSucceeded is deprecated
         */

        public abstract void onSucceeded();

        /**
         * @deprecated Method onFailed is deprecated
         */

        public abstract void onFailed(int i);

        /**
         * @deprecated Method WpsCallback is deprecated
         */

        public WpsCallback()
        {
            throw new RuntimeException("Stub!");
        }
    }

    public class WifiLock
    {

        public void acquire()
        {
            throw new RuntimeException("Stub!");
        }

        public void release()
        {
            throw new RuntimeException("Stub!");
        }

        public void setReferenceCounted(boolean refCounted)
        {
            throw new RuntimeException("Stub!");
        }

        public boolean isHeld()
        {
            throw new RuntimeException("Stub!");
        }

        public void setWorkSource(WorkSource ws)
        {
            throw new RuntimeException("Stub!");
        }

        public String toString()
        {
            throw new RuntimeException("Stub!");
        }

        protected void finalize()
            throws Throwable
        {
            throw new RuntimeException("Stub!");
        }

        final WifiManager this$0;

        WifiLock(int lockType, String tag)
        {
            this.this$0 = WifiManager.this;
            super();
            throw new RuntimeException("Stub!");
        }
    }

    public class MulticastLock
    {

        public void acquire()
        {
            throw new RuntimeException("Stub!");
        }

        public void release()
        {
            throw new RuntimeException("Stub!");
        }

        public void setReferenceCounted(boolean refCounted)
        {
            throw new RuntimeException("Stub!");
        }

        public boolean isHeld()
        {
            throw new RuntimeException("Stub!");
        }

        public String toString()
        {
            throw new RuntimeException("Stub!");
        }

        protected void finalize()
            throws Throwable
        {
            throw new RuntimeException("Stub!");
        }

        final WifiManager this$0;

        MulticastLock(String tag)
        {
            this.this$0 = WifiManager.this;
            super();
            throw new RuntimeException("Stub!");
        }
    }

    public class LocalOnlyHotspotReservation
        implements AutoCloseable
    {

        public WifiConfiguration getWifiConfiguration()
        {
            throw new RuntimeException("Stub!");
        }

        public void close()
        {
            throw new RuntimeException("Stub!");
        }

        protected void finalize()
            throws Throwable
        {
            throw new RuntimeException("Stub!");
        }

        final WifiManager this$0;

        LocalOnlyHotspotReservation(WifiConfiguration config)
        {
            this.this$0 = WifiManager.this;
            super();
            throw new RuntimeException("Stub!");
        }
    }

    public static class LocalOnlyHotspotCallback
    {

        public void onStarted(LocalOnlyHotspotReservation reservation)
        {
            throw new RuntimeException("Stub!");
        }

        public void onStopped()
        {
            throw new RuntimeException("Stub!");
        }

        public void onFailed(int reason)
        {
            throw new RuntimeException("Stub!");
        }

        public static final int ERROR_GENERIC = 2;
        public static final int ERROR_INCOMPATIBLE_MODE = 3;
        public static final int ERROR_NO_CHANNEL = 1;
        public static final int ERROR_TETHERING_DISALLOWED = 4;

        public LocalOnlyHotspotCallback()
        {
            throw new RuntimeException("Stub!");
        }
    }


    WifiManager()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method getConfiguredNetworks is deprecated
     */

    public List getConfiguredNetworks()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method addNetwork is deprecated
     */

    public int addNetwork(WifiConfiguration config)
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method updateNetwork is deprecated
     */

    public int updateNetwork(WifiConfiguration config)
    {
        throw new RuntimeException("Stub!");
    }

    public int addNetworkSuggestions(List networkSuggestions)
    {
        throw new RuntimeException("Stub!");
    }

    public int removeNetworkSuggestions(List networkSuggestions)
    {
        throw new RuntimeException("Stub!");
    }

    public int getMaxNumberOfNetworkSuggestionsPerApp()
    {
        throw new RuntimeException("Stub!");
    }

    public void addOrUpdatePasspointConfiguration(PasspointConfiguration config)
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method removePasspointConfiguration is deprecated
     */

    public void removePasspointConfiguration(String fqdn)
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method getPasspointConfigurations is deprecated
     */

    public List getPasspointConfigurations()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method removeNetwork is deprecated
     */

    public boolean removeNetwork(int netId)
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method enableNetwork is deprecated
     */

    public boolean enableNetwork(int netId, boolean attemptConnect)
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method disableNetwork is deprecated
     */

    public boolean disableNetwork(int netId)
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method disconnect is deprecated
     */

    public boolean disconnect()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method reconnect is deprecated
     */

    public boolean reconnect()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method reassociate is deprecated
     */

    public boolean reassociate()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method pingSupplicant is deprecated
     */

    public boolean pingSupplicant()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean is5GHzBandSupported()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isP2pSupported()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method isDeviceToApRttSupported is deprecated
     */

    public boolean isDeviceToApRttSupported()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isPreferredNetworkOffloadSupported()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isTdlsSupported()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isEnhancedPowerReportingSupported()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method startScan is deprecated
     */

    public boolean startScan()
    {
        throw new RuntimeException("Stub!");
    }

    public WifiInfo getConnectionInfo()
    {
        throw new RuntimeException("Stub!");
    }

    public List getScanResults()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method isScanAlwaysAvailable is deprecated
     */

    public boolean isScanAlwaysAvailable()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method saveConfiguration is deprecated
     */

    public boolean saveConfiguration()
    {
        throw new RuntimeException("Stub!");
    }

    public DhcpInfo getDhcpInfo()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method setWifiEnabled is deprecated
     */

    public boolean setWifiEnabled(boolean enabled)
    {
        throw new RuntimeException("Stub!");
    }

    public int getWifiState()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isWifiEnabled()
    {
        throw new RuntimeException("Stub!");
    }

    public static int calculateSignalLevel(int rssi, int numLevels)
    {
        throw new RuntimeException("Stub!");
    }

    public static int compareSignalLevel(int rssiA, int rssiB)
    {
        throw new RuntimeException("Stub!");
    }

    public void startLocalOnlyHotspot(LocalOnlyHotspotCallback callback, Handler handler)
    {
        throw new RuntimeException("Stub!");
    }

    public void setTdlsEnabled(InetAddress remoteIPAddress, boolean enable)
    {
        throw new RuntimeException("Stub!");
    }

    public void setTdlsEnabledWithMacAddress(String remoteMacAddress, boolean enable)
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method startWps is deprecated
     */

    public void startWps(WpsInfo config, WpsCallback listener)
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method cancelWps is deprecated
     */

    public void cancelWps(WpsCallback listener)
    {
        throw new RuntimeException("Stub!");
    }

    public WifiLock createWifiLock(int lockType, String tag)
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method createWifiLock is deprecated
     */

    public WifiLock createWifiLock(String tag)
    {
        throw new RuntimeException("Stub!");
    }

    public MulticastLock createMulticastLock(String tag)
    {
        throw new RuntimeException("Stub!");
    }

    protected void finalize()
        throws Throwable
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isWpa3SaeSupported()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isWpa3SuiteBSupported()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isEnhancedOpenSupported()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isEasyConnectSupported()
    {
        throw new RuntimeException("Stub!");
    }

    public static final String ACTION_PICK_WIFI_NETWORK = "android.net.wifi.PICK_WIFI_NETWORK";
    public static final String ACTION_REQUEST_SCAN_ALWAYS_AVAILABLE = "android.net.wifi.action.REQUEST_SCAN_ALWAYS_AVAILABLE";
    public static final String ACTION_WIFI_NETWORK_SUGGESTION_POST_CONNECTION = "android.net.wifi.action.WIFI_NETWORK_SUGGESTION_POST_CONNECTION";
    /**
     * @deprecated Field ERROR_AUTHENTICATING is deprecated
     */
    public static final int ERROR_AUTHENTICATING = 1;
    /**
     * @deprecated Field EXTRA_BSSID is deprecated
     */
    public static final String EXTRA_BSSID = "bssid";
    public static final String EXTRA_NETWORK_INFO = "networkInfo";
    public static final String EXTRA_NETWORK_SUGGESTION = "android.net.wifi.extra.NETWORK_SUGGESTION";
    public static final String EXTRA_NEW_RSSI = "newRssi";
    /**
     * @deprecated Field EXTRA_NEW_STATE is deprecated
     */
    public static final String EXTRA_NEW_STATE = "newState";
    public static final String EXTRA_PREVIOUS_WIFI_STATE = "previous_wifi_state";
    public static final String EXTRA_RESULTS_UPDATED = "resultsUpdated";
    /**
     * @deprecated Field EXTRA_SUPPLICANT_CONNECTED is deprecated
     */
    public static final String EXTRA_SUPPLICANT_CONNECTED = "connected";
    /**
     * @deprecated Field EXTRA_SUPPLICANT_ERROR is deprecated
     */
    public static final String EXTRA_SUPPLICANT_ERROR = "supplicantError";
    /**
     * @deprecated Field EXTRA_WIFI_INFO is deprecated
     */
    public static final String EXTRA_WIFI_INFO = "wifiInfo";
    public static final String EXTRA_WIFI_STATE = "wifi_state";
    public static final String NETWORK_IDS_CHANGED_ACTION = "android.net.wifi.NETWORK_IDS_CHANGED";
    public static final String NETWORK_STATE_CHANGED_ACTION = "android.net.wifi.STATE_CHANGE";
    public static final String RSSI_CHANGED_ACTION = "android.net.wifi.RSSI_CHANGED";
    public static final String SCAN_RESULTS_AVAILABLE_ACTION = "android.net.wifi.SCAN_RESULTS";
    public static final int STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_DUPLICATE = 3;
    public static final int STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_EXCEEDS_MAX_PER_APP = 4;
    public static final int STATUS_NETWORK_SUGGESTIONS_ERROR_APP_DISALLOWED = 2;
    public static final int STATUS_NETWORK_SUGGESTIONS_ERROR_INTERNAL = 1;
    public static final int STATUS_NETWORK_SUGGESTIONS_ERROR_REMOVE_INVALID = 5;
    public static final int STATUS_NETWORK_SUGGESTIONS_SUCCESS = 0;
    /**
     * @deprecated Field SUPPLICANT_CONNECTION_CHANGE_ACTION is deprecated
     */
    public static final String SUPPLICANT_CONNECTION_CHANGE_ACTION = "android.net.wifi.supplicant.CONNECTION_CHANGE";
    /**
     * @deprecated Field SUPPLICANT_STATE_CHANGED_ACTION is deprecated
     */
    public static final String SUPPLICANT_STATE_CHANGED_ACTION = "android.net.wifi.supplicant.STATE_CHANGE";
    /**
     * @deprecated Field WIFI_MODE_FULL is deprecated
     */
    public static final int WIFI_MODE_FULL = 1;
    public static final int WIFI_MODE_FULL_HIGH_PERF = 3;
    public static final int WIFI_MODE_FULL_LOW_LATENCY = 4;
    /**
     * @deprecated Field WIFI_MODE_SCAN_ONLY is deprecated
     */
    public static final int WIFI_MODE_SCAN_ONLY = 2;
    public static final String WIFI_STATE_CHANGED_ACTION = "android.net.wifi.WIFI_STATE_CHANGED";
    public static final int WIFI_STATE_DISABLED = 1;
    public static final int WIFI_STATE_DISABLING = 0;
    public static final int WIFI_STATE_ENABLED = 3;
    public static final int WIFI_STATE_ENABLING = 2;
    public static final int WIFI_STATE_UNKNOWN = 4;
    /**
     * @deprecated Field WPS_AUTH_FAILURE is deprecated
     */
    public static final int WPS_AUTH_FAILURE = 6;
    /**
     * @deprecated Field WPS_OVERLAP_ERROR is deprecated
     */
    public static final int WPS_OVERLAP_ERROR = 3;
    /**
     * @deprecated Field WPS_TIMED_OUT is deprecated
     */
    public static final int WPS_TIMED_OUT = 7;
    /**
     * @deprecated Field WPS_TKIP_ONLY_PROHIBITED is deprecated
     */
    public static final int WPS_TKIP_ONLY_PROHIBITED = 5;
    /**
     * @deprecated Field WPS_WEP_PROHIBITED is deprecated
     */
    public static final int WPS_WEP_PROHIBITED = 4;
}
