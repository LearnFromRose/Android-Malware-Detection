// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   WifiP2pManager.java

package android.net.wifi.p2p;

import android.content.Context;
import android.net.NetworkInfo;
import android.net.wifi.p2p.nsd.WifiP2pServiceInfo;
import android.net.wifi.p2p.nsd.WifiP2pServiceRequest;
import android.os.Binder;
import android.os.Looper;
import java.util.List;
import java.util.Map;

// Referenced classes of package android.net.wifi.p2p:
//            WifiP2pConfig, WifiP2pDevice, WifiP2pDeviceList, WifiP2pGroup, 
//            WifiP2pInfo

public class WifiP2pManager
{
    public static interface UpnpServiceResponseListener
    {

        public abstract void onUpnpServiceAvailable(List list, WifiP2pDevice wifip2pdevice);
    }

    public static interface ServiceResponseListener
    {

        public abstract void onServiceAvailable(int i, byte abyte0[], WifiP2pDevice wifip2pdevice);
    }

    public static interface PeerListListener
    {

        public abstract void onPeersAvailable(WifiP2pDeviceList wifip2pdevicelist);
    }

    public static interface P2pStateListener
    {

        public abstract void onP2pStateAvailable(int i);
    }

    public static interface NetworkInfoListener
    {

        public abstract void onNetworkInfoAvailable(NetworkInfo networkinfo);
    }

    public static interface GroupInfoListener
    {

        public abstract void onGroupInfoAvailable(WifiP2pGroup wifip2pgroup);
    }

    public static interface DnsSdTxtRecordListener
    {

        public abstract void onDnsSdTxtRecordAvailable(String s, Map map, WifiP2pDevice wifip2pdevice);
    }

    public static interface DnsSdServiceResponseListener
    {

        public abstract void onDnsSdServiceAvailable(String s, String s1, WifiP2pDevice wifip2pdevice);
    }

    public static interface DiscoveryStateListener
    {

        public abstract void onDiscoveryStateAvailable(int i);
    }

    public static interface DeviceInfoListener
    {

        public abstract void onDeviceInfoAvailable(WifiP2pDevice wifip2pdevice);
    }

    public static interface ConnectionInfoListener
    {

        public abstract void onConnectionInfoAvailable(WifiP2pInfo wifip2pinfo);
    }

    public static interface ChannelListener
    {

        public abstract void onChannelDisconnected();
    }

    public static class Channel
        implements AutoCloseable
    {

        public void close()
        {
            throw new RuntimeException("Stub!");
        }

        protected void finalize()
            throws Throwable
        {
            throw new RuntimeException("Stub!");
        }

        Channel(Context context, Looper looper, ChannelListener l, Binder binder, WifiP2pManager p2pManager)
        {
            throw new RuntimeException("Stub!");
        }
    }

    public static interface ActionListener
    {

        public abstract void onSuccess();

        public abstract void onFailure(int i);
    }


    WifiP2pManager()
    {
        throw new RuntimeException("Stub!");
    }

    public Channel initialize(Context srcContext, Looper srcLooper, ChannelListener listener)
    {
        throw new RuntimeException("Stub!");
    }

    public void discoverPeers(Channel c, ActionListener listener)
    {
        throw new RuntimeException("Stub!");
    }

    public void stopPeerDiscovery(Channel c, ActionListener listener)
    {
        throw new RuntimeException("Stub!");
    }

    public void connect(Channel c, WifiP2pConfig config, ActionListener listener)
    {
        throw new RuntimeException("Stub!");
    }

    public void cancelConnect(Channel c, ActionListener listener)
    {
        throw new RuntimeException("Stub!");
    }

    public void createGroup(Channel c, ActionListener listener)
    {
        throw new RuntimeException("Stub!");
    }

    public void createGroup(Channel c, WifiP2pConfig config, ActionListener listener)
    {
        throw new RuntimeException("Stub!");
    }

    public void removeGroup(Channel c, ActionListener listener)
    {
        throw new RuntimeException("Stub!");
    }

    public void addLocalService(Channel c, WifiP2pServiceInfo servInfo, ActionListener listener)
    {
        throw new RuntimeException("Stub!");
    }

    public void removeLocalService(Channel c, WifiP2pServiceInfo servInfo, ActionListener listener)
    {
        throw new RuntimeException("Stub!");
    }

    public void clearLocalServices(Channel c, ActionListener listener)
    {
        throw new RuntimeException("Stub!");
    }

    public void setServiceResponseListener(Channel c, ServiceResponseListener listener)
    {
        throw new RuntimeException("Stub!");
    }

    public void setDnsSdResponseListeners(Channel c, DnsSdServiceResponseListener servListener, DnsSdTxtRecordListener txtListener)
    {
        throw new RuntimeException("Stub!");
    }

    public void setUpnpServiceResponseListener(Channel c, UpnpServiceResponseListener listener)
    {
        throw new RuntimeException("Stub!");
    }

    public void discoverServices(Channel c, ActionListener listener)
    {
        throw new RuntimeException("Stub!");
    }

    public void addServiceRequest(Channel c, WifiP2pServiceRequest req, ActionListener listener)
    {
        throw new RuntimeException("Stub!");
    }

    public void removeServiceRequest(Channel c, WifiP2pServiceRequest req, ActionListener listener)
    {
        throw new RuntimeException("Stub!");
    }

    public void clearServiceRequests(Channel c, ActionListener listener)
    {
        throw new RuntimeException("Stub!");
    }

    public void requestPeers(Channel c, PeerListListener listener)
    {
        throw new RuntimeException("Stub!");
    }

    public void requestConnectionInfo(Channel c, ConnectionInfoListener listener)
    {
        throw new RuntimeException("Stub!");
    }

    public void requestGroupInfo(Channel c, GroupInfoListener listener)
    {
        throw new RuntimeException("Stub!");
    }

    public void requestP2pState(Channel c, P2pStateListener listener)
    {
        throw new RuntimeException("Stub!");
    }

    public void requestDiscoveryState(Channel c, DiscoveryStateListener listener)
    {
        throw new RuntimeException("Stub!");
    }

    public void requestNetworkInfo(Channel c, NetworkInfoListener listener)
    {
        throw new RuntimeException("Stub!");
    }

    public void requestDeviceInfo(Channel c, DeviceInfoListener listener)
    {
        throw new RuntimeException("Stub!");
    }

    public static final int BUSY = 2;
    public static final int ERROR = 0;
    public static final String EXTRA_DISCOVERY_STATE = "discoveryState";
    public static final String EXTRA_NETWORK_INFO = "networkInfo";
    public static final String EXTRA_P2P_DEVICE_LIST = "wifiP2pDeviceList";
    public static final String EXTRA_WIFI_P2P_DEVICE = "wifiP2pDevice";
    public static final String EXTRA_WIFI_P2P_GROUP = "p2pGroupInfo";
    public static final String EXTRA_WIFI_P2P_INFO = "wifiP2pInfo";
    public static final String EXTRA_WIFI_STATE = "wifi_p2p_state";
    public static final int NO_SERVICE_REQUESTS = 3;
    public static final int P2P_UNSUPPORTED = 1;
    public static final String WIFI_P2P_CONNECTION_CHANGED_ACTION = "android.net.wifi.p2p.CONNECTION_STATE_CHANGE";
    public static final String WIFI_P2P_DISCOVERY_CHANGED_ACTION = "android.net.wifi.p2p.DISCOVERY_STATE_CHANGE";
    public static final int WIFI_P2P_DISCOVERY_STARTED = 2;
    public static final int WIFI_P2P_DISCOVERY_STOPPED = 1;
    public static final String WIFI_P2P_PEERS_CHANGED_ACTION = "android.net.wifi.p2p.PEERS_CHANGED";
    public static final String WIFI_P2P_STATE_CHANGED_ACTION = "android.net.wifi.p2p.STATE_CHANGED";
    public static final int WIFI_P2P_STATE_DISABLED = 1;
    public static final int WIFI_P2P_STATE_ENABLED = 2;
    public static final String WIFI_P2P_THIS_DEVICE_CHANGED_ACTION = "android.net.wifi.p2p.THIS_DEVICE_CHANGED";
}
