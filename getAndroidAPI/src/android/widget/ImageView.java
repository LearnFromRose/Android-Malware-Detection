// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   ImageView.java

package android.widget;

import android.content.Context;
import android.content.res.ColorStateList;
import android.graphics.*;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.Icon;
import android.net.Uri;
import android.util.AttributeSet;
import android.view.View;
import android.view.ViewDebug;

// Referenced classes of package android.widget:
//            RemoteViews

public class ImageView extends View
{
    public static final class ScaleType extends Enum
    {

        public static ScaleType[] values()
        {
            return (ScaleType[])$VALUES.clone();
        }

        public static ScaleType valueOf(String name)
        {
            return (ScaleType)Enum.valueOf(android/widget/ImageView$ScaleType, name);
        }

        public static final ScaleType MATRIX;
        public static final ScaleType FIT_XY;
        public static final ScaleType FIT_START;
        public static final ScaleType FIT_CENTER;
        public static final ScaleType FIT_END;
        public static final ScaleType CENTER;
        public static final ScaleType CENTER_CROP;
        public static final ScaleType CENTER_INSIDE;
        private static final ScaleType $VALUES[];

        static 
        {
            MATRIX = new ScaleType("MATRIX", 0);
            FIT_XY = new ScaleType("FIT_XY", 1);
            FIT_START = new ScaleType("FIT_START", 2);
            FIT_CENTER = new ScaleType("FIT_CENTER", 3);
            FIT_END = new ScaleType("FIT_END", 4);
            CENTER = new ScaleType("CENTER", 5);
            CENTER_CROP = new ScaleType("CENTER_CROP", 6);
            CENTER_INSIDE = new ScaleType("CENTER_INSIDE", 7);
            $VALUES = (new ScaleType[] {
                MATRIX, FIT_XY, FIT_START, FIT_CENTER, FIT_END, CENTER, CENTER_CROP, CENTER_INSIDE
            });
        }

        private ScaleType(String s, int i)
        {
            super(s, i);
        }
    }


    public ImageView(Context context)
    {
        super((Context)null);
        throw new RuntimeException("Stub!");
    }

    public ImageView(Context context, AttributeSet attrs)
    {
        super((Context)null);
        throw new RuntimeException("Stub!");
    }

    public ImageView(Context context, AttributeSet attrs, int defStyleAttr)
    {
        super((Context)null);
        throw new RuntimeException("Stub!");
    }

    public ImageView(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes)
    {
        super((Context)null);
        throw new RuntimeException("Stub!");
    }

    protected boolean verifyDrawable(Drawable dr)
    {
        throw new RuntimeException("Stub!");
    }

    public void jumpDrawablesToCurrentState()
    {
        throw new RuntimeException("Stub!");
    }

    public void invalidateDrawable(Drawable dr)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean hasOverlappingRendering()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean getAdjustViewBounds()
    {
        throw new RuntimeException("Stub!");
    }

    public void setAdjustViewBounds(boolean adjustViewBounds)
    {
        throw new RuntimeException("Stub!");
    }

    public int getMaxWidth()
    {
        throw new RuntimeException("Stub!");
    }

    public void setMaxWidth(int maxWidth)
    {
        throw new RuntimeException("Stub!");
    }

    public int getMaxHeight()
    {
        throw new RuntimeException("Stub!");
    }

    public void setMaxHeight(int maxHeight)
    {
        throw new RuntimeException("Stub!");
    }

    public Drawable getDrawable()
    {
        throw new RuntimeException("Stub!");
    }

    public void setImageResource(int resId)
    {
        throw new RuntimeException("Stub!");
    }

    public void setImageURI(Uri uri)
    {
        throw new RuntimeException("Stub!");
    }

    public void setImageDrawable(Drawable drawable)
    {
        throw new RuntimeException("Stub!");
    }

    public void setImageIcon(Icon icon)
    {
        throw new RuntimeException("Stub!");
    }

    public void setImageTintList(ColorStateList tint)
    {
        throw new RuntimeException("Stub!");
    }

    public ColorStateList getImageTintList()
    {
        throw new RuntimeException("Stub!");
    }

    public void setImageTintMode(android.graphics.PorterDuff.Mode tintMode)
    {
        throw new RuntimeException("Stub!");
    }

    public void setImageTintBlendMode(BlendMode blendMode)
    {
        throw new RuntimeException("Stub!");
    }

    public android.graphics.PorterDuff.Mode getImageTintMode()
    {
        throw new RuntimeException("Stub!");
    }

    public BlendMode getImageTintBlendMode()
    {
        throw new RuntimeException("Stub!");
    }

    public void setImageBitmap(Bitmap bm)
    {
        throw new RuntimeException("Stub!");
    }

    public void setImageState(int state[], boolean merge)
    {
        throw new RuntimeException("Stub!");
    }

    public void setSelected(boolean selected)
    {
        throw new RuntimeException("Stub!");
    }

    public void setImageLevel(int level)
    {
        throw new RuntimeException("Stub!");
    }

    public void setScaleType(ScaleType scaleType)
    {
        throw new RuntimeException("Stub!");
    }

    public ScaleType getScaleType()
    {
        throw new RuntimeException("Stub!");
    }

    public Matrix getImageMatrix()
    {
        throw new RuntimeException("Stub!");
    }

    public void setImageMatrix(Matrix matrix)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean getCropToPadding()
    {
        throw new RuntimeException("Stub!");
    }

    public void setCropToPadding(boolean cropToPadding)
    {
        throw new RuntimeException("Stub!");
    }

    public int[] onCreateDrawableState(int extraSpace)
    {
        throw new RuntimeException("Stub!");
    }

    public void onRtlPropertiesChanged(int layoutDirection)
    {
        throw new RuntimeException("Stub!");
    }

    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)
    {
        throw new RuntimeException("Stub!");
    }

    protected boolean setFrame(int l, int t, int r, int b)
    {
        throw new RuntimeException("Stub!");
    }

    protected void drawableStateChanged()
    {
        throw new RuntimeException("Stub!");
    }

    public void drawableHotspotChanged(float x, float y)
    {
        throw new RuntimeException("Stub!");
    }

    public void animateTransform(Matrix matrix)
    {
        throw new RuntimeException("Stub!");
    }

    protected void onDraw(Canvas canvas)
    {
        throw new RuntimeException("Stub!");
    }

    public int getBaseline()
    {
        throw new RuntimeException("Stub!");
    }

    public void setBaseline(int baseline)
    {
        throw new RuntimeException("Stub!");
    }

    public void setBaselineAlignBottom(boolean aligned)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean getBaselineAlignBottom()
    {
        throw new RuntimeException("Stub!");
    }

    public final void setColorFilter(int color, android.graphics.PorterDuff.Mode mode)
    {
        throw new RuntimeException("Stub!");
    }

    public final void setColorFilter(int color)
    {
        throw new RuntimeException("Stub!");
    }

    public final void clearColorFilter()
    {
        throw new RuntimeException("Stub!");
    }

    public ColorFilter getColorFilter()
    {
        throw new RuntimeException("Stub!");
    }

    public void setColorFilter(ColorFilter cf)
    {
        throw new RuntimeException("Stub!");
    }

    public int getImageAlpha()
    {
        throw new RuntimeException("Stub!");
    }

    public void setImageAlpha(int alpha)
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method setAlpha is deprecated
     */

    public void setAlpha(int alpha)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isOpaque()
    {
        throw new RuntimeException("Stub!");
    }

    public void onVisibilityAggregated(boolean isVisible)
    {
        throw new RuntimeException("Stub!");
    }

    public void setVisibility(int visibility)
    {
        throw new RuntimeException("Stub!");
    }

    protected void onAttachedToWindow()
    {
        throw new RuntimeException("Stub!");
    }

    protected void onDetachedFromWindow()
    {
        throw new RuntimeException("Stub!");
    }

    public CharSequence getAccessibilityClassName()
    {
        throw new RuntimeException("Stub!");
    }
}
