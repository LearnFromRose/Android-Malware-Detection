// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   AbsListView.java

package android.widget;

import android.content.Context;
import android.content.Intent;
import android.graphics.Canvas;
import android.graphics.Rect;
import android.graphics.drawable.Drawable;
import android.os.Parcelable;
import android.text.Editable;
import android.text.TextWatcher;
import android.util.AttributeSet;
import android.util.SparseBooleanArray;
import android.view.*;
import android.view.accessibility.AccessibilityEvent;
import android.view.accessibility.AccessibilityNodeInfo;
import android.view.inputmethod.EditorInfo;
import android.view.inputmethod.InputConnection;
import java.util.ArrayList;
import java.util.List;

// Referenced classes of package android.widget:
//            AdapterView, ListAdapter, Filter, Adapter

public abstract class AbsListView extends AdapterView
    implements TextWatcher, android.view.ViewTreeObserver.OnGlobalLayoutListener, Filter.FilterListener, android.view.ViewTreeObserver.OnTouchModeChangeListener
{
    public static interface SelectionBoundsAdjuster
    {

        public abstract void adjustListItemSelectionBounds(Rect rect);
    }

    public static interface RecyclerListener
    {

        public abstract void onMovedToScrapHeap(View view);
    }

    public static interface OnScrollListener
    {

        public abstract void onScrollStateChanged(AbsListView abslistview, int i);

        public abstract void onScroll(AbsListView abslistview, int i, int j, int k);

        public static final int SCROLL_STATE_FLING = 2;
        public static final int SCROLL_STATE_IDLE = 0;
        public static final int SCROLL_STATE_TOUCH_SCROLL = 1;
    }

    public static interface MultiChoiceModeListener
        extends android.view.ActionMode.Callback
    {

        public abstract void onItemCheckedStateChanged(ActionMode actionmode, int i, long l, boolean flag);
    }

    public static class LayoutParams extends android.view.ViewGroup.LayoutParams
    {

        public LayoutParams(Context c, AttributeSet attrs)
        {
            super((android.view.ViewGroup.LayoutParams)null);
            throw new RuntimeException("Stub!");
        }

        public LayoutParams(int w, int h)
        {
            super((android.view.ViewGroup.LayoutParams)null);
            throw new RuntimeException("Stub!");
        }

        public LayoutParams(int w, int h, int viewType)
        {
            super((android.view.ViewGroup.LayoutParams)null);
            throw new RuntimeException("Stub!");
        }

        public LayoutParams(android.view.ViewGroup.LayoutParams source)
        {
            super((android.view.ViewGroup.LayoutParams)null);
            throw new RuntimeException("Stub!");
        }
    }


    public AbsListView(Context context)
    {
        super((Context)null);
        throw new RuntimeException("Stub!");
    }

    public AbsListView(Context context, AttributeSet attrs)
    {
        super((Context)null);
        throw new RuntimeException("Stub!");
    }

    public AbsListView(Context context, AttributeSet attrs, int defStyleAttr)
    {
        super((Context)null);
        throw new RuntimeException("Stub!");
    }

    public AbsListView(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes)
    {
        super((Context)null);
        throw new RuntimeException("Stub!");
    }

    public void setAdapter(ListAdapter adapter)
    {
        throw new RuntimeException("Stub!");
    }

    public int getCheckedItemCount()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isItemChecked(int position)
    {
        throw new RuntimeException("Stub!");
    }

    public int getCheckedItemPosition()
    {
        throw new RuntimeException("Stub!");
    }

    public SparseBooleanArray getCheckedItemPositions()
    {
        throw new RuntimeException("Stub!");
    }

    public long[] getCheckedItemIds()
    {
        throw new RuntimeException("Stub!");
    }

    public void clearChoices()
    {
        throw new RuntimeException("Stub!");
    }

    public void setItemChecked(int position, boolean value)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean performItemClick(View view, int position, long id)
    {
        throw new RuntimeException("Stub!");
    }

    public int getChoiceMode()
    {
        throw new RuntimeException("Stub!");
    }

    public void setChoiceMode(int choiceMode)
    {
        throw new RuntimeException("Stub!");
    }

    public void setMultiChoiceModeListener(MultiChoiceModeListener listener)
    {
        throw new RuntimeException("Stub!");
    }

    public void setFastScrollEnabled(boolean enabled)
    {
        throw new RuntimeException("Stub!");
    }

    public void setFastScrollStyle(int styleResId)
    {
        throw new RuntimeException("Stub!");
    }

    public void setFastScrollAlwaysVisible(boolean alwaysShow)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isFastScrollAlwaysVisible()
    {
        throw new RuntimeException("Stub!");
    }

    public int getVerticalScrollbarWidth()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isFastScrollEnabled()
    {
        throw new RuntimeException("Stub!");
    }

    public void setVerticalScrollbarPosition(int position)
    {
        throw new RuntimeException("Stub!");
    }

    public void setScrollBarStyle(int style)
    {
        throw new RuntimeException("Stub!");
    }

    public void setSmoothScrollbarEnabled(boolean enabled)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isSmoothScrollbarEnabled()
    {
        throw new RuntimeException("Stub!");
    }

    public void setOnScrollListener(OnScrollListener l)
    {
        throw new RuntimeException("Stub!");
    }

    public void sendAccessibilityEventUnchecked(AccessibilityEvent event)
    {
        throw new RuntimeException("Stub!");
    }

    public CharSequence getAccessibilityClassName()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isScrollingCacheEnabled()
    {
        throw new RuntimeException("Stub!");
    }

    public void setScrollingCacheEnabled(boolean enabled)
    {
        throw new RuntimeException("Stub!");
    }

    public void setTextFilterEnabled(boolean textFilterEnabled)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isTextFilterEnabled()
    {
        throw new RuntimeException("Stub!");
    }

    public void getFocusedRect(Rect r)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isStackFromBottom()
    {
        throw new RuntimeException("Stub!");
    }

    public void setStackFromBottom(boolean stackFromBottom)
    {
        throw new RuntimeException("Stub!");
    }

    public Parcelable onSaveInstanceState()
    {
        throw new RuntimeException("Stub!");
    }

    public void onRestoreInstanceState(Parcelable state)
    {
        throw new RuntimeException("Stub!");
    }

    public void setFilterText(String filterText)
    {
        throw new RuntimeException("Stub!");
    }

    public CharSequence getTextFilter()
    {
        throw new RuntimeException("Stub!");
    }

    protected void onFocusChanged(boolean gainFocus, int direction, Rect previouslyFocusedRect)
    {
        throw new RuntimeException("Stub!");
    }

    public void requestLayout()
    {
        throw new RuntimeException("Stub!");
    }

    protected int computeVerticalScrollExtent()
    {
        throw new RuntimeException("Stub!");
    }

    protected int computeVerticalScrollOffset()
    {
        throw new RuntimeException("Stub!");
    }

    protected int computeVerticalScrollRange()
    {
        throw new RuntimeException("Stub!");
    }

    protected float getTopFadingEdgeStrength()
    {
        throw new RuntimeException("Stub!");
    }

    protected float getBottomFadingEdgeStrength()
    {
        throw new RuntimeException("Stub!");
    }

    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)
    {
        throw new RuntimeException("Stub!");
    }

    protected void onLayout(boolean changed, int l, int t, int r, int b)
    {
        throw new RuntimeException("Stub!");
    }

    protected void layoutChildren()
    {
        throw new RuntimeException("Stub!");
    }

    public View getSelectedView()
    {
        throw new RuntimeException("Stub!");
    }

    public int getListPaddingTop()
    {
        throw new RuntimeException("Stub!");
    }

    public int getListPaddingBottom()
    {
        throw new RuntimeException("Stub!");
    }

    public int getListPaddingLeft()
    {
        throw new RuntimeException("Stub!");
    }

    public int getListPaddingRight()
    {
        throw new RuntimeException("Stub!");
    }

    public void onInitializeAccessibilityNodeInfoForItem(View view, int position, AccessibilityNodeInfo info)
    {
        throw new RuntimeException("Stub!");
    }

    protected void dispatchDraw(Canvas canvas)
    {
        throw new RuntimeException("Stub!");
    }

    protected boolean isPaddingOffsetRequired()
    {
        throw new RuntimeException("Stub!");
    }

    protected int getLeftPaddingOffset()
    {
        throw new RuntimeException("Stub!");
    }

    protected int getTopPaddingOffset()
    {
        throw new RuntimeException("Stub!");
    }

    protected int getRightPaddingOffset()
    {
        throw new RuntimeException("Stub!");
    }

    protected int getBottomPaddingOffset()
    {
        throw new RuntimeException("Stub!");
    }

    protected void onSizeChanged(int w, int h, int oldw, int oldh)
    {
        throw new RuntimeException("Stub!");
    }

    public void setDrawSelectorOnTop(boolean onTop)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isDrawSelectorOnTop()
    {
        throw new RuntimeException("Stub!");
    }

    public void setSelector(int resID)
    {
        throw new RuntimeException("Stub!");
    }

    public void setSelector(Drawable sel)
    {
        throw new RuntimeException("Stub!");
    }

    public Drawable getSelector()
    {
        throw new RuntimeException("Stub!");
    }

    public void setScrollIndicators(View up, View down)
    {
        throw new RuntimeException("Stub!");
    }

    protected void drawableStateChanged()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean verifyDrawable(Drawable dr)
    {
        throw new RuntimeException("Stub!");
    }

    public void jumpDrawablesToCurrentState()
    {
        throw new RuntimeException("Stub!");
    }

    protected void onAttachedToWindow()
    {
        throw new RuntimeException("Stub!");
    }

    protected void onDetachedFromWindow()
    {
        throw new RuntimeException("Stub!");
    }

    public void onWindowFocusChanged(boolean hasWindowFocus)
    {
        throw new RuntimeException("Stub!");
    }

    public void onRtlPropertiesChanged(int layoutDirection)
    {
        throw new RuntimeException("Stub!");
    }

    public void onCancelPendingInputEvents()
    {
        throw new RuntimeException("Stub!");
    }

    protected android.view.ContextMenu.ContextMenuInfo getContextMenuInfo()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean showContextMenu()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean showContextMenu(float x, float y)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean showContextMenuForChild(View originalView)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean showContextMenuForChild(View originalView, float x, float y)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean onKeyDown(int keyCode, KeyEvent event)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean onKeyUp(int keyCode, KeyEvent event)
    {
        throw new RuntimeException("Stub!");
    }

    protected void dispatchSetPressed(boolean pressed)
    {
        throw new RuntimeException("Stub!");
    }

    public void dispatchDrawableHotspotChanged(float x, float y)
    {
        throw new RuntimeException("Stub!");
    }

    public int pointToPosition(int x, int y)
    {
        throw new RuntimeException("Stub!");
    }

    public long pointToRowId(int x, int y)
    {
        throw new RuntimeException("Stub!");
    }

    public void onTouchModeChanged(boolean isInTouchMode)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean onTouchEvent(MotionEvent ev)
    {
        throw new RuntimeException("Stub!");
    }

    protected void onOverScrolled(int scrollX, int scrollY, boolean clampedX, boolean clampedY)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean onGenericMotionEvent(MotionEvent event)
    {
        throw new RuntimeException("Stub!");
    }

    public void fling(int velocityY)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean onStartNestedScroll(View child, View target, int nestedScrollAxes)
    {
        throw new RuntimeException("Stub!");
    }

    public void onNestedScrollAccepted(View child, View target, int axes)
    {
        throw new RuntimeException("Stub!");
    }

    public void onNestedScroll(View target, int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean onNestedFling(View target, float velocityX, float velocityY, boolean consumed)
    {
        throw new RuntimeException("Stub!");
    }

    public void draw(Canvas canvas)
    {
        throw new RuntimeException("Stub!");
    }

    public void requestDisallowInterceptTouchEvent(boolean disallowIntercept)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean onInterceptHoverEvent(MotionEvent event)
    {
        throw new RuntimeException("Stub!");
    }

    public PointerIcon onResolvePointerIcon(MotionEvent event, int pointerIndex)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean onInterceptTouchEvent(MotionEvent ev)
    {
        throw new RuntimeException("Stub!");
    }

    public void addTouchables(ArrayList views)
    {
        throw new RuntimeException("Stub!");
    }

    public void setFriction(float friction)
    {
        throw new RuntimeException("Stub!");
    }

    public void setVelocityScale(float scale)
    {
        throw new RuntimeException("Stub!");
    }

    public void smoothScrollToPosition(int position)
    {
        throw new RuntimeException("Stub!");
    }

    public void smoothScrollToPositionFromTop(int position, int offset, int duration)
    {
        throw new RuntimeException("Stub!");
    }

    public void smoothScrollToPositionFromTop(int position, int offset)
    {
        throw new RuntimeException("Stub!");
    }

    public void smoothScrollToPosition(int position, int boundPosition)
    {
        throw new RuntimeException("Stub!");
    }

    public void smoothScrollBy(int distance, int duration)
    {
        throw new RuntimeException("Stub!");
    }

    public void scrollListBy(int y)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean canScrollList(int direction)
    {
        throw new RuntimeException("Stub!");
    }

    public void invalidateViews()
    {
        throw new RuntimeException("Stub!");
    }

    protected void handleDataChanged()
    {
        throw new RuntimeException("Stub!");
    }

    protected void onDisplayHint(int hint)
    {
        throw new RuntimeException("Stub!");
    }

    protected boolean isInFilterMode()
    {
        throw new RuntimeException("Stub!");
    }

    public InputConnection onCreateInputConnection(EditorInfo outAttrs)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean checkInputConnectionProxy(View view)
    {
        throw new RuntimeException("Stub!");
    }

    public void clearTextFilter()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean hasTextFilter()
    {
        throw new RuntimeException("Stub!");
    }

    public void onGlobalLayout()
    {
        throw new RuntimeException("Stub!");
    }

    public void beforeTextChanged(CharSequence s, int start, int count, int after)
    {
        throw new RuntimeException("Stub!");
    }

    public void onTextChanged(CharSequence s, int start, int before, int count)
    {
        throw new RuntimeException("Stub!");
    }

    public void afterTextChanged(Editable s)
    {
        throw new RuntimeException("Stub!");
    }

    public void onFilterComplete(int count)
    {
        throw new RuntimeException("Stub!");
    }

    protected android.view.ViewGroup.LayoutParams generateDefaultLayoutParams()
    {
        throw new RuntimeException("Stub!");
    }

    protected android.view.ViewGroup.LayoutParams generateLayoutParams(android.view.ViewGroup.LayoutParams p)
    {
        throw new RuntimeException("Stub!");
    }

    public LayoutParams generateLayoutParams(AttributeSet attrs)
    {
        throw new RuntimeException("Stub!");
    }

    protected boolean checkLayoutParams(android.view.ViewGroup.LayoutParams p)
    {
        throw new RuntimeException("Stub!");
    }

    public void setTranscriptMode(int mode)
    {
        throw new RuntimeException("Stub!");
    }

    public int getTranscriptMode()
    {
        throw new RuntimeException("Stub!");
    }

    public int getSolidColor()
    {
        throw new RuntimeException("Stub!");
    }

    public void setCacheColorHint(int color)
    {
        throw new RuntimeException("Stub!");
    }

    public int getCacheColorHint()
    {
        throw new RuntimeException("Stub!");
    }

    public void reclaimViews(List views)
    {
        throw new RuntimeException("Stub!");
    }

    public void setRemoteViewsAdapter(Intent intent)
    {
        throw new RuntimeException("Stub!");
    }

    public void deferNotifyDataSetChanged()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean onRemoteAdapterConnected()
    {
        throw new RuntimeException("Stub!");
    }

    public void onRemoteAdapterDisconnected()
    {
        throw new RuntimeException("Stub!");
    }

    public void setEdgeEffectColor(int color)
    {
        throw new RuntimeException("Stub!");
    }

    public void setBottomEdgeEffectColor(int color)
    {
        throw new RuntimeException("Stub!");
    }

    public void setTopEdgeEffectColor(int color)
    {
        throw new RuntimeException("Stub!");
    }

    public int getTopEdgeEffectColor()
    {
        throw new RuntimeException("Stub!");
    }

    public int getBottomEdgeEffectColor()
    {
        throw new RuntimeException("Stub!");
    }

    public void setRecyclerListener(RecyclerListener listener)
    {
        throw new RuntimeException("Stub!");
    }

    public void setSelectionFromTop(int position, int y)
    {
        throw new RuntimeException("Stub!");
    }

    public volatile void setAdapter(Adapter adapter)
    {
        setAdapter((ListAdapter)adapter);
    }

    public volatile android.view.ViewGroup.LayoutParams generateLayoutParams(AttributeSet attributeset)
    {
        return generateLayoutParams(attributeset);
    }

    public static final int CHOICE_MODE_MULTIPLE = 2;
    public static final int CHOICE_MODE_MULTIPLE_MODAL = 3;
    public static final int CHOICE_MODE_NONE = 0;
    public static final int CHOICE_MODE_SINGLE = 1;
    public static final int TRANSCRIPT_MODE_ALWAYS_SCROLL = 2;
    public static final int TRANSCRIPT_MODE_DISABLED = 0;
    public static final int TRANSCRIPT_MODE_NORMAL = 1;
}
