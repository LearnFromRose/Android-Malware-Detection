// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   WebSettings.java

package android.webkit;

import android.content.Context;

public abstract class WebSettings
{
    public static final class ZoomDensity extends Enum
    {

        public static ZoomDensity[] values()
        {
            return (ZoomDensity[])$VALUES.clone();
        }

        public static ZoomDensity valueOf(String name)
        {
            return (ZoomDensity)Enum.valueOf(android/webkit/WebSettings$ZoomDensity, name);
        }

        public static final ZoomDensity FAR;
        public static final ZoomDensity MEDIUM;
        public static final ZoomDensity CLOSE;
        private static final ZoomDensity $VALUES[];

        static 
        {
            FAR = new ZoomDensity("FAR", 0);
            MEDIUM = new ZoomDensity("MEDIUM", 1);
            CLOSE = new ZoomDensity("CLOSE", 2);
            $VALUES = (new ZoomDensity[] {
                FAR, MEDIUM, CLOSE
            });
        }

        private ZoomDensity(String s, int i)
        {
            super(s, i);
        }
    }

    /**
     * @deprecated Class TextSize is deprecated
     */

    public static final class TextSize extends Enum
    {

        public static TextSize[] values()
        {
            return (TextSize[])$VALUES.clone();
        }

        public static TextSize valueOf(String name)
        {
            return (TextSize)Enum.valueOf(android/webkit/WebSettings$TextSize, name);
        }

        /**
         * @deprecated Field SMALLEST is deprecated
         */
        public static final TextSize SMALLEST;
        /**
         * @deprecated Field SMALLER is deprecated
         */
        public static final TextSize SMALLER;
        /**
         * @deprecated Field NORMAL is deprecated
         */
        public static final TextSize NORMAL;
        /**
         * @deprecated Field LARGER is deprecated
         */
        public static final TextSize LARGER;
        /**
         * @deprecated Field LARGEST is deprecated
         */
        public static final TextSize LARGEST;
        private static final TextSize $VALUES[];

        static 
        {
            SMALLEST = new TextSize("SMALLEST", 0);
            SMALLER = new TextSize("SMALLER", 1);
            NORMAL = new TextSize("NORMAL", 2);
            LARGER = new TextSize("LARGER", 3);
            LARGEST = new TextSize("LARGEST", 4);
            $VALUES = (new TextSize[] {
                SMALLEST, SMALLER, NORMAL, LARGER, LARGEST
            });
        }

        private TextSize(String s, int i)
        {
            super(s, i);
        }
    }

    public static final class RenderPriority extends Enum
    {

        public static RenderPriority[] values()
        {
            return (RenderPriority[])$VALUES.clone();
        }

        public static RenderPriority valueOf(String name)
        {
            return (RenderPriority)Enum.valueOf(android/webkit/WebSettings$RenderPriority, name);
        }

        public static final RenderPriority NORMAL;
        public static final RenderPriority HIGH;
        public static final RenderPriority LOW;
        private static final RenderPriority $VALUES[];

        static 
        {
            NORMAL = new RenderPriority("NORMAL", 0);
            HIGH = new RenderPriority("HIGH", 1);
            LOW = new RenderPriority("LOW", 2);
            $VALUES = (new RenderPriority[] {
                NORMAL, HIGH, LOW
            });
        }

        private RenderPriority(String s, int i)
        {
            super(s, i);
        }
    }

    public static final class PluginState extends Enum
    {

        public static PluginState[] values()
        {
            return (PluginState[])$VALUES.clone();
        }

        public static PluginState valueOf(String name)
        {
            return (PluginState)Enum.valueOf(android/webkit/WebSettings$PluginState, name);
        }

        public static final PluginState ON;
        public static final PluginState ON_DEMAND;
        public static final PluginState OFF;
        private static final PluginState $VALUES[];

        static 
        {
            ON = new PluginState("ON", 0);
            ON_DEMAND = new PluginState("ON_DEMAND", 1);
            OFF = new PluginState("OFF", 2);
            $VALUES = (new PluginState[] {
                ON, ON_DEMAND, OFF
            });
        }

        private PluginState(String s, int i)
        {
            super(s, i);
        }
    }

    public static final class LayoutAlgorithm extends Enum
    {

        public static LayoutAlgorithm[] values()
        {
            return (LayoutAlgorithm[])$VALUES.clone();
        }

        public static LayoutAlgorithm valueOf(String name)
        {
            return (LayoutAlgorithm)Enum.valueOf(android/webkit/WebSettings$LayoutAlgorithm, name);
        }

        public static final LayoutAlgorithm NORMAL;
        /**
         * @deprecated Field SINGLE_COLUMN is deprecated
         */
        public static final LayoutAlgorithm SINGLE_COLUMN;
        /**
         * @deprecated Field NARROW_COLUMNS is deprecated
         */
        public static final LayoutAlgorithm NARROW_COLUMNS;
        public static final LayoutAlgorithm TEXT_AUTOSIZING;
        private static final LayoutAlgorithm $VALUES[];

        static 
        {
            NORMAL = new LayoutAlgorithm("NORMAL", 0);
            SINGLE_COLUMN = new LayoutAlgorithm("SINGLE_COLUMN", 1);
            NARROW_COLUMNS = new LayoutAlgorithm("NARROW_COLUMNS", 2);
            TEXT_AUTOSIZING = new LayoutAlgorithm("TEXT_AUTOSIZING", 3);
            $VALUES = (new LayoutAlgorithm[] {
                NORMAL, SINGLE_COLUMN, NARROW_COLUMNS, TEXT_AUTOSIZING
            });
        }

        private LayoutAlgorithm(String s, int i)
        {
            super(s, i);
        }
    }


    public WebSettings()
    {
        throw new RuntimeException("Stub!");
    }

    public abstract void setSupportZoom(boolean flag);

    public abstract boolean supportZoom();

    public abstract void setMediaPlaybackRequiresUserGesture(boolean flag);

    public abstract boolean getMediaPlaybackRequiresUserGesture();

    public abstract void setBuiltInZoomControls(boolean flag);

    public abstract boolean getBuiltInZoomControls();

    public abstract void setDisplayZoomControls(boolean flag);

    public abstract boolean getDisplayZoomControls();

    public abstract void setAllowFileAccess(boolean flag);

    public abstract boolean getAllowFileAccess();

    public abstract void setAllowContentAccess(boolean flag);

    public abstract boolean getAllowContentAccess();

    public abstract void setLoadWithOverviewMode(boolean flag);

    public abstract boolean getLoadWithOverviewMode();

    /**
     * @deprecated Method setEnableSmoothTransition is deprecated
     */

    public abstract void setEnableSmoothTransition(boolean flag);

    /**
     * @deprecated Method enableSmoothTransition is deprecated
     */

    public abstract boolean enableSmoothTransition();

    /**
     * @deprecated Method setSaveFormData is deprecated
     */

    public abstract void setSaveFormData(boolean flag);

    /**
     * @deprecated Method getSaveFormData is deprecated
     */

    public abstract boolean getSaveFormData();

    /**
     * @deprecated Method setSavePassword is deprecated
     */

    public abstract void setSavePassword(boolean flag);

    /**
     * @deprecated Method getSavePassword is deprecated
     */

    public abstract boolean getSavePassword();

    public abstract void setTextZoom(int i);

    public abstract int getTextZoom();

    /**
     * @deprecated Method setTextSize is deprecated
     */

    public synchronized void setTextSize(TextSize t)
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method getTextSize is deprecated
     */

    public synchronized TextSize getTextSize()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method setDefaultZoom is deprecated
     */

    public abstract void setDefaultZoom(ZoomDensity zoomdensity);

    /**
     * @deprecated Method getDefaultZoom is deprecated
     */

    public abstract ZoomDensity getDefaultZoom();

    /**
     * @deprecated Method setLightTouchEnabled is deprecated
     */

    public abstract void setLightTouchEnabled(boolean flag);

    /**
     * @deprecated Method getLightTouchEnabled is deprecated
     */

    public abstract boolean getLightTouchEnabled();

    public abstract void setUseWideViewPort(boolean flag);

    public abstract boolean getUseWideViewPort();

    public abstract void setSupportMultipleWindows(boolean flag);

    public abstract boolean supportMultipleWindows();

    public abstract void setLayoutAlgorithm(LayoutAlgorithm layoutalgorithm);

    public abstract LayoutAlgorithm getLayoutAlgorithm();

    public abstract void setStandardFontFamily(String s);

    public abstract String getStandardFontFamily();

    public abstract void setFixedFontFamily(String s);

    public abstract String getFixedFontFamily();

    public abstract void setSansSerifFontFamily(String s);

    public abstract String getSansSerifFontFamily();

    public abstract void setSerifFontFamily(String s);

    public abstract String getSerifFontFamily();

    public abstract void setCursiveFontFamily(String s);

    public abstract String getCursiveFontFamily();

    public abstract void setFantasyFontFamily(String s);

    public abstract String getFantasyFontFamily();

    public abstract void setMinimumFontSize(int i);

    public abstract int getMinimumFontSize();

    public abstract void setMinimumLogicalFontSize(int i);

    public abstract int getMinimumLogicalFontSize();

    public abstract void setDefaultFontSize(int i);

    public abstract int getDefaultFontSize();

    public abstract void setDefaultFixedFontSize(int i);

    public abstract int getDefaultFixedFontSize();

    public abstract void setLoadsImagesAutomatically(boolean flag);

    public abstract boolean getLoadsImagesAutomatically();

    public abstract void setBlockNetworkImage(boolean flag);

    public abstract boolean getBlockNetworkImage();

    public abstract void setBlockNetworkLoads(boolean flag);

    public abstract boolean getBlockNetworkLoads();

    public abstract void setJavaScriptEnabled(boolean flag);

    public abstract void setAllowUniversalAccessFromFileURLs(boolean flag);

    public abstract void setAllowFileAccessFromFileURLs(boolean flag);

    /**
     * @deprecated Method setPluginState is deprecated
     */

    public abstract void setPluginState(PluginState pluginstate);

    /**
     * @deprecated Method setDatabasePath is deprecated
     */

    public abstract void setDatabasePath(String s);

    /**
     * @deprecated Method setGeolocationDatabasePath is deprecated
     */

    public abstract void setGeolocationDatabasePath(String s);

    public abstract void setAppCacheEnabled(boolean flag);

    public abstract void setAppCachePath(String s);

    /**
     * @deprecated Method setAppCacheMaxSize is deprecated
     */

    public abstract void setAppCacheMaxSize(long l);

    public abstract void setDatabaseEnabled(boolean flag);

    public abstract void setDomStorageEnabled(boolean flag);

    public abstract boolean getDomStorageEnabled();

    /**
     * @deprecated Method getDatabasePath is deprecated
     */

    public abstract String getDatabasePath();

    public abstract boolean getDatabaseEnabled();

    public abstract void setGeolocationEnabled(boolean flag);

    public abstract boolean getJavaScriptEnabled();

    public abstract boolean getAllowUniversalAccessFromFileURLs();

    public abstract boolean getAllowFileAccessFromFileURLs();

    /**
     * @deprecated Method getPluginState is deprecated
     */

    public abstract PluginState getPluginState();

    public abstract void setJavaScriptCanOpenWindowsAutomatically(boolean flag);

    public abstract boolean getJavaScriptCanOpenWindowsAutomatically();

    public abstract void setDefaultTextEncodingName(String s);

    public abstract String getDefaultTextEncodingName();

    public abstract void setUserAgentString(String s);

    public abstract String getUserAgentString();

    public static String getDefaultUserAgent(Context context)
    {
        throw new RuntimeException("Stub!");
    }

    public abstract void setNeedInitialFocus(boolean flag);

    /**
     * @deprecated Method setRenderPriority is deprecated
     */

    public abstract void setRenderPriority(RenderPriority renderpriority);

    public abstract void setCacheMode(int i);

    public abstract int getCacheMode();

    public abstract void setMixedContentMode(int i);

    public abstract int getMixedContentMode();

    public abstract void setOffscreenPreRaster(boolean flag);

    public abstract boolean getOffscreenPreRaster();

    public abstract void setSafeBrowsingEnabled(boolean flag);

    public abstract boolean getSafeBrowsingEnabled();

    public void setForceDark(int forceDark)
    {
        throw new RuntimeException("Stub!");
    }

    public int getForceDark()
    {
        throw new RuntimeException("Stub!");
    }

    public abstract void setDisabledActionModeMenuItems(int i);

    public abstract int getDisabledActionModeMenuItems();

    public static final int FORCE_DARK_AUTO = 1;
    public static final int FORCE_DARK_OFF = 0;
    public static final int FORCE_DARK_ON = 2;
    public static final int LOAD_CACHE_ELSE_NETWORK = 1;
    public static final int LOAD_CACHE_ONLY = 3;
    public static final int LOAD_DEFAULT = -1;
    /**
     * @deprecated Field LOAD_NORMAL is deprecated
     */
    public static final int LOAD_NORMAL = 0;
    public static final int LOAD_NO_CACHE = 2;
    public static final int MENU_ITEM_NONE = 0;
    public static final int MENU_ITEM_PROCESS_TEXT = 4;
    public static final int MENU_ITEM_SHARE = 1;
    public static final int MENU_ITEM_WEB_SEARCH = 2;
    public static final int MIXED_CONTENT_ALWAYS_ALLOW = 0;
    public static final int MIXED_CONTENT_COMPATIBILITY_MODE = 2;
    public static final int MIXED_CONTENT_NEVER_ALLOW = 1;
}
