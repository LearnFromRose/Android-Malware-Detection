// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   WebView.java

package android.webkit;

import android.content.Context;
import android.content.pm.PackageInfo;
import android.content.res.Configuration;
import android.graphics.*;
import android.net.Uri;
import android.net.http.SslCertificate;
import android.os.*;
import android.print.PrintDocumentAdapter;
import android.util.AttributeSet;
import android.util.SparseArray;
import android.view.*;
import android.view.accessibility.AccessibilityNodeProvider;
import android.view.inputmethod.EditorInfo;
import android.view.inputmethod.InputConnection;
import android.view.textclassifier.TextClassifier;
import android.widget.AbsoluteLayout;
import java.util.List;
import java.util.Map;
import java.util.concurrent.Executor;

// Referenced classes of package android.webkit:
//            WebBackForwardList, ValueCallback, WebViewClient, WebViewRenderProcess, 
//            WebViewRenderProcessClient, DownloadListener, WebChromeClient, WebMessagePort, 
//            WebMessage, WebSettings

public class WebView extends AbsoluteLayout
    implements android.view.ViewTreeObserver.OnGlobalFocusChangeListener, android.view.ViewGroup.OnHierarchyChangeListener
{
    public class WebViewTransport
    {

        public synchronized void setWebView(WebView webview)
        {
            throw new RuntimeException("Stub!");
        }

        public synchronized WebView getWebView()
        {
            throw new RuntimeException("Stub!");
        }

        final WebView this$0;

        public WebViewTransport()
        {
            this.this$0 = WebView.this;
            super();
            throw new RuntimeException("Stub!");
        }
    }

    public static abstract class VisualStateCallback
    {

        public abstract void onComplete(long l);

        public VisualStateCallback()
        {
            throw new RuntimeException("Stub!");
        }
    }

    /**
     * @deprecated Interface PictureListener is deprecated
     */

    public static interface PictureListener
    {

        /**
         * @deprecated Method onNewPicture is deprecated
         */

        public abstract void onNewPicture(WebView webview, Picture picture);
    }

    public static class HitTestResult
    {

        public int getType()
        {
            throw new RuntimeException("Stub!");
        }

        public String getExtra()
        {
            throw new RuntimeException("Stub!");
        }

        /**
         * @deprecated Field ANCHOR_TYPE is deprecated
         */
        public static final int ANCHOR_TYPE = 1;
        public static final int EDIT_TEXT_TYPE = 9;
        public static final int EMAIL_TYPE = 4;
        public static final int GEO_TYPE = 3;
        /**
         * @deprecated Field IMAGE_ANCHOR_TYPE is deprecated
         */
        public static final int IMAGE_ANCHOR_TYPE = 6;
        public static final int IMAGE_TYPE = 5;
        public static final int PHONE_TYPE = 2;
        public static final int SRC_ANCHOR_TYPE = 7;
        public static final int SRC_IMAGE_ANCHOR_TYPE = 8;
        public static final int UNKNOWN_TYPE = 0;

        HitTestResult()
        {
            throw new RuntimeException("Stub!");
        }
    }

    public static interface FindListener
    {

        public abstract void onFindResultReceived(int i, int j, boolean flag);
    }


    public WebView(Context context)
    {
        super((Context)null);
        throw new RuntimeException("Stub!");
    }

    public WebView(Context context, AttributeSet attrs)
    {
        super((Context)null);
        throw new RuntimeException("Stub!");
    }

    public WebView(Context context, AttributeSet attrs, int defStyleAttr)
    {
        super((Context)null);
        throw new RuntimeException("Stub!");
    }

    public WebView(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes)
    {
        super((Context)null);
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method WebView is deprecated
     */

    public WebView(Context context, AttributeSet attrs, int defStyleAttr, boolean privateBrowsing)
    {
        super((Context)null);
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method setHorizontalScrollbarOverlay is deprecated
     */

    public void setHorizontalScrollbarOverlay(boolean overlay)
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method setVerticalScrollbarOverlay is deprecated
     */

    public void setVerticalScrollbarOverlay(boolean overlay)
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method overlayHorizontalScrollbar is deprecated
     */

    public boolean overlayHorizontalScrollbar()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method overlayVerticalScrollbar is deprecated
     */

    public boolean overlayVerticalScrollbar()
    {
        throw new RuntimeException("Stub!");
    }

    public SslCertificate getCertificate()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method setCertificate is deprecated
     */

    public void setCertificate(SslCertificate certificate)
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method savePassword is deprecated
     */

    public void savePassword(String host, String username, String password)
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method setHttpAuthUsernamePassword is deprecated
     */

    public void setHttpAuthUsernamePassword(String host, String realm, String username, String password)
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method getHttpAuthUsernamePassword is deprecated
     */

    public String[] getHttpAuthUsernamePassword(String host, String realm)
    {
        throw new RuntimeException("Stub!");
    }

    public void destroy()
    {
        throw new RuntimeException("Stub!");
    }

    public void setNetworkAvailable(boolean networkUp)
    {
        throw new RuntimeException("Stub!");
    }

    public WebBackForwardList saveState(Bundle outState)
    {
        throw new RuntimeException("Stub!");
    }

    public WebBackForwardList restoreState(Bundle inState)
    {
        throw new RuntimeException("Stub!");
    }

    public void loadUrl(String url, Map additionalHttpHeaders)
    {
        throw new RuntimeException("Stub!");
    }

    public void loadUrl(String url)
    {
        throw new RuntimeException("Stub!");
    }

    public void postUrl(String url, byte postData[])
    {
        throw new RuntimeException("Stub!");
    }

    public void loadData(String data, String mimeType, String encoding)
    {
        throw new RuntimeException("Stub!");
    }

    public void loadDataWithBaseURL(String baseUrl, String data, String mimeType, String encoding, String historyUrl)
    {
        throw new RuntimeException("Stub!");
    }

    public void evaluateJavascript(String script, ValueCallback resultCallback)
    {
        throw new RuntimeException("Stub!");
    }

    public void saveWebArchive(String filename)
    {
        throw new RuntimeException("Stub!");
    }

    public void saveWebArchive(String basename, boolean autoname, ValueCallback callback)
    {
        throw new RuntimeException("Stub!");
    }

    public void stopLoading()
    {
        throw new RuntimeException("Stub!");
    }

    public void reload()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean canGoBack()
    {
        throw new RuntimeException("Stub!");
    }

    public void goBack()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean canGoForward()
    {
        throw new RuntimeException("Stub!");
    }

    public void goForward()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean canGoBackOrForward(int steps)
    {
        throw new RuntimeException("Stub!");
    }

    public void goBackOrForward(int steps)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isPrivateBrowsingEnabled()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean pageUp(boolean top)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean pageDown(boolean bottom)
    {
        throw new RuntimeException("Stub!");
    }

    public void postVisualStateCallback(long requestId, VisualStateCallback callback)
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method clearView is deprecated
     */

    public void clearView()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method capturePicture is deprecated
     */

    public Picture capturePicture()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method createPrintDocumentAdapter is deprecated
     */

    public PrintDocumentAdapter createPrintDocumentAdapter()
    {
        throw new RuntimeException("Stub!");
    }

    public PrintDocumentAdapter createPrintDocumentAdapter(String documentName)
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method getScale is deprecated
     */

    public float getScale()
    {
        throw new RuntimeException("Stub!");
    }

    public void setInitialScale(int scaleInPercent)
    {
        throw new RuntimeException("Stub!");
    }

    public void invokeZoomPicker()
    {
        throw new RuntimeException("Stub!");
    }

    public HitTestResult getHitTestResult()
    {
        throw new RuntimeException("Stub!");
    }

    public void requestFocusNodeHref(Message hrefMsg)
    {
        throw new RuntimeException("Stub!");
    }

    public void requestImageRef(Message msg)
    {
        throw new RuntimeException("Stub!");
    }

    public String getUrl()
    {
        throw new RuntimeException("Stub!");
    }

    public String getOriginalUrl()
    {
        throw new RuntimeException("Stub!");
    }

    public String getTitle()
    {
        throw new RuntimeException("Stub!");
    }

    public Bitmap getFavicon()
    {
        throw new RuntimeException("Stub!");
    }

    public int getProgress()
    {
        throw new RuntimeException("Stub!");
    }

    public int getContentHeight()
    {
        throw new RuntimeException("Stub!");
    }

    public void pauseTimers()
    {
        throw new RuntimeException("Stub!");
    }

    public void resumeTimers()
    {
        throw new RuntimeException("Stub!");
    }

    public void onPause()
    {
        throw new RuntimeException("Stub!");
    }

    public void onResume()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method freeMemory is deprecated
     */

    public void freeMemory()
    {
        throw new RuntimeException("Stub!");
    }

    public void clearCache(boolean includeDiskFiles)
    {
        throw new RuntimeException("Stub!");
    }

    public void clearFormData()
    {
        throw new RuntimeException("Stub!");
    }

    public void clearHistory()
    {
        throw new RuntimeException("Stub!");
    }

    public void clearSslPreferences()
    {
        throw new RuntimeException("Stub!");
    }

    public static void clearClientCertPreferences(Runnable onCleared)
    {
        throw new RuntimeException("Stub!");
    }

    public static void startSafeBrowsing(Context context, ValueCallback callback)
    {
        throw new RuntimeException("Stub!");
    }

    public static void setSafeBrowsingWhitelist(List hosts, ValueCallback callback)
    {
        throw new RuntimeException("Stub!");
    }

    public static Uri getSafeBrowsingPrivacyPolicyUrl()
    {
        throw new RuntimeException("Stub!");
    }

    public WebBackForwardList copyBackForwardList()
    {
        throw new RuntimeException("Stub!");
    }

    public void setFindListener(FindListener listener)
    {
        throw new RuntimeException("Stub!");
    }

    public void findNext(boolean forward)
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method findAll is deprecated
     */

    public int findAll(String find)
    {
        throw new RuntimeException("Stub!");
    }

    public void findAllAsync(String find)
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method showFindDialog is deprecated
     */

    public boolean showFindDialog(String text, boolean showIme)
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method findAddress is deprecated
     */

    public static String findAddress(String addr)
    {
        throw new RuntimeException("Stub!");
    }

    public static void enableSlowWholeDocumentDraw()
    {
        throw new RuntimeException("Stub!");
    }

    public void clearMatches()
    {
        throw new RuntimeException("Stub!");
    }

    public void documentHasImages(Message response)
    {
        throw new RuntimeException("Stub!");
    }

    public void setWebViewClient(WebViewClient client)
    {
        throw new RuntimeException("Stub!");
    }

    public WebViewClient getWebViewClient()
    {
        throw new RuntimeException("Stub!");
    }

    public WebViewRenderProcess getWebViewRenderProcess()
    {
        throw new RuntimeException("Stub!");
    }

    public void setWebViewRenderProcessClient(Executor executor, WebViewRenderProcessClient webViewRenderProcessClient)
    {
        throw new RuntimeException("Stub!");
    }

    public void setWebViewRenderProcessClient(WebViewRenderProcessClient webViewRenderProcessClient)
    {
        throw new RuntimeException("Stub!");
    }

    public WebViewRenderProcessClient getWebViewRenderProcessClient()
    {
        throw new RuntimeException("Stub!");
    }

    public void setDownloadListener(DownloadListener listener)
    {
        throw new RuntimeException("Stub!");
    }

    public void setWebChromeClient(WebChromeClient client)
    {
        throw new RuntimeException("Stub!");
    }

    public WebChromeClient getWebChromeClient()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method setPictureListener is deprecated
     */

    public void setPictureListener(PictureListener listener)
    {
        throw new RuntimeException("Stub!");
    }

    public void addJavascriptInterface(Object object, String name)
    {
        throw new RuntimeException("Stub!");
    }

    public void removeJavascriptInterface(String name)
    {
        throw new RuntimeException("Stub!");
    }

    public WebMessagePort[] createWebMessageChannel()
    {
        throw new RuntimeException("Stub!");
    }

    public void postWebMessage(WebMessage message, Uri targetOrigin)
    {
        throw new RuntimeException("Stub!");
    }

    public WebSettings getSettings()
    {
        throw new RuntimeException("Stub!");
    }

    public static void setWebContentsDebuggingEnabled(boolean enabled)
    {
        throw new RuntimeException("Stub!");
    }

    public static void setDataDirectorySuffix(String suffix)
    {
        throw new RuntimeException("Stub!");
    }

    public static void disableWebView()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method onChildViewAdded is deprecated
     */

    public void onChildViewAdded(View parent, View child)
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method onChildViewRemoved is deprecated
     */

    public void onChildViewRemoved(View p, View child)
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method onGlobalFocusChanged is deprecated
     */

    public void onGlobalFocusChanged(View oldFocus, View newFocus)
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method setMapTrackballToArrowKeys is deprecated
     */

    public void setMapTrackballToArrowKeys(boolean setMap)
    {
        throw new RuntimeException("Stub!");
    }

    public void flingScroll(int vx, int vy)
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method canZoomIn is deprecated
     */

    public boolean canZoomIn()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method canZoomOut is deprecated
     */

    public boolean canZoomOut()
    {
        throw new RuntimeException("Stub!");
    }

    public void zoomBy(float zoomFactor)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean zoomIn()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean zoomOut()
    {
        throw new RuntimeException("Stub!");
    }

    public void setRendererPriorityPolicy(int rendererRequestedPriority, boolean waivedWhenNotVisible)
    {
        throw new RuntimeException("Stub!");
    }

    public int getRendererRequestedPriority()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean getRendererPriorityWaivedWhenNotVisible()
    {
        throw new RuntimeException("Stub!");
    }

    public void setTextClassifier(TextClassifier textClassifier)
    {
        throw new RuntimeException("Stub!");
    }

    public TextClassifier getTextClassifier()
    {
        throw new RuntimeException("Stub!");
    }

    public static ClassLoader getWebViewClassLoader()
    {
        throw new RuntimeException("Stub!");
    }

    public Looper getWebViewLooper()
    {
        throw new RuntimeException("Stub!");
    }

    protected void onAttachedToWindow()
    {
        throw new RuntimeException("Stub!");
    }

    public void setLayoutParams(android.view.ViewGroup.LayoutParams params)
    {
        throw new RuntimeException("Stub!");
    }

    public void setOverScrollMode(int mode)
    {
        throw new RuntimeException("Stub!");
    }

    public void setScrollBarStyle(int style)
    {
        throw new RuntimeException("Stub!");
    }

    protected int computeHorizontalScrollRange()
    {
        throw new RuntimeException("Stub!");
    }

    protected int computeHorizontalScrollOffset()
    {
        throw new RuntimeException("Stub!");
    }

    protected int computeVerticalScrollRange()
    {
        throw new RuntimeException("Stub!");
    }

    protected int computeVerticalScrollOffset()
    {
        throw new RuntimeException("Stub!");
    }

    protected int computeVerticalScrollExtent()
    {
        throw new RuntimeException("Stub!");
    }

    public void computeScroll()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean onHoverEvent(MotionEvent event)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean onTouchEvent(MotionEvent event)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean onGenericMotionEvent(MotionEvent event)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean onTrackballEvent(MotionEvent event)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean onKeyDown(int keyCode, KeyEvent event)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean onKeyUp(int keyCode, KeyEvent event)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean onKeyMultiple(int keyCode, int repeatCount, KeyEvent event)
    {
        throw new RuntimeException("Stub!");
    }

    public AccessibilityNodeProvider getAccessibilityNodeProvider()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method shouldDelayChildPressedState is deprecated
     */

    public boolean shouldDelayChildPressedState()
    {
        throw new RuntimeException("Stub!");
    }

    public CharSequence getAccessibilityClassName()
    {
        throw new RuntimeException("Stub!");
    }

    public void onProvideVirtualStructure(ViewStructure structure)
    {
        throw new RuntimeException("Stub!");
    }

    public void onProvideAutofillVirtualStructure(ViewStructure structure, int flags)
    {
        throw new RuntimeException("Stub!");
    }

    public void autofill(SparseArray values)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isVisibleToUserForAutofill(int virtualId)
    {
        throw new RuntimeException("Stub!");
    }

    protected void onOverScrolled(int scrollX, int scrollY, boolean clampedX, boolean clampedY)
    {
        throw new RuntimeException("Stub!");
    }

    protected void onWindowVisibilityChanged(int visibility)
    {
        throw new RuntimeException("Stub!");
    }

    protected void onDraw(Canvas canvas)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean performLongClick()
    {
        throw new RuntimeException("Stub!");
    }

    protected void onConfigurationChanged(Configuration newConfig)
    {
        throw new RuntimeException("Stub!");
    }

    public InputConnection onCreateInputConnection(EditorInfo outAttrs)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean onDragEvent(DragEvent event)
    {
        throw new RuntimeException("Stub!");
    }

    protected void onVisibilityChanged(View changedView, int visibility)
    {
        throw new RuntimeException("Stub!");
    }

    public void onWindowFocusChanged(boolean hasWindowFocus)
    {
        throw new RuntimeException("Stub!");
    }

    protected void onFocusChanged(boolean focused, int direction, Rect previouslyFocusedRect)
    {
        throw new RuntimeException("Stub!");
    }

    protected void onSizeChanged(int w, int h, int ow, int oh)
    {
        throw new RuntimeException("Stub!");
    }

    protected void onScrollChanged(int l, int t, int oldl, int oldt)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean dispatchKeyEvent(KeyEvent event)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean requestFocus(int direction, Rect previouslyFocusedRect)
    {
        throw new RuntimeException("Stub!");
    }

    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean requestChildRectangleOnScreen(View child, Rect rect, boolean immediate)
    {
        throw new RuntimeException("Stub!");
    }

    public void setBackgroundColor(int color)
    {
        throw new RuntimeException("Stub!");
    }

    public void setLayerType(int layerType, Paint paint)
    {
        throw new RuntimeException("Stub!");
    }

    protected void dispatchDraw(Canvas canvas)
    {
        throw new RuntimeException("Stub!");
    }

    public void onStartTemporaryDetach()
    {
        throw new RuntimeException("Stub!");
    }

    public void onFinishTemporaryDetach()
    {
        throw new RuntimeException("Stub!");
    }

    public Handler getHandler()
    {
        throw new RuntimeException("Stub!");
    }

    public View findFocus()
    {
        throw new RuntimeException("Stub!");
    }

    public static PackageInfo getCurrentWebViewPackage()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean onCheckIsTextEditor()
    {
        throw new RuntimeException("Stub!");
    }

    public static final int RENDERER_PRIORITY_BOUND = 1;
    public static final int RENDERER_PRIORITY_IMPORTANT = 2;
    public static final int RENDERER_PRIORITY_WAIVED = 0;
    public static final String SCHEME_GEO = "geo:0,0?q=";
    public static final String SCHEME_MAILTO = "mailto:";
    public static final String SCHEME_TEL = "tel:";
}
