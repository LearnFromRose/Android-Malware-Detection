// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   Sampler.java

package android.renderscript;


// Referenced classes of package android.renderscript:
//            BaseObj, RenderScript

public class Sampler extends BaseObj
{
    public static final class Value extends Enum
    {

        public static Value[] values()
        {
            return (Value[])$VALUES.clone();
        }

        public static Value valueOf(String name)
        {
            return (Value)Enum.valueOf(android/renderscript/Sampler$Value, name);
        }

        public static final Value NEAREST;
        public static final Value LINEAR;
        public static final Value LINEAR_MIP_LINEAR;
        public static final Value LINEAR_MIP_NEAREST;
        public static final Value WRAP;
        public static final Value CLAMP;
        public static final Value MIRRORED_REPEAT;
        private static final Value $VALUES[];

        static 
        {
            NEAREST = new Value("NEAREST", 0);
            LINEAR = new Value("LINEAR", 1);
            LINEAR_MIP_LINEAR = new Value("LINEAR_MIP_LINEAR", 2);
            LINEAR_MIP_NEAREST = new Value("LINEAR_MIP_NEAREST", 3);
            WRAP = new Value("WRAP", 4);
            CLAMP = new Value("CLAMP", 5);
            MIRRORED_REPEAT = new Value("MIRRORED_REPEAT", 6);
            $VALUES = (new Value[] {
                NEAREST, LINEAR, LINEAR_MIP_LINEAR, LINEAR_MIP_NEAREST, WRAP, CLAMP, MIRRORED_REPEAT
            });
        }

        private Value(String s, int i)
        {
            super(s, i);
        }
    }

    public static class Builder
    {

        public void setMinification(Value v)
        {
            throw new RuntimeException("Stub!");
        }

        public void setMagnification(Value v)
        {
            throw new RuntimeException("Stub!");
        }

        public void setWrapS(Value v)
        {
            throw new RuntimeException("Stub!");
        }

        public void setWrapT(Value v)
        {
            throw new RuntimeException("Stub!");
        }

        public void setAnisotropy(float v)
        {
            throw new RuntimeException("Stub!");
        }

        public Sampler create()
        {
            throw new RuntimeException("Stub!");
        }

        public Builder(RenderScript rs)
        {
            throw new RuntimeException("Stub!");
        }
    }


    Sampler(long id, RenderScript rs)
    {
        super(0L, null);
        throw new RuntimeException("Stub!");
    }

    public Value getMinification()
    {
        throw new RuntimeException("Stub!");
    }

    public Value getMagnification()
    {
        throw new RuntimeException("Stub!");
    }

    public Value getWrapS()
    {
        throw new RuntimeException("Stub!");
    }

    public Value getWrapT()
    {
        throw new RuntimeException("Stub!");
    }

    public float getAnisotropy()
    {
        throw new RuntimeException("Stub!");
    }

    public static Sampler CLAMP_NEAREST(RenderScript rs)
    {
        throw new RuntimeException("Stub!");
    }

    public static Sampler CLAMP_LINEAR(RenderScript rs)
    {
        throw new RuntimeException("Stub!");
    }

    public static Sampler CLAMP_LINEAR_MIP_LINEAR(RenderScript rs)
    {
        throw new RuntimeException("Stub!");
    }

    public static Sampler WRAP_NEAREST(RenderScript rs)
    {
        throw new RuntimeException("Stub!");
    }

    public static Sampler WRAP_LINEAR(RenderScript rs)
    {
        throw new RuntimeException("Stub!");
    }

    public static Sampler WRAP_LINEAR_MIP_LINEAR(RenderScript rs)
    {
        throw new RuntimeException("Stub!");
    }

    public static Sampler MIRRORED_REPEAT_NEAREST(RenderScript rs)
    {
        throw new RuntimeException("Stub!");
    }

    public static Sampler MIRRORED_REPEAT_LINEAR(RenderScript rs)
    {
        throw new RuntimeException("Stub!");
    }

    public static Sampler MIRRORED_REPEAT_LINEAR_MIP_LINEAR(RenderScript rs)
    {
        throw new RuntimeException("Stub!");
    }
}
