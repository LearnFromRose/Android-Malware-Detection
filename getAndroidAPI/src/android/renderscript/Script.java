// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   Script.java

package android.renderscript;


// Referenced classes of package android.renderscript:
//            BaseObj, RenderScript, Element, FieldPacker, 
//            Allocation, Type

public class Script extends BaseObj
{
    public static final class LaunchOptions
    {

        public LaunchOptions setX(int xstartArg, int xendArg)
        {
            throw new RuntimeException("Stub!");
        }

        public LaunchOptions setY(int ystartArg, int yendArg)
        {
            throw new RuntimeException("Stub!");
        }

        public LaunchOptions setZ(int zstartArg, int zendArg)
        {
            throw new RuntimeException("Stub!");
        }

        public int getXStart()
        {
            throw new RuntimeException("Stub!");
        }

        public int getXEnd()
        {
            throw new RuntimeException("Stub!");
        }

        public int getYStart()
        {
            throw new RuntimeException("Stub!");
        }

        public int getYEnd()
        {
            throw new RuntimeException("Stub!");
        }

        public int getZStart()
        {
            throw new RuntimeException("Stub!");
        }

        public int getZEnd()
        {
            throw new RuntimeException("Stub!");
        }

        public LaunchOptions()
        {
            throw new RuntimeException("Stub!");
        }
    }

    public static final class KernelID extends BaseObj
    {

        KernelID(long id, RenderScript rs, Script s, int slot, int sig)
        {
            super(0L, null);
            throw new RuntimeException("Stub!");
        }
    }

    public static final class InvokeID extends BaseObj
    {

        InvokeID(long id, RenderScript rs, Script s, int slot)
        {
            super(0L, null);
            throw new RuntimeException("Stub!");
        }
    }

    public static final class FieldID extends BaseObj
    {

        FieldID(long id, RenderScript rs, Script s, int slot)
        {
            super(0L, null);
            throw new RuntimeException("Stub!");
        }
    }

    public static class FieldBase
    {

        protected void init(RenderScript rs, int dimx)
        {
            throw new RuntimeException("Stub!");
        }

        protected void init(RenderScript rs, int dimx, int usages)
        {
            throw new RuntimeException("Stub!");
        }

        public Element getElement()
        {
            throw new RuntimeException("Stub!");
        }

        public Type getType()
        {
            throw new RuntimeException("Stub!");
        }

        public Allocation getAllocation()
        {
            throw new RuntimeException("Stub!");
        }

        public void updateAllocation()
        {
            throw new RuntimeException("Stub!");
        }

        protected Allocation mAllocation;
        protected Element mElement;

        protected FieldBase()
        {
            throw new RuntimeException("Stub!");
        }
    }

    public static class Builder
    {

        Builder(RenderScript rs)
        {
            throw new RuntimeException("Stub!");
        }
    }


    Script(long id, RenderScript rs)
    {
        super(0L, null);
        throw new RuntimeException("Stub!");
    }

    protected KernelID createKernelID(int slot, int sig, Element ein, Element eout)
    {
        throw new RuntimeException("Stub!");
    }

    protected InvokeID createInvokeID(int slot)
    {
        throw new RuntimeException("Stub!");
    }

    protected FieldID createFieldID(int slot, Element e)
    {
        throw new RuntimeException("Stub!");
    }

    protected void invoke(int slot)
    {
        throw new RuntimeException("Stub!");
    }

    protected void invoke(int slot, FieldPacker v)
    {
        throw new RuntimeException("Stub!");
    }

    protected void forEach(int slot, Allocation ain, Allocation aout, FieldPacker v)
    {
        throw new RuntimeException("Stub!");
    }

    protected void forEach(int slot, Allocation ain, Allocation aout, FieldPacker v, LaunchOptions sc)
    {
        throw new RuntimeException("Stub!");
    }

    protected void forEach(int slot, Allocation ains[], Allocation aout, FieldPacker v)
    {
        throw new RuntimeException("Stub!");
    }

    protected void forEach(int slot, Allocation ains[], Allocation aout, FieldPacker v, LaunchOptions sc)
    {
        throw new RuntimeException("Stub!");
    }

    protected void reduce(int slot, Allocation ains[], Allocation aout, LaunchOptions sc)
    {
        throw new RuntimeException("Stub!");
    }

    public void bindAllocation(Allocation va, int slot)
    {
        throw new RuntimeException("Stub!");
    }

    public void setVar(int index, float v)
    {
        throw new RuntimeException("Stub!");
    }

    public float getVarF(int index)
    {
        throw new RuntimeException("Stub!");
    }

    public void setVar(int index, double v)
    {
        throw new RuntimeException("Stub!");
    }

    public double getVarD(int index)
    {
        throw new RuntimeException("Stub!");
    }

    public void setVar(int index, int v)
    {
        throw new RuntimeException("Stub!");
    }

    public int getVarI(int index)
    {
        throw new RuntimeException("Stub!");
    }

    public void setVar(int index, long v)
    {
        throw new RuntimeException("Stub!");
    }

    public long getVarJ(int index)
    {
        throw new RuntimeException("Stub!");
    }

    public void setVar(int index, boolean v)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean getVarB(int index)
    {
        throw new RuntimeException("Stub!");
    }

    public void setVar(int index, BaseObj o)
    {
        throw new RuntimeException("Stub!");
    }

    public void setVar(int index, FieldPacker v)
    {
        throw new RuntimeException("Stub!");
    }

    public void setVar(int index, FieldPacker v, Element e, int dims[])
    {
        throw new RuntimeException("Stub!");
    }

    public void getVarV(int index, FieldPacker v)
    {
        throw new RuntimeException("Stub!");
    }

    public void setTimeZone(String timeZone)
    {
        throw new RuntimeException("Stub!");
    }
}
