// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   ScriptIntrinsicBlend.java

package android.renderscript;


// Referenced classes of package android.renderscript:
//            ScriptIntrinsic, Script, RenderScript, Element, 
//            Allocation

public class ScriptIntrinsicBlend extends ScriptIntrinsic
{

    ScriptIntrinsicBlend(long id, RenderScript rs)
    {
        super(0L, null);
        throw new RuntimeException("Stub!");
    }

    public static ScriptIntrinsicBlend create(RenderScript rs, Element e)
    {
        throw new RuntimeException("Stub!");
    }

    public void forEachClear(Allocation ain, Allocation aout)
    {
        throw new RuntimeException("Stub!");
    }

    public void forEachClear(Allocation ain, Allocation aout, Script.LaunchOptions opt)
    {
        throw new RuntimeException("Stub!");
    }

    public Script.KernelID getKernelIDClear()
    {
        throw new RuntimeException("Stub!");
    }

    public void forEachSrc(Allocation ain, Allocation aout)
    {
        throw new RuntimeException("Stub!");
    }

    public void forEachSrc(Allocation ain, Allocation aout, Script.LaunchOptions opt)
    {
        throw new RuntimeException("Stub!");
    }

    public Script.KernelID getKernelIDSrc()
    {
        throw new RuntimeException("Stub!");
    }

    public void forEachDst(Allocation ain, Allocation aout)
    {
        throw new RuntimeException("Stub!");
    }

    public void forEachDst(Allocation ain, Allocation aout, Script.LaunchOptions opt)
    {
        throw new RuntimeException("Stub!");
    }

    public Script.KernelID getKernelIDDst()
    {
        throw new RuntimeException("Stub!");
    }

    public void forEachSrcOver(Allocation ain, Allocation aout)
    {
        throw new RuntimeException("Stub!");
    }

    public void forEachSrcOver(Allocation ain, Allocation aout, Script.LaunchOptions opt)
    {
        throw new RuntimeException("Stub!");
    }

    public Script.KernelID getKernelIDSrcOver()
    {
        throw new RuntimeException("Stub!");
    }

    public void forEachDstOver(Allocation ain, Allocation aout)
    {
        throw new RuntimeException("Stub!");
    }

    public void forEachDstOver(Allocation ain, Allocation aout, Script.LaunchOptions opt)
    {
        throw new RuntimeException("Stub!");
    }

    public Script.KernelID getKernelIDDstOver()
    {
        throw new RuntimeException("Stub!");
    }

    public void forEachSrcIn(Allocation ain, Allocation aout)
    {
        throw new RuntimeException("Stub!");
    }

    public void forEachSrcIn(Allocation ain, Allocation aout, Script.LaunchOptions opt)
    {
        throw new RuntimeException("Stub!");
    }

    public Script.KernelID getKernelIDSrcIn()
    {
        throw new RuntimeException("Stub!");
    }

    public void forEachDstIn(Allocation ain, Allocation aout)
    {
        throw new RuntimeException("Stub!");
    }

    public void forEachDstIn(Allocation ain, Allocation aout, Script.LaunchOptions opt)
    {
        throw new RuntimeException("Stub!");
    }

    public Script.KernelID getKernelIDDstIn()
    {
        throw new RuntimeException("Stub!");
    }

    public void forEachSrcOut(Allocation ain, Allocation aout)
    {
        throw new RuntimeException("Stub!");
    }

    public void forEachSrcOut(Allocation ain, Allocation aout, Script.LaunchOptions opt)
    {
        throw new RuntimeException("Stub!");
    }

    public Script.KernelID getKernelIDSrcOut()
    {
        throw new RuntimeException("Stub!");
    }

    public void forEachDstOut(Allocation ain, Allocation aout)
    {
        throw new RuntimeException("Stub!");
    }

    public void forEachDstOut(Allocation ain, Allocation aout, Script.LaunchOptions opt)
    {
        throw new RuntimeException("Stub!");
    }

    public Script.KernelID getKernelIDDstOut()
    {
        throw new RuntimeException("Stub!");
    }

    public void forEachSrcAtop(Allocation ain, Allocation aout)
    {
        throw new RuntimeException("Stub!");
    }

    public void forEachSrcAtop(Allocation ain, Allocation aout, Script.LaunchOptions opt)
    {
        throw new RuntimeException("Stub!");
    }

    public Script.KernelID getKernelIDSrcAtop()
    {
        throw new RuntimeException("Stub!");
    }

    public void forEachDstAtop(Allocation ain, Allocation aout)
    {
        throw new RuntimeException("Stub!");
    }

    public void forEachDstAtop(Allocation ain, Allocation aout, Script.LaunchOptions opt)
    {
        throw new RuntimeException("Stub!");
    }

    public Script.KernelID getKernelIDDstAtop()
    {
        throw new RuntimeException("Stub!");
    }

    public void forEachXor(Allocation ain, Allocation aout)
    {
        throw new RuntimeException("Stub!");
    }

    public void forEachXor(Allocation ain, Allocation aout, Script.LaunchOptions opt)
    {
        throw new RuntimeException("Stub!");
    }

    public Script.KernelID getKernelIDXor()
    {
        throw new RuntimeException("Stub!");
    }

    public void forEachMultiply(Allocation ain, Allocation aout)
    {
        throw new RuntimeException("Stub!");
    }

    public void forEachMultiply(Allocation ain, Allocation aout, Script.LaunchOptions opt)
    {
        throw new RuntimeException("Stub!");
    }

    public Script.KernelID getKernelIDMultiply()
    {
        throw new RuntimeException("Stub!");
    }

    public void forEachAdd(Allocation ain, Allocation aout)
    {
        throw new RuntimeException("Stub!");
    }

    public void forEachAdd(Allocation ain, Allocation aout, Script.LaunchOptions opt)
    {
        throw new RuntimeException("Stub!");
    }

    public Script.KernelID getKernelIDAdd()
    {
        throw new RuntimeException("Stub!");
    }

    public void forEachSubtract(Allocation ain, Allocation aout)
    {
        throw new RuntimeException("Stub!");
    }

    public void forEachSubtract(Allocation ain, Allocation aout, Script.LaunchOptions opt)
    {
        throw new RuntimeException("Stub!");
    }

    public Script.KernelID getKernelIDSubtract()
    {
        throw new RuntimeException("Stub!");
    }
}
