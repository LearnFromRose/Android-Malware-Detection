// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   Type.java

package android.renderscript;


// Referenced classes of package android.renderscript:
//            BaseObj, RenderScript, Element

public class Type extends BaseObj
{
    public static final class CubemapFace extends Enum
    {

        public static CubemapFace[] values()
        {
            return (CubemapFace[])$VALUES.clone();
        }

        public static CubemapFace valueOf(String name)
        {
            return (CubemapFace)Enum.valueOf(android/renderscript/Type$CubemapFace, name);
        }

        public static final CubemapFace POSITIVE_X;
        public static final CubemapFace NEGATIVE_X;
        public static final CubemapFace POSITIVE_Y;
        public static final CubemapFace NEGATIVE_Y;
        public static final CubemapFace POSITIVE_Z;
        public static final CubemapFace NEGATIVE_Z;
        /**
         * @deprecated Field POSITVE_X is deprecated
         */
        public static final CubemapFace POSITVE_X;
        /**
         * @deprecated Field POSITVE_Y is deprecated
         */
        public static final CubemapFace POSITVE_Y;
        /**
         * @deprecated Field POSITVE_Z is deprecated
         */
        public static final CubemapFace POSITVE_Z;
        private static final CubemapFace $VALUES[];

        static 
        {
            POSITIVE_X = new CubemapFace("POSITIVE_X", 0);
            NEGATIVE_X = new CubemapFace("NEGATIVE_X", 1);
            POSITIVE_Y = new CubemapFace("POSITIVE_Y", 2);
            NEGATIVE_Y = new CubemapFace("NEGATIVE_Y", 3);
            POSITIVE_Z = new CubemapFace("POSITIVE_Z", 4);
            NEGATIVE_Z = new CubemapFace("NEGATIVE_Z", 5);
            POSITVE_X = new CubemapFace("POSITVE_X", 6);
            POSITVE_Y = new CubemapFace("POSITVE_Y", 7);
            POSITVE_Z = new CubemapFace("POSITVE_Z", 8);
            $VALUES = (new CubemapFace[] {
                POSITIVE_X, NEGATIVE_X, POSITIVE_Y, NEGATIVE_Y, POSITIVE_Z, NEGATIVE_Z, POSITVE_X, POSITVE_Y, POSITVE_Z
            });
        }

        private CubemapFace(String s, int i)
        {
            super(s, i);
        }
    }

    public static class Builder
    {

        public Builder setX(int value)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setY(int value)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setZ(int value)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setMipmaps(boolean value)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setFaces(boolean value)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setYuvFormat(int yuvFormat)
        {
            throw new RuntimeException("Stub!");
        }

        public Type create()
        {
            throw new RuntimeException("Stub!");
        }

        public Builder(RenderScript rs, Element e)
        {
            throw new RuntimeException("Stub!");
        }
    }


    Type(long id, RenderScript rs)
    {
        super(0L, null);
        throw new RuntimeException("Stub!");
    }

    public Element getElement()
    {
        throw new RuntimeException("Stub!");
    }

    public int getX()
    {
        throw new RuntimeException("Stub!");
    }

    public int getY()
    {
        throw new RuntimeException("Stub!");
    }

    public int getZ()
    {
        throw new RuntimeException("Stub!");
    }

    public int getYuv()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean hasMipmaps()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean hasFaces()
    {
        throw new RuntimeException("Stub!");
    }

    public int getCount()
    {
        throw new RuntimeException("Stub!");
    }

    public static Type createX(RenderScript rs, Element e, int dimX)
    {
        throw new RuntimeException("Stub!");
    }

    public static Type createXY(RenderScript rs, Element e, int dimX, int dimY)
    {
        throw new RuntimeException("Stub!");
    }

    public static Type createXYZ(RenderScript rs, Element e, int dimX, int dimY, int dimZ)
    {
        throw new RuntimeException("Stub!");
    }
}
