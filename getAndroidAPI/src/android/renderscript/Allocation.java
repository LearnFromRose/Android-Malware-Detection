// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   Allocation.java

package android.renderscript;

import android.content.res.Resources;
import android.graphics.Bitmap;
import android.view.Surface;
import java.nio.ByteBuffer;

// Referenced classes of package android.renderscript:
//            BaseObj, RenderScript, Type, Element, 
//            FieldPacker

public class Allocation extends BaseObj
{
    public static interface OnBufferAvailableListener
    {

        public abstract void onBufferAvailable(Allocation allocation);
    }

    public static final class MipmapControl extends Enum
    {

        public static MipmapControl[] values()
        {
            return (MipmapControl[])$VALUES.clone();
        }

        public static MipmapControl valueOf(String name)
        {
            return (MipmapControl)Enum.valueOf(android/renderscript/Allocation$MipmapControl, name);
        }

        public static final MipmapControl MIPMAP_NONE;
        public static final MipmapControl MIPMAP_FULL;
        public static final MipmapControl MIPMAP_ON_SYNC_TO_TEXTURE;
        private static final MipmapControl $VALUES[];

        static 
        {
            MIPMAP_NONE = new MipmapControl("MIPMAP_NONE", 0);
            MIPMAP_FULL = new MipmapControl("MIPMAP_FULL", 1);
            MIPMAP_ON_SYNC_TO_TEXTURE = new MipmapControl("MIPMAP_ON_SYNC_TO_TEXTURE", 2);
            $VALUES = (new MipmapControl[] {
                MIPMAP_NONE, MIPMAP_FULL, MIPMAP_ON_SYNC_TO_TEXTURE
            });
        }

        private MipmapControl(String s, int i)
        {
            super(s, i);
        }
    }


    Allocation(long id, RenderScript rs, Type t, int usage)
    {
        super(0L, null);
        throw new RuntimeException("Stub!");
    }

    public Element getElement()
    {
        throw new RuntimeException("Stub!");
    }

    public int getUsage()
    {
        throw new RuntimeException("Stub!");
    }

    public void setAutoPadding(boolean useAutoPadding)
    {
        throw new RuntimeException("Stub!");
    }

    public int getBytesSize()
    {
        throw new RuntimeException("Stub!");
    }

    protected void finalize()
        throws Throwable
    {
        throw new RuntimeException("Stub!");
    }

    public Type getType()
    {
        throw new RuntimeException("Stub!");
    }

    public void syncAll(int srcLocation)
    {
        throw new RuntimeException("Stub!");
    }

    public void ioSend()
    {
        throw new RuntimeException("Stub!");
    }

    public void ioReceive()
    {
        throw new RuntimeException("Stub!");
    }

    public void copyFrom(BaseObj d[])
    {
        throw new RuntimeException("Stub!");
    }

    public void copyFromUnchecked(Object array)
    {
        throw new RuntimeException("Stub!");
    }

    public void copyFromUnchecked(int d[])
    {
        throw new RuntimeException("Stub!");
    }

    public void copyFromUnchecked(short d[])
    {
        throw new RuntimeException("Stub!");
    }

    public void copyFromUnchecked(byte d[])
    {
        throw new RuntimeException("Stub!");
    }

    public void copyFromUnchecked(float d[])
    {
        throw new RuntimeException("Stub!");
    }

    public void copyFrom(Object array)
    {
        throw new RuntimeException("Stub!");
    }

    public void copyFrom(int d[])
    {
        throw new RuntimeException("Stub!");
    }

    public void copyFrom(short d[])
    {
        throw new RuntimeException("Stub!");
    }

    public void copyFrom(byte d[])
    {
        throw new RuntimeException("Stub!");
    }

    public void copyFrom(float d[])
    {
        throw new RuntimeException("Stub!");
    }

    public void copyFrom(Bitmap b)
    {
        throw new RuntimeException("Stub!");
    }

    public void copyFrom(Allocation a)
    {
        throw new RuntimeException("Stub!");
    }

    public void setFromFieldPacker(int xoff, FieldPacker fp)
    {
        throw new RuntimeException("Stub!");
    }

    public void setFromFieldPacker(int xoff, int component_number, FieldPacker fp)
    {
        throw new RuntimeException("Stub!");
    }

    public void setFromFieldPacker(int xoff, int yoff, int zoff, int component_number, FieldPacker fp)
    {
        throw new RuntimeException("Stub!");
    }

    public void generateMipmaps()
    {
        throw new RuntimeException("Stub!");
    }

    public void copy1DRangeFromUnchecked(int off, int count, Object array)
    {
        throw new RuntimeException("Stub!");
    }

    public void copy1DRangeFromUnchecked(int off, int count, int d[])
    {
        throw new RuntimeException("Stub!");
    }

    public void copy1DRangeFromUnchecked(int off, int count, short d[])
    {
        throw new RuntimeException("Stub!");
    }

    public void copy1DRangeFromUnchecked(int off, int count, byte d[])
    {
        throw new RuntimeException("Stub!");
    }

    public void copy1DRangeFromUnchecked(int off, int count, float d[])
    {
        throw new RuntimeException("Stub!");
    }

    public void copy1DRangeFrom(int off, int count, Object array)
    {
        throw new RuntimeException("Stub!");
    }

    public void copy1DRangeFrom(int off, int count, int d[])
    {
        throw new RuntimeException("Stub!");
    }

    public void copy1DRangeFrom(int off, int count, short d[])
    {
        throw new RuntimeException("Stub!");
    }

    public void copy1DRangeFrom(int off, int count, byte d[])
    {
        throw new RuntimeException("Stub!");
    }

    public void copy1DRangeFrom(int off, int count, float d[])
    {
        throw new RuntimeException("Stub!");
    }

    public void copy1DRangeFrom(int off, int count, Allocation data, int dataOff)
    {
        throw new RuntimeException("Stub!");
    }

    public void copy2DRangeFrom(int xoff, int yoff, int w, int h, Object array)
    {
        throw new RuntimeException("Stub!");
    }

    public void copy2DRangeFrom(int xoff, int yoff, int w, int h, byte data[])
    {
        throw new RuntimeException("Stub!");
    }

    public void copy2DRangeFrom(int xoff, int yoff, int w, int h, short data[])
    {
        throw new RuntimeException("Stub!");
    }

    public void copy2DRangeFrom(int xoff, int yoff, int w, int h, int data[])
    {
        throw new RuntimeException("Stub!");
    }

    public void copy2DRangeFrom(int xoff, int yoff, int w, int h, float data[])
    {
        throw new RuntimeException("Stub!");
    }

    public void copy2DRangeFrom(int xoff, int yoff, int w, int h, Allocation data, int dataXoff, int dataYoff)
    {
        throw new RuntimeException("Stub!");
    }

    public void copy2DRangeFrom(int xoff, int yoff, Bitmap data)
    {
        throw new RuntimeException("Stub!");
    }

    public void copy3DRangeFrom(int xoff, int yoff, int zoff, int w, int h, int d, Object array)
    {
        throw new RuntimeException("Stub!");
    }

    public void copy3DRangeFrom(int xoff, int yoff, int zoff, int w, int h, int d, Allocation data, 
            int dataXoff, int dataYoff, int dataZoff)
    {
        throw new RuntimeException("Stub!");
    }

    public void copyTo(Bitmap b)
    {
        throw new RuntimeException("Stub!");
    }

    public void copyTo(Object array)
    {
        throw new RuntimeException("Stub!");
    }

    public void copyTo(byte d[])
    {
        throw new RuntimeException("Stub!");
    }

    public void copyTo(short d[])
    {
        throw new RuntimeException("Stub!");
    }

    public void copyTo(int d[])
    {
        throw new RuntimeException("Stub!");
    }

    public void copyTo(float d[])
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method resize is deprecated
     */

    public synchronized void resize(int dimX)
    {
        throw new RuntimeException("Stub!");
    }

    public void copy1DRangeToUnchecked(int off, int count, Object array)
    {
        throw new RuntimeException("Stub!");
    }

    public void copy1DRangeToUnchecked(int off, int count, int d[])
    {
        throw new RuntimeException("Stub!");
    }

    public void copy1DRangeToUnchecked(int off, int count, short d[])
    {
        throw new RuntimeException("Stub!");
    }

    public void copy1DRangeToUnchecked(int off, int count, byte d[])
    {
        throw new RuntimeException("Stub!");
    }

    public void copy1DRangeToUnchecked(int off, int count, float d[])
    {
        throw new RuntimeException("Stub!");
    }

    public void copy1DRangeTo(int off, int count, Object array)
    {
        throw new RuntimeException("Stub!");
    }

    public void copy1DRangeTo(int off, int count, int d[])
    {
        throw new RuntimeException("Stub!");
    }

    public void copy1DRangeTo(int off, int count, short d[])
    {
        throw new RuntimeException("Stub!");
    }

    public void copy1DRangeTo(int off, int count, byte d[])
    {
        throw new RuntimeException("Stub!");
    }

    public void copy1DRangeTo(int off, int count, float d[])
    {
        throw new RuntimeException("Stub!");
    }

    public void copy2DRangeTo(int xoff, int yoff, int w, int h, Object array)
    {
        throw new RuntimeException("Stub!");
    }

    public void copy2DRangeTo(int xoff, int yoff, int w, int h, byte data[])
    {
        throw new RuntimeException("Stub!");
    }

    public void copy2DRangeTo(int xoff, int yoff, int w, int h, short data[])
    {
        throw new RuntimeException("Stub!");
    }

    public void copy2DRangeTo(int xoff, int yoff, int w, int h, int data[])
    {
        throw new RuntimeException("Stub!");
    }

    public void copy2DRangeTo(int xoff, int yoff, int w, int h, float data[])
    {
        throw new RuntimeException("Stub!");
    }

    public void copy3DRangeTo(int xoff, int yoff, int zoff, int w, int h, int d, Object array)
    {
        throw new RuntimeException("Stub!");
    }

    public static Allocation createTyped(RenderScript rs, Type type, MipmapControl mips, int usage)
    {
        throw new RuntimeException("Stub!");
    }

    public static Allocation createTyped(RenderScript rs, Type type, int usage)
    {
        throw new RuntimeException("Stub!");
    }

    public static Allocation createTyped(RenderScript rs, Type type)
    {
        throw new RuntimeException("Stub!");
    }

    public static Allocation createSized(RenderScript rs, Element e, int count, int usage)
    {
        throw new RuntimeException("Stub!");
    }

    public static Allocation createSized(RenderScript rs, Element e, int count)
    {
        throw new RuntimeException("Stub!");
    }

    public static Allocation createFromBitmap(RenderScript rs, Bitmap b, MipmapControl mips, int usage)
    {
        throw new RuntimeException("Stub!");
    }

    public ByteBuffer getByteBuffer()
    {
        throw new RuntimeException("Stub!");
    }

    public static Allocation[] createAllocations(RenderScript rs, Type t, int usage, int numAlloc)
    {
        throw new RuntimeException("Stub!");
    }

    public long getStride()
    {
        throw new RuntimeException("Stub!");
    }

    public long getTimeStamp()
    {
        throw new RuntimeException("Stub!");
    }

    public Surface getSurface()
    {
        throw new RuntimeException("Stub!");
    }

    public void setSurface(Surface sur)
    {
        throw new RuntimeException("Stub!");
    }

    public static Allocation createFromBitmap(RenderScript rs, Bitmap b)
    {
        throw new RuntimeException("Stub!");
    }

    public static Allocation createCubemapFromBitmap(RenderScript rs, Bitmap b, MipmapControl mips, int usage)
    {
        throw new RuntimeException("Stub!");
    }

    public static Allocation createCubemapFromBitmap(RenderScript rs, Bitmap b)
    {
        throw new RuntimeException("Stub!");
    }

    public static Allocation createCubemapFromCubeFaces(RenderScript rs, Bitmap xpos, Bitmap xneg, Bitmap ypos, Bitmap yneg, Bitmap zpos, Bitmap zneg, MipmapControl mips, 
            int usage)
    {
        throw new RuntimeException("Stub!");
    }

    public static Allocation createCubemapFromCubeFaces(RenderScript rs, Bitmap xpos, Bitmap xneg, Bitmap ypos, Bitmap yneg, Bitmap zpos, Bitmap zneg)
    {
        throw new RuntimeException("Stub!");
    }

    public static Allocation createFromBitmapResource(RenderScript rs, Resources res, int id, MipmapControl mips, int usage)
    {
        throw new RuntimeException("Stub!");
    }

    public static Allocation createFromBitmapResource(RenderScript rs, Resources res, int id)
    {
        throw new RuntimeException("Stub!");
    }

    public static Allocation createFromString(RenderScript rs, String str, int usage)
    {
        throw new RuntimeException("Stub!");
    }

    public void setOnBufferAvailableListener(OnBufferAvailableListener callback)
    {
        throw new RuntimeException("Stub!");
    }

    public void destroy()
    {
        throw new RuntimeException("Stub!");
    }

    public static final int USAGE_GRAPHICS_CONSTANTS = 8;
    public static final int USAGE_GRAPHICS_RENDER_TARGET = 16;
    public static final int USAGE_GRAPHICS_TEXTURE = 2;
    public static final int USAGE_GRAPHICS_VERTEX = 4;
    public static final int USAGE_IO_INPUT = 32;
    public static final int USAGE_IO_OUTPUT = 64;
    public static final int USAGE_SCRIPT = 1;
    public static final int USAGE_SHARED = 128;
}
