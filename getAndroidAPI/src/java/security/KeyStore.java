// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   KeyStore.java

package java.security;

import java.io.*;
import java.security.cert.Certificate;
import java.security.cert.CertificateException;
import java.security.spec.AlgorithmParameterSpec;
import java.util.*;
import javax.crypto.SecretKey;
import javax.security.auth.DestroyFailedException;
import javax.security.auth.Destroyable;
import javax.security.auth.callback.CallbackHandler;

// Referenced classes of package java.security:
//            KeyStoreException, NoSuchProviderException, NoSuchAlgorithmException, UnrecoverableKeyException, 
//            UnrecoverableEntryException, KeyStoreSpi, Provider, Key, 
//            PrivateKey

public class KeyStore
{
    public static final class TrustedCertificateEntry
        implements Entry
    {

        public Certificate getTrustedCertificate()
        {
            throw new RuntimeException("Stub!");
        }

        public Set getAttributes()
        {
            throw new RuntimeException("Stub!");
        }

        public String toString()
        {
            throw new RuntimeException("Stub!");
        }

        public TrustedCertificateEntry(Certificate trustedCert)
        {
            throw new RuntimeException("Stub!");
        }

        public TrustedCertificateEntry(Certificate trustedCert, Set attributes)
        {
            throw new RuntimeException("Stub!");
        }
    }

    public static final class SecretKeyEntry
        implements Entry
    {

        public SecretKey getSecretKey()
        {
            throw new RuntimeException("Stub!");
        }

        public Set getAttributes()
        {
            throw new RuntimeException("Stub!");
        }

        public String toString()
        {
            throw new RuntimeException("Stub!");
        }

        public SecretKeyEntry(SecretKey secretKey)
        {
            throw new RuntimeException("Stub!");
        }

        public SecretKeyEntry(SecretKey secretKey, Set attributes)
        {
            throw new RuntimeException("Stub!");
        }
    }

    public static interface ProtectionParameter
    {
    }

    public static final class PrivateKeyEntry
        implements Entry
    {

        public PrivateKey getPrivateKey()
        {
            throw new RuntimeException("Stub!");
        }

        public Certificate[] getCertificateChain()
        {
            throw new RuntimeException("Stub!");
        }

        public Certificate getCertificate()
        {
            throw new RuntimeException("Stub!");
        }

        public Set getAttributes()
        {
            throw new RuntimeException("Stub!");
        }

        public String toString()
        {
            throw new RuntimeException("Stub!");
        }

        public PrivateKeyEntry(PrivateKey privateKey, Certificate chain[])
        {
            throw new RuntimeException("Stub!");
        }

        public PrivateKeyEntry(PrivateKey privateKey, Certificate chain[], Set attributes)
        {
            throw new RuntimeException("Stub!");
        }
    }

    public static class PasswordProtection
        implements ProtectionParameter, Destroyable
    {

        public String getProtectionAlgorithm()
        {
            throw new RuntimeException("Stub!");
        }

        public AlgorithmParameterSpec getProtectionParameters()
        {
            throw new RuntimeException("Stub!");
        }

        public synchronized char[] getPassword()
        {
            throw new RuntimeException("Stub!");
        }

        public synchronized void destroy()
            throws DestroyFailedException
        {
            throw new RuntimeException("Stub!");
        }

        public synchronized boolean isDestroyed()
        {
            throw new RuntimeException("Stub!");
        }

        public PasswordProtection(char password[])
        {
            throw new RuntimeException("Stub!");
        }

        public PasswordProtection(char password[], String protectionAlgorithm, AlgorithmParameterSpec protectionParameters)
        {
            throw new RuntimeException("Stub!");
        }
    }

    public static interface LoadStoreParameter
    {

        public abstract ProtectionParameter getProtectionParameter();
    }

    public static interface Entry
    {
        public static interface Attribute
        {

            public abstract String getName();

            public abstract String getValue();
        }


        public Set getAttributes()
        {
            throw new RuntimeException("Stub!");
        }
    }

    public static class CallbackHandlerProtection
        implements ProtectionParameter
    {

        public CallbackHandler getCallbackHandler()
        {
            throw new RuntimeException("Stub!");
        }

        public CallbackHandlerProtection(CallbackHandler handler)
        {
            throw new RuntimeException("Stub!");
        }
    }

    public static abstract class Builder
    {

        public abstract KeyStore getKeyStore()
            throws KeyStoreException;

        public abstract ProtectionParameter getProtectionParameter(String s)
            throws KeyStoreException;

        public static Builder newInstance(KeyStore keyStore, ProtectionParameter protectionParameter)
        {
            throw new RuntimeException("Stub!");
        }

        public static Builder newInstance(String type, Provider provider, File file, ProtectionParameter protection)
        {
            throw new RuntimeException("Stub!");
        }

        public static Builder newInstance(String type, Provider provider, ProtectionParameter protection)
        {
            throw new RuntimeException("Stub!");
        }

        protected Builder()
        {
            throw new RuntimeException("Stub!");
        }
    }


    protected KeyStore(KeyStoreSpi keyStoreSpi, Provider provider, String type)
    {
        throw new RuntimeException("Stub!");
    }

    public static KeyStore getInstance(String type)
        throws KeyStoreException
    {
        throw new RuntimeException("Stub!");
    }

    public static KeyStore getInstance(String type, String provider)
        throws KeyStoreException, NoSuchProviderException
    {
        throw new RuntimeException("Stub!");
    }

    public static KeyStore getInstance(String type, Provider provider)
        throws KeyStoreException
    {
        throw new RuntimeException("Stub!");
    }

    public static final String getDefaultType()
    {
        throw new RuntimeException("Stub!");
    }

    public final Provider getProvider()
    {
        throw new RuntimeException("Stub!");
    }

    public final String getType()
    {
        throw new RuntimeException("Stub!");
    }

    public final Key getKey(String alias, char password[])
        throws KeyStoreException, NoSuchAlgorithmException, UnrecoverableKeyException
    {
        throw new RuntimeException("Stub!");
    }

    public final Certificate[] getCertificateChain(String alias)
        throws KeyStoreException
    {
        throw new RuntimeException("Stub!");
    }

    public final Certificate getCertificate(String alias)
        throws KeyStoreException
    {
        throw new RuntimeException("Stub!");
    }

    public final Date getCreationDate(String alias)
        throws KeyStoreException
    {
        throw new RuntimeException("Stub!");
    }

    public final void setKeyEntry(String alias, Key key, char password[], Certificate chain[])
        throws KeyStoreException
    {
        throw new RuntimeException("Stub!");
    }

    public final void setKeyEntry(String alias, byte key[], Certificate chain[])
        throws KeyStoreException
    {
        throw new RuntimeException("Stub!");
    }

    public final void setCertificateEntry(String alias, Certificate cert)
        throws KeyStoreException
    {
        throw new RuntimeException("Stub!");
    }

    public final void deleteEntry(String alias)
        throws KeyStoreException
    {
        throw new RuntimeException("Stub!");
    }

    public final Enumeration aliases()
        throws KeyStoreException
    {
        throw new RuntimeException("Stub!");
    }

    public final boolean containsAlias(String alias)
        throws KeyStoreException
    {
        throw new RuntimeException("Stub!");
    }

    public final int size()
        throws KeyStoreException
    {
        throw new RuntimeException("Stub!");
    }

    public final boolean isKeyEntry(String alias)
        throws KeyStoreException
    {
        throw new RuntimeException("Stub!");
    }

    public final boolean isCertificateEntry(String alias)
        throws KeyStoreException
    {
        throw new RuntimeException("Stub!");
    }

    public final String getCertificateAlias(Certificate cert)
        throws KeyStoreException
    {
        throw new RuntimeException("Stub!");
    }

    public final void store(OutputStream stream, char password[])
        throws CertificateException, IOException, KeyStoreException, NoSuchAlgorithmException
    {
        throw new RuntimeException("Stub!");
    }

    public final void store(LoadStoreParameter param)
        throws CertificateException, IOException, KeyStoreException, NoSuchAlgorithmException
    {
        throw new RuntimeException("Stub!");
    }

    public final void load(InputStream stream, char password[])
        throws CertificateException, IOException, NoSuchAlgorithmException
    {
        throw new RuntimeException("Stub!");
    }

    public final void load(LoadStoreParameter param)
        throws CertificateException, IOException, NoSuchAlgorithmException
    {
        throw new RuntimeException("Stub!");
    }

    public final Entry getEntry(String alias, ProtectionParameter protParam)
        throws KeyStoreException, NoSuchAlgorithmException, UnrecoverableEntryException
    {
        throw new RuntimeException("Stub!");
    }

    public final void setEntry(String alias, Entry entry, ProtectionParameter protParam)
        throws KeyStoreException
    {
        throw new RuntimeException("Stub!");
    }

    public final boolean entryInstanceOf(String alias, Class entryClass)
        throws KeyStoreException
    {
        throw new RuntimeException("Stub!");
    }
}
