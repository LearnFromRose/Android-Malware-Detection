// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   CertPathValidatorException.java

package java.security.cert;

import java.io.Serializable;
import java.security.GeneralSecurityException;

// Referenced classes of package java.security.cert:
//            CertPath

public class CertPathValidatorException extends GeneralSecurityException
{
    public static interface Reason
        extends Serializable
    {
    }

    public static final class BasicReason extends Enum
        implements Reason
    {

        public static BasicReason[] values()
        {
            return (BasicReason[])$VALUES.clone();
        }

        public static BasicReason valueOf(String name)
        {
            return (BasicReason)Enum.valueOf(java/security/cert/CertPathValidatorException$BasicReason, name);
        }

        public static final BasicReason UNSPECIFIED;
        public static final BasicReason EXPIRED;
        public static final BasicReason NOT_YET_VALID;
        public static final BasicReason REVOKED;
        public static final BasicReason UNDETERMINED_REVOCATION_STATUS;
        public static final BasicReason INVALID_SIGNATURE;
        public static final BasicReason ALGORITHM_CONSTRAINED;
        private static final BasicReason $VALUES[];

        static 
        {
            UNSPECIFIED = new BasicReason("UNSPECIFIED", 0);
            EXPIRED = new BasicReason("EXPIRED", 1);
            NOT_YET_VALID = new BasicReason("NOT_YET_VALID", 2);
            REVOKED = new BasicReason("REVOKED", 3);
            UNDETERMINED_REVOCATION_STATUS = new BasicReason("UNDETERMINED_REVOCATION_STATUS", 4);
            INVALID_SIGNATURE = new BasicReason("INVALID_SIGNATURE", 5);
            ALGORITHM_CONSTRAINED = new BasicReason("ALGORITHM_CONSTRAINED", 6);
            $VALUES = (new BasicReason[] {
                UNSPECIFIED, EXPIRED, NOT_YET_VALID, REVOKED, UNDETERMINED_REVOCATION_STATUS, INVALID_SIGNATURE, ALGORITHM_CONSTRAINED
            });
        }

        private BasicReason(String s, int i)
        {
            super(s, i);
        }
    }


    public CertPathValidatorException()
    {
        throw new RuntimeException("Stub!");
    }

    public CertPathValidatorException(String msg)
    {
        throw new RuntimeException("Stub!");
    }

    public CertPathValidatorException(Throwable cause)
    {
        throw new RuntimeException("Stub!");
    }

    public CertPathValidatorException(String msg, Throwable cause)
    {
        throw new RuntimeException("Stub!");
    }

    public CertPathValidatorException(String msg, Throwable cause, CertPath certPath, int index)
    {
        throw new RuntimeException("Stub!");
    }

    public CertPathValidatorException(String msg, Throwable cause, CertPath certPath, int index, Reason reason)
    {
        throw new RuntimeException("Stub!");
    }

    public CertPath getCertPath()
    {
        throw new RuntimeException("Stub!");
    }

    public int getIndex()
    {
        throw new RuntimeException("Stub!");
    }

    public Reason getReason()
    {
        throw new RuntimeException("Stub!");
    }
}
