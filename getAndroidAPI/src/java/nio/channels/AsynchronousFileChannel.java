// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   AsynchronousFileChannel.java

package java.nio.channels;

import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.file.OpenOption;
import java.nio.file.Path;
import java.nio.file.attribute.FileAttribute;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Future;

// Referenced classes of package java.nio.channels:
//            AsynchronousChannel, CompletionHandler, FileLock

public abstract class AsynchronousFileChannel
    implements AsynchronousChannel
{

    protected AsynchronousFileChannel()
    {
        throw new RuntimeException("Stub!");
    }

    public static transient AsynchronousFileChannel open(Path file, Set options, ExecutorService executor, FileAttribute attrs[])
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public static transient AsynchronousFileChannel open(Path file, OpenOption options[])
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public abstract long size()
        throws IOException;

    public abstract AsynchronousFileChannel truncate(long l)
        throws IOException;

    public abstract void force(boolean flag)
        throws IOException;

    public abstract void lock(long l, long l1, boolean flag, Object obj, CompletionHandler completionhandler);

    public final void lock(Object attachment, CompletionHandler handler)
    {
        throw new RuntimeException("Stub!");
    }

    public abstract Future lock(long l, long l1, boolean flag);

    public final Future lock()
    {
        throw new RuntimeException("Stub!");
    }

    public abstract FileLock tryLock(long l, long l1, boolean flag)
        throws IOException;

    public final FileLock tryLock()
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public abstract void read(ByteBuffer bytebuffer, long l, Object obj, CompletionHandler completionhandler);

    public abstract Future read(ByteBuffer bytebuffer, long l);

    public abstract void write(ByteBuffer bytebuffer, long l, Object obj, CompletionHandler completionhandler);

    public abstract Future write(ByteBuffer bytebuffer, long l);
}
