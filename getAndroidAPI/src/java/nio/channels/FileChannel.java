// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   FileChannel.java

package java.nio.channels;

import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.MappedByteBuffer;
import java.nio.channels.spi.AbstractInterruptibleChannel;
import java.nio.file.OpenOption;
import java.nio.file.Path;
import java.nio.file.attribute.FileAttribute;
import java.util.Set;

// Referenced classes of package java.nio.channels:
//            SeekableByteChannel, GatheringByteChannel, ScatteringByteChannel, WritableByteChannel, 
//            ReadableByteChannel, FileLock

public abstract class FileChannel extends AbstractInterruptibleChannel
    implements SeekableByteChannel, GatheringByteChannel, ScatteringByteChannel
{
    public static class MapMode
    {

        public String toString()
        {
            throw new RuntimeException("Stub!");
        }

        public static final MapMode PRIVATE = null;
        public static final MapMode READ_ONLY = null;
        public static final MapMode READ_WRITE = null;


        MapMode(String name)
        {
            throw new RuntimeException("Stub!");
        }
    }


    protected FileChannel()
    {
        throw new RuntimeException("Stub!");
    }

    public static transient FileChannel open(Path path, Set options, FileAttribute attrs[])
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public static transient FileChannel open(Path path, OpenOption options[])
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public abstract int read(ByteBuffer bytebuffer)
        throws IOException;

    public abstract long read(ByteBuffer abytebuffer[], int i, int j)
        throws IOException;

    public final long read(ByteBuffer dsts[])
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public abstract int write(ByteBuffer bytebuffer)
        throws IOException;

    public abstract long write(ByteBuffer abytebuffer[], int i, int j)
        throws IOException;

    public final long write(ByteBuffer srcs[])
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public abstract long position()
        throws IOException;

    public abstract FileChannel position(long l)
        throws IOException;

    public abstract long size()
        throws IOException;

    public abstract FileChannel truncate(long l)
        throws IOException;

    public abstract void force(boolean flag)
        throws IOException;

    public abstract long transferTo(long l, long l1, WritableByteChannel writablebytechannel)
        throws IOException;

    public abstract long transferFrom(ReadableByteChannel readablebytechannel, long l, long l1)
        throws IOException;

    public abstract int read(ByteBuffer bytebuffer, long l)
        throws IOException;

    public abstract int write(ByteBuffer bytebuffer, long l)
        throws IOException;

    public abstract MappedByteBuffer map(MapMode mapmode, long l, long l1)
        throws IOException;

    public abstract FileLock lock(long l, long l1, boolean flag)
        throws IOException;

    public final FileLock lock()
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public abstract FileLock tryLock(long l, long l1, boolean flag)
        throws IOException;

    public final FileLock tryLock()
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public volatile SeekableByteChannel truncate(long l)
        throws IOException
    {
        return truncate(l);
    }

    public volatile SeekableByteChannel position(long l)
        throws IOException
    {
        return position(l);
    }
}
