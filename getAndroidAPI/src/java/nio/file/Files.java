// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   Files.java

package java.nio.file;

import java.io.*;
import java.nio.channels.SeekableByteChannel;
import java.nio.charset.Charset;
import java.nio.file.attribute.*;
import java.util.*;
import java.util.function.BiPredicate;
import java.util.stream.Stream;

// Referenced classes of package java.nio.file:
//            DirectoryStream, Path, OpenOption, CopyOption, 
//            FileStore, LinkOption, FileVisitor, FileVisitOption

public final class Files
{

    Files()
    {
        throw new RuntimeException("Stub!");
    }

    public static transient InputStream newInputStream(Path path, OpenOption options[])
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public static transient OutputStream newOutputStream(Path path, OpenOption options[])
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public static transient SeekableByteChannel newByteChannel(Path path, Set options, FileAttribute attrs[])
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public static transient SeekableByteChannel newByteChannel(Path path, OpenOption options[])
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public static DirectoryStream newDirectoryStream(Path dir)
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public static DirectoryStream newDirectoryStream(Path dir, String glob)
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public static DirectoryStream newDirectoryStream(Path dir, DirectoryStream.Filter filter)
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public static transient Path createFile(Path path, FileAttribute attrs[])
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public static transient Path createDirectory(Path dir, FileAttribute attrs[])
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public static transient Path createDirectories(Path dir, FileAttribute attrs[])
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public static transient Path createTempFile(Path dir, String prefix, String suffix, FileAttribute attrs[])
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public static transient Path createTempFile(String prefix, String suffix, FileAttribute attrs[])
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public static transient Path createTempDirectory(Path dir, String prefix, FileAttribute attrs[])
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public static transient Path createTempDirectory(String prefix, FileAttribute attrs[])
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public static transient Path createSymbolicLink(Path link, Path target, FileAttribute attrs[])
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public static Path createLink(Path link, Path existing)
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public static void delete(Path path)
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public static boolean deleteIfExists(Path path)
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public static transient Path copy(Path source, Path target, CopyOption options[])
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public static transient Path move(Path source, Path target, CopyOption options[])
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public static Path readSymbolicLink(Path link)
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public static FileStore getFileStore(Path path)
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public static boolean isSameFile(Path path, Path path2)
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public static boolean isHidden(Path path)
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public static String probeContentType(Path path)
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public static transient FileAttributeView getFileAttributeView(Path path, Class type, LinkOption options[])
    {
        throw new RuntimeException("Stub!");
    }

    public static transient BasicFileAttributes readAttributes(Path path, Class type, LinkOption options[])
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public static transient Path setAttribute(Path path, String attribute, Object value, LinkOption options[])
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public static transient Object getAttribute(Path path, String attribute, LinkOption options[])
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public static transient Map readAttributes(Path path, String attributes, LinkOption options[])
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public static transient Set getPosixFilePermissions(Path path, LinkOption options[])
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public static Path setPosixFilePermissions(Path path, Set perms)
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public static transient UserPrincipal getOwner(Path path, LinkOption options[])
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public static Path setOwner(Path path, UserPrincipal owner)
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public static boolean isSymbolicLink(Path path)
    {
        throw new RuntimeException("Stub!");
    }

    public static transient boolean isDirectory(Path path, LinkOption options[])
    {
        throw new RuntimeException("Stub!");
    }

    public static transient boolean isRegularFile(Path path, LinkOption options[])
    {
        throw new RuntimeException("Stub!");
    }

    public static transient FileTime getLastModifiedTime(Path path, LinkOption options[])
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public static Path setLastModifiedTime(Path path, FileTime time)
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public static long size(Path path)
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public static transient boolean exists(Path path, LinkOption options[])
    {
        throw new RuntimeException("Stub!");
    }

    public static transient boolean notExists(Path path, LinkOption options[])
    {
        throw new RuntimeException("Stub!");
    }

    public static boolean isReadable(Path path)
    {
        throw new RuntimeException("Stub!");
    }

    public static boolean isWritable(Path path)
    {
        throw new RuntimeException("Stub!");
    }

    public static boolean isExecutable(Path path)
    {
        throw new RuntimeException("Stub!");
    }

    public static Path walkFileTree(Path start, Set options, int maxDepth, FileVisitor visitor)
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public static Path walkFileTree(Path start, FileVisitor visitor)
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public static BufferedReader newBufferedReader(Path path, Charset cs)
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public static BufferedReader newBufferedReader(Path path)
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public static transient BufferedWriter newBufferedWriter(Path path, Charset cs, OpenOption options[])
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public static transient BufferedWriter newBufferedWriter(Path path, OpenOption options[])
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public static transient long copy(InputStream in, Path target, CopyOption options[])
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public static long copy(Path source, OutputStream out)
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public static byte[] readAllBytes(Path path)
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public static List readAllLines(Path path, Charset cs)
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public static List readAllLines(Path path)
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public static transient Path write(Path path, byte bytes[], OpenOption options[])
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public static transient Path write(Path path, Iterable lines, Charset cs, OpenOption options[])
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public static transient Path write(Path path, Iterable lines, OpenOption options[])
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public static Stream list(Path dir)
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public static transient Stream walk(Path start, int maxDepth, FileVisitOption options[])
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public static transient Stream walk(Path start, FileVisitOption options[])
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public static transient Stream find(Path start, int maxDepth, BiPredicate matcher, FileVisitOption options[])
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public static Stream lines(Path path, Charset cs)
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public static Stream lines(Path path)
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }
}
