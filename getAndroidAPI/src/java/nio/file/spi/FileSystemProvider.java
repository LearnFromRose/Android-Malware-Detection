// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   FileSystemProvider.java

package java.nio.file.spi;

import java.io.*;
import java.net.URI;
import java.nio.channels.*;
import java.nio.file.*;
import java.nio.file.attribute.*;
import java.util.*;
import java.util.concurrent.ExecutorService;

public abstract class FileSystemProvider
{

    protected FileSystemProvider()
    {
        throw new RuntimeException("Stub!");
    }

    public static List installedProviders()
    {
        throw new RuntimeException("Stub!");
    }

    public abstract String getScheme();

    public abstract FileSystem newFileSystem(URI uri, Map map)
        throws IOException;

    public abstract FileSystem getFileSystem(URI uri);

    public abstract Path getPath(URI uri);

    public FileSystem newFileSystem(Path path, Map env)
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public transient InputStream newInputStream(Path path, OpenOption options[])
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public transient OutputStream newOutputStream(Path path, OpenOption options[])
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public transient FileChannel newFileChannel(Path path, Set options, FileAttribute attrs[])
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public transient AsynchronousFileChannel newAsynchronousFileChannel(Path path, Set options, ExecutorService executor, FileAttribute attrs[])
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public transient abstract SeekableByteChannel newByteChannel(Path path, Set set, FileAttribute afileattribute[])
        throws IOException;

    public abstract DirectoryStream newDirectoryStream(Path path, java.nio.file.DirectoryStream.Filter filter)
        throws IOException;

    public transient abstract void createDirectory(Path path, FileAttribute afileattribute[])
        throws IOException;

    public transient void createSymbolicLink(Path link, Path target, FileAttribute attrs[])
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public void createLink(Path link, Path existing)
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public abstract void delete(Path path)
        throws IOException;

    public boolean deleteIfExists(Path path)
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public Path readSymbolicLink(Path link)
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public transient abstract void copy(Path path, Path path1, CopyOption acopyoption[])
        throws IOException;

    public transient abstract void move(Path path, Path path1, CopyOption acopyoption[])
        throws IOException;

    public abstract boolean isSameFile(Path path, Path path1)
        throws IOException;

    public abstract boolean isHidden(Path path)
        throws IOException;

    public abstract FileStore getFileStore(Path path)
        throws IOException;

    public transient abstract void checkAccess(Path path, AccessMode aaccessmode[])
        throws IOException;

    public transient abstract FileAttributeView getFileAttributeView(Path path, Class class1, LinkOption alinkoption[]);

    public transient abstract BasicFileAttributes readAttributes(Path path, Class class1, LinkOption alinkoption[])
        throws IOException;

    public transient abstract Map readAttributes(Path path, String s, LinkOption alinkoption[])
        throws IOException;

    public transient abstract void setAttribute(Path path, String s, Object obj, LinkOption alinkoption[])
        throws IOException;
}
