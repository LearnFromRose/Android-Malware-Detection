// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   DoubleBuffer.java

package java.nio;


// Referenced classes of package java.nio:
//            Buffer, ByteOrder

public abstract class DoubleBuffer extends Buffer
    implements Comparable
{

    DoubleBuffer(int mark, int pos, int lim, int cap)
    {
        super(0, 0, 0, 0, 0);
        throw new RuntimeException("Stub!");
    }

    public static DoubleBuffer allocate(int capacity)
    {
        throw new RuntimeException("Stub!");
    }

    public static DoubleBuffer wrap(double array[], int offset, int length)
    {
        throw new RuntimeException("Stub!");
    }

    public static DoubleBuffer wrap(double array[])
    {
        throw new RuntimeException("Stub!");
    }

    public abstract DoubleBuffer slice();

    public abstract DoubleBuffer duplicate();

    public abstract DoubleBuffer asReadOnlyBuffer();

    public abstract double get();

    public abstract DoubleBuffer put(double d);

    public abstract double get(int i);

    public abstract DoubleBuffer put(int i, double d);

    public DoubleBuffer get(double dst[], int offset, int length)
    {
        throw new RuntimeException("Stub!");
    }

    public DoubleBuffer get(double dst[])
    {
        throw new RuntimeException("Stub!");
    }

    public DoubleBuffer put(DoubleBuffer src)
    {
        throw new RuntimeException("Stub!");
    }

    public DoubleBuffer put(double src[], int offset, int length)
    {
        throw new RuntimeException("Stub!");
    }

    public final DoubleBuffer put(double src[])
    {
        throw new RuntimeException("Stub!");
    }

    public final boolean hasArray()
    {
        throw new RuntimeException("Stub!");
    }

    public final double[] array()
    {
        throw new RuntimeException("Stub!");
    }

    public final int arrayOffset()
    {
        throw new RuntimeException("Stub!");
    }

    public Buffer position(int newPosition)
    {
        throw new RuntimeException("Stub!");
    }

    public Buffer limit(int newLimit)
    {
        throw new RuntimeException("Stub!");
    }

    public Buffer mark()
    {
        throw new RuntimeException("Stub!");
    }

    public Buffer reset()
    {
        throw new RuntimeException("Stub!");
    }

    public Buffer clear()
    {
        throw new RuntimeException("Stub!");
    }

    public Buffer flip()
    {
        throw new RuntimeException("Stub!");
    }

    public Buffer rewind()
    {
        throw new RuntimeException("Stub!");
    }

    public abstract DoubleBuffer compact();

    public abstract boolean isDirect();

    public String toString()
    {
        throw new RuntimeException("Stub!");
    }

    public int hashCode()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean equals(Object ob)
    {
        throw new RuntimeException("Stub!");
    }

    public int compareTo(DoubleBuffer that)
    {
        throw new RuntimeException("Stub!");
    }

    public abstract ByteOrder order();

    public volatile Object array()
    {
        return array();
    }

    public volatile int compareTo(Object obj)
    {
        return compareTo((DoubleBuffer)obj);
    }
}
