// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   CharBuffer.java

package java.nio;

import java.io.IOException;
import java.util.stream.IntStream;

// Referenced classes of package java.nio:
//            Buffer, ByteOrder

public abstract class CharBuffer extends Buffer
    implements Comparable, Appendable, CharSequence, Readable
{

    CharBuffer(int mark, int pos, int lim, int cap)
    {
        super(0, 0, 0, 0, 0);
        throw new RuntimeException("Stub!");
    }

    public static CharBuffer allocate(int capacity)
    {
        throw new RuntimeException("Stub!");
    }

    public static CharBuffer wrap(char array[], int offset, int length)
    {
        throw new RuntimeException("Stub!");
    }

    public static CharBuffer wrap(char array[])
    {
        throw new RuntimeException("Stub!");
    }

    public int read(CharBuffer target)
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public static CharBuffer wrap(CharSequence csq, int start, int end)
    {
        throw new RuntimeException("Stub!");
    }

    public static CharBuffer wrap(CharSequence csq)
    {
        throw new RuntimeException("Stub!");
    }

    public abstract CharBuffer slice();

    public abstract CharBuffer duplicate();

    public abstract CharBuffer asReadOnlyBuffer();

    public abstract char get();

    public abstract CharBuffer put(char c);

    public abstract char get(int i);

    public abstract CharBuffer put(int i, char c);

    public CharBuffer get(char dst[], int offset, int length)
    {
        throw new RuntimeException("Stub!");
    }

    public CharBuffer get(char dst[])
    {
        throw new RuntimeException("Stub!");
    }

    public CharBuffer put(CharBuffer src)
    {
        throw new RuntimeException("Stub!");
    }

    public CharBuffer put(char src[], int offset, int length)
    {
        throw new RuntimeException("Stub!");
    }

    public final CharBuffer put(char src[])
    {
        throw new RuntimeException("Stub!");
    }

    public CharBuffer put(String src, int start, int end)
    {
        throw new RuntimeException("Stub!");
    }

    public final CharBuffer put(String src)
    {
        throw new RuntimeException("Stub!");
    }

    public final boolean hasArray()
    {
        throw new RuntimeException("Stub!");
    }

    public final char[] array()
    {
        throw new RuntimeException("Stub!");
    }

    public final int arrayOffset()
    {
        throw new RuntimeException("Stub!");
    }

    public Buffer position(int newPosition)
    {
        throw new RuntimeException("Stub!");
    }

    public Buffer limit(int newLimit)
    {
        throw new RuntimeException("Stub!");
    }

    public Buffer mark()
    {
        throw new RuntimeException("Stub!");
    }

    public Buffer reset()
    {
        throw new RuntimeException("Stub!");
    }

    public Buffer clear()
    {
        throw new RuntimeException("Stub!");
    }

    public Buffer flip()
    {
        throw new RuntimeException("Stub!");
    }

    public Buffer rewind()
    {
        throw new RuntimeException("Stub!");
    }

    public abstract CharBuffer compact();

    public abstract boolean isDirect();

    public int hashCode()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean equals(Object ob)
    {
        throw new RuntimeException("Stub!");
    }

    public int compareTo(CharBuffer that)
    {
        throw new RuntimeException("Stub!");
    }

    public String toString()
    {
        throw new RuntimeException("Stub!");
    }

    public final int length()
    {
        throw new RuntimeException("Stub!");
    }

    public final char charAt(int index)
    {
        throw new RuntimeException("Stub!");
    }

    public abstract CharBuffer subSequence(int i, int j);

    public CharBuffer append(CharSequence csq)
    {
        throw new RuntimeException("Stub!");
    }

    public CharBuffer append(CharSequence csq, int start, int end)
    {
        throw new RuntimeException("Stub!");
    }

    public CharBuffer append(char c)
    {
        throw new RuntimeException("Stub!");
    }

    public abstract ByteOrder order();

    public IntStream chars()
    {
        throw new RuntimeException("Stub!");
    }

    public volatile Object array()
    {
        return array();
    }

    public volatile int compareTo(Object obj)
    {
        return compareTo((CharBuffer)obj);
    }

    public volatile Appendable append(char c)
        throws IOException
    {
        return append(c);
    }

    public volatile Appendable append(CharSequence charsequence, int i, int j)
        throws IOException
    {
        return append(charsequence, i, j);
    }

    public volatile Appendable append(CharSequence charsequence)
        throws IOException
    {
        return append(charsequence);
    }

    public volatile CharSequence subSequence(int i, int j)
    {
        return subSequence(i, j);
    }
}
