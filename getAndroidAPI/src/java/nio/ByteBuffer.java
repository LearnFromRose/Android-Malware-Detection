// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   ByteBuffer.java

package java.nio;


// Referenced classes of package java.nio:
//            Buffer, ByteOrder, CharBuffer, ShortBuffer, 
//            IntBuffer, LongBuffer, FloatBuffer, DoubleBuffer

public abstract class ByteBuffer extends Buffer
    implements Comparable
{

    ByteBuffer(int mark, int pos, int lim, int cap)
    {
        super(0, 0, 0, 0, 0);
        throw new RuntimeException("Stub!");
    }

    public static ByteBuffer allocateDirect(int capacity)
    {
        throw new RuntimeException("Stub!");
    }

    public static ByteBuffer allocate(int capacity)
    {
        throw new RuntimeException("Stub!");
    }

    public static ByteBuffer wrap(byte array[], int offset, int length)
    {
        throw new RuntimeException("Stub!");
    }

    public static ByteBuffer wrap(byte array[])
    {
        throw new RuntimeException("Stub!");
    }

    public abstract ByteBuffer slice();

    public abstract ByteBuffer duplicate();

    public abstract ByteBuffer asReadOnlyBuffer();

    public abstract byte get();

    public abstract ByteBuffer put(byte byte0);

    public abstract byte get(int i);

    public abstract ByteBuffer put(int i, byte byte0);

    public ByteBuffer get(byte dst[], int offset, int length)
    {
        throw new RuntimeException("Stub!");
    }

    public ByteBuffer get(byte dst[])
    {
        throw new RuntimeException("Stub!");
    }

    public ByteBuffer put(ByteBuffer src)
    {
        throw new RuntimeException("Stub!");
    }

    public ByteBuffer put(byte src[], int offset, int length)
    {
        throw new RuntimeException("Stub!");
    }

    public final ByteBuffer put(byte src[])
    {
        throw new RuntimeException("Stub!");
    }

    public final boolean hasArray()
    {
        throw new RuntimeException("Stub!");
    }

    public final byte[] array()
    {
        throw new RuntimeException("Stub!");
    }

    public final int arrayOffset()
    {
        throw new RuntimeException("Stub!");
    }

    public Buffer position(int newPosition)
    {
        throw new RuntimeException("Stub!");
    }

    public Buffer limit(int newLimit)
    {
        throw new RuntimeException("Stub!");
    }

    public Buffer mark()
    {
        throw new RuntimeException("Stub!");
    }

    public Buffer reset()
    {
        throw new RuntimeException("Stub!");
    }

    public Buffer clear()
    {
        throw new RuntimeException("Stub!");
    }

    public Buffer flip()
    {
        throw new RuntimeException("Stub!");
    }

    public Buffer rewind()
    {
        throw new RuntimeException("Stub!");
    }

    public abstract ByteBuffer compact();

    public abstract boolean isDirect();

    public String toString()
    {
        throw new RuntimeException("Stub!");
    }

    public int hashCode()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean equals(Object ob)
    {
        throw new RuntimeException("Stub!");
    }

    public int compareTo(ByteBuffer that)
    {
        throw new RuntimeException("Stub!");
    }

    public final ByteOrder order()
    {
        throw new RuntimeException("Stub!");
    }

    public final ByteBuffer order(ByteOrder bo)
    {
        throw new RuntimeException("Stub!");
    }

    public abstract char getChar();

    public abstract ByteBuffer putChar(char c);

    public abstract char getChar(int i);

    public abstract ByteBuffer putChar(int i, char c);

    public abstract CharBuffer asCharBuffer();

    public abstract short getShort();

    public abstract ByteBuffer putShort(short word0);

    public abstract short getShort(int i);

    public abstract ByteBuffer putShort(int i, short word0);

    public abstract ShortBuffer asShortBuffer();

    public abstract int getInt();

    public abstract ByteBuffer putInt(int i);

    public abstract int getInt(int i);

    public abstract ByteBuffer putInt(int i, int j);

    public abstract IntBuffer asIntBuffer();

    public abstract long getLong();

    public abstract ByteBuffer putLong(long l);

    public abstract long getLong(int i);

    public abstract ByteBuffer putLong(int i, long l);

    public abstract LongBuffer asLongBuffer();

    public abstract float getFloat();

    public abstract ByteBuffer putFloat(float f);

    public abstract float getFloat(int i);

    public abstract ByteBuffer putFloat(int i, float f);

    public abstract FloatBuffer asFloatBuffer();

    public abstract double getDouble();

    public abstract ByteBuffer putDouble(double d);

    public abstract double getDouble(int i);

    public abstract ByteBuffer putDouble(int i, double d);

    public abstract DoubleBuffer asDoubleBuffer();

    public volatile Object array()
    {
        return array();
    }

    public volatile int compareTo(Object obj)
    {
        return compareTo((ByteBuffer)obj);
    }
}
