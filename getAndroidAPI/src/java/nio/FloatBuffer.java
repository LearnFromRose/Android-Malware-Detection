// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   FloatBuffer.java

package java.nio;


// Referenced classes of package java.nio:
//            Buffer, ByteOrder

public abstract class FloatBuffer extends Buffer
    implements Comparable
{

    FloatBuffer(int mark, int pos, int lim, int cap)
    {
        super(0, 0, 0, 0, 0);
        throw new RuntimeException("Stub!");
    }

    public static FloatBuffer allocate(int capacity)
    {
        throw new RuntimeException("Stub!");
    }

    public static FloatBuffer wrap(float array[], int offset, int length)
    {
        throw new RuntimeException("Stub!");
    }

    public static FloatBuffer wrap(float array[])
    {
        throw new RuntimeException("Stub!");
    }

    public abstract FloatBuffer slice();

    public abstract FloatBuffer duplicate();

    public abstract FloatBuffer asReadOnlyBuffer();

    public abstract float get();

    public abstract FloatBuffer put(float f);

    public abstract float get(int i);

    public abstract FloatBuffer put(int i, float f);

    public FloatBuffer get(float dst[], int offset, int length)
    {
        throw new RuntimeException("Stub!");
    }

    public FloatBuffer get(float dst[])
    {
        throw new RuntimeException("Stub!");
    }

    public FloatBuffer put(FloatBuffer src)
    {
        throw new RuntimeException("Stub!");
    }

    public FloatBuffer put(float src[], int offset, int length)
    {
        throw new RuntimeException("Stub!");
    }

    public final FloatBuffer put(float src[])
    {
        throw new RuntimeException("Stub!");
    }

    public final boolean hasArray()
    {
        throw new RuntimeException("Stub!");
    }

    public final float[] array()
    {
        throw new RuntimeException("Stub!");
    }

    public final int arrayOffset()
    {
        throw new RuntimeException("Stub!");
    }

    public Buffer position(int newPosition)
    {
        throw new RuntimeException("Stub!");
    }

    public Buffer limit(int newLimit)
    {
        throw new RuntimeException("Stub!");
    }

    public Buffer mark()
    {
        throw new RuntimeException("Stub!");
    }

    public Buffer reset()
    {
        throw new RuntimeException("Stub!");
    }

    public Buffer clear()
    {
        throw new RuntimeException("Stub!");
    }

    public Buffer flip()
    {
        throw new RuntimeException("Stub!");
    }

    public Buffer rewind()
    {
        throw new RuntimeException("Stub!");
    }

    public abstract FloatBuffer compact();

    public abstract boolean isDirect();

    public String toString()
    {
        throw new RuntimeException("Stub!");
    }

    public int hashCode()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean equals(Object ob)
    {
        throw new RuntimeException("Stub!");
    }

    public int compareTo(FloatBuffer that)
    {
        throw new RuntimeException("Stub!");
    }

    public abstract ByteOrder order();

    public volatile Object array()
    {
        return array();
    }

    public volatile int compareTo(Object obj)
    {
        return compareTo((FloatBuffer)obj);
    }
}
