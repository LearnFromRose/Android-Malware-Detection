// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   Thread.java

package java.lang;

import java.util.Map;

// Referenced classes of package java.lang:
//            Object, RuntimeException, Runnable, InterruptedException, 
//            CloneNotSupportedException, ThreadGroup, String, Throwable, 
//            ClassLoader, StackTraceElement, Enum

public class Thread
    implements Runnable
{
    public static interface UncaughtExceptionHandler
    {

        public abstract void uncaughtException(Thread thread, Throwable throwable);
    }

    public static final class State extends Enum
    {

        public static State[] values()
        {
            return (State[])$VALUES.clone();
        }

        public static State valueOf(String name)
        {
            return (State)Enum.valueOf(java/lang/Thread$State, name);
        }

        public static final State NEW;
        public static final State RUNNABLE;
        public static final State BLOCKED;
        public static final State WAITING;
        public static final State TIMED_WAITING;
        public static final State TERMINATED;
        private static final State $VALUES[];

        static 
        {
            NEW = new State("NEW", 0);
            RUNNABLE = new State("RUNNABLE", 1);
            BLOCKED = new State("BLOCKED", 2);
            WAITING = new State("WAITING", 3);
            TIMED_WAITING = new State("TIMED_WAITING", 4);
            TERMINATED = new State("TERMINATED", 5);
            $VALUES = (new State[] {
                NEW, RUNNABLE, BLOCKED, WAITING, TIMED_WAITING, TERMINATED
            });
        }

        private State(String s, int i)
        {
            super(s, i);
        }
    }


    public Thread()
    {
        throw new RuntimeException("Stub!");
    }

    public Thread(Runnable target)
    {
        throw new RuntimeException("Stub!");
    }

    public Thread(ThreadGroup group, Runnable target)
    {
        throw new RuntimeException("Stub!");
    }

    public Thread(String name)
    {
        throw new RuntimeException("Stub!");
    }

    public Thread(ThreadGroup group, String name)
    {
        throw new RuntimeException("Stub!");
    }

    public Thread(Runnable target, String name)
    {
        throw new RuntimeException("Stub!");
    }

    public Thread(ThreadGroup group, Runnable target, String name)
    {
        throw new RuntimeException("Stub!");
    }

    public Thread(ThreadGroup group, Runnable target, String name, long stackSize)
    {
        throw new RuntimeException("Stub!");
    }

    public static native Thread currentThread();

    public static native void yield();

    public static void sleep(long millis)
        throws InterruptedException
    {
        throw new RuntimeException("Stub!");
    }

    public static void sleep(long millis, int nanos)
        throws InterruptedException
    {
        throw new RuntimeException("Stub!");
    }

    protected Object clone()
        throws CloneNotSupportedException
    {
        throw new RuntimeException("Stub!");
    }

    public synchronized void start()
    {
        throw new RuntimeException("Stub!");
    }

    public void run()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method stop is deprecated
     */

    public final void stop()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method stop is deprecated
     */

    public final synchronized void stop(Throwable obj)
    {
        throw new RuntimeException("Stub!");
    }

    public void interrupt()
    {
        throw new RuntimeException("Stub!");
    }

    public static native boolean interrupted();

    public native boolean isInterrupted();

    /**
     * @deprecated Method destroy is deprecated
     */

    public void destroy()
    {
        throw new RuntimeException("Stub!");
    }

    public final boolean isAlive()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method suspend is deprecated
     */

    public final void suspend()
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method resume is deprecated
     */

    public final void resume()
    {
        throw new RuntimeException("Stub!");
    }

    public final void setPriority(int newPriority)
    {
        throw new RuntimeException("Stub!");
    }

    public final int getPriority()
    {
        throw new RuntimeException("Stub!");
    }

    public final synchronized void setName(String name)
    {
        throw new RuntimeException("Stub!");
    }

    public final String getName()
    {
        throw new RuntimeException("Stub!");
    }

    public final ThreadGroup getThreadGroup()
    {
        throw new RuntimeException("Stub!");
    }

    public static int activeCount()
    {
        throw new RuntimeException("Stub!");
    }

    public static int enumerate(Thread tarray[])
    {
        throw new RuntimeException("Stub!");
    }

    /**
     * @deprecated Method countStackFrames is deprecated
     */

    public int countStackFrames()
    {
        throw new RuntimeException("Stub!");
    }

    public final void join(long millis)
        throws InterruptedException
    {
        throw new RuntimeException("Stub!");
    }

    public final void join(long millis, int nanos)
        throws InterruptedException
    {
        throw new RuntimeException("Stub!");
    }

    public final void join()
        throws InterruptedException
    {
        throw new RuntimeException("Stub!");
    }

    public static void dumpStack()
    {
        throw new RuntimeException("Stub!");
    }

    public final void setDaemon(boolean on)
    {
        throw new RuntimeException("Stub!");
    }

    public final boolean isDaemon()
    {
        throw new RuntimeException("Stub!");
    }

    public final void checkAccess()
    {
        throw new RuntimeException("Stub!");
    }

    public String toString()
    {
        throw new RuntimeException("Stub!");
    }

    public ClassLoader getContextClassLoader()
    {
        throw new RuntimeException("Stub!");
    }

    public void setContextClassLoader(ClassLoader cl)
    {
        throw new RuntimeException("Stub!");
    }

    public static native boolean holdsLock(Object obj);

    public StackTraceElement[] getStackTrace()
    {
        throw new RuntimeException("Stub!");
    }

    public static Map getAllStackTraces()
    {
        throw new RuntimeException("Stub!");
    }

    public long getId()
    {
        throw new RuntimeException("Stub!");
    }

    public State getState()
    {
        throw new RuntimeException("Stub!");
    }

    public static void setDefaultUncaughtExceptionHandler(UncaughtExceptionHandler eh)
    {
        throw new RuntimeException("Stub!");
    }

    public static UncaughtExceptionHandler getDefaultUncaughtExceptionHandler()
    {
        throw new RuntimeException("Stub!");
    }

    public UncaughtExceptionHandler getUncaughtExceptionHandler()
    {
        throw new RuntimeException("Stub!");
    }

    public void setUncaughtExceptionHandler(UncaughtExceptionHandler eh)
    {
        throw new RuntimeException("Stub!");
    }

    public static final int MAX_PRIORITY = 10;
    public static final int MIN_PRIORITY = 1;
    public static final int NORM_PRIORITY = 5;
}
