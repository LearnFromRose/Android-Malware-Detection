// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   Float.java

package java.lang;

// Referenced classes of package java.lang:
//            Number, RuntimeException, Comparable, NumberFormatException, 
//            Class, String, Object

public final class Float extends Number
    implements Comparable
{

    public Float(float value)
    {
        throw new RuntimeException("Stub!");
    }

    public Float(double value)
    {
        throw new RuntimeException("Stub!");
    }

    public Float(String s)
        throws NumberFormatException
    {
        throw new RuntimeException("Stub!");
    }

    public static String toString(float f)
    {
        throw new RuntimeException("Stub!");
    }

    public static String toHexString(float f)
    {
        throw new RuntimeException("Stub!");
    }

    public static Float valueOf(String s)
        throws NumberFormatException
    {
        throw new RuntimeException("Stub!");
    }

    public static Float valueOf(float f)
    {
        throw new RuntimeException("Stub!");
    }

    public static float parseFloat(String s)
        throws NumberFormatException
    {
        throw new RuntimeException("Stub!");
    }

    public static boolean isNaN(float v)
    {
        throw new RuntimeException("Stub!");
    }

    public static boolean isInfinite(float v)
    {
        throw new RuntimeException("Stub!");
    }

    public static boolean isFinite(float f)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isNaN()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isInfinite()
    {
        throw new RuntimeException("Stub!");
    }

    public String toString()
    {
        throw new RuntimeException("Stub!");
    }

    public byte byteValue()
    {
        throw new RuntimeException("Stub!");
    }

    public short shortValue()
    {
        throw new RuntimeException("Stub!");
    }

    public int intValue()
    {
        throw new RuntimeException("Stub!");
    }

    public long longValue()
    {
        throw new RuntimeException("Stub!");
    }

    public float floatValue()
    {
        throw new RuntimeException("Stub!");
    }

    public double doubleValue()
    {
        throw new RuntimeException("Stub!");
    }

    public int hashCode()
    {
        throw new RuntimeException("Stub!");
    }

    public static int hashCode(float value)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean equals(Object obj)
    {
        throw new RuntimeException("Stub!");
    }

    public static int floatToIntBits(float value)
    {
        throw new RuntimeException("Stub!");
    }

    public static native int floatToRawIntBits(float f);

    public static native float intBitsToFloat(int i);

    public int compareTo(Float anotherFloat)
    {
        throw new RuntimeException("Stub!");
    }

    public static int compare(float f1, float f2)
    {
        throw new RuntimeException("Stub!");
    }

    public static float sum(float a, float b)
    {
        throw new RuntimeException("Stub!");
    }

    public static float max(float a, float b)
    {
        throw new RuntimeException("Stub!");
    }

    public static float min(float a, float b)
    {
        throw new RuntimeException("Stub!");
    }

    public volatile int compareTo(Object obj)
    {
        return compareTo((Float)obj);
    }

    public static final int BYTES = 4;
    public static final int MAX_EXPONENT = 127;
    public static final float MAX_VALUE = 3.402823E+038F;
    public static final int MIN_EXPONENT = -126;
    public static final float MIN_NORMAL = 1.175494E-038F;
    public static final float MIN_VALUE = 1.401298E-045F;
    public static final float NEGATIVE_INFINITY = (-1.0F / 0.0F);
    public static final float NaN = (0.0F / 0.0F);
    public static final float POSITIVE_INFINITY = (1.0F / 0.0F);
    public static final int SIZE = 32;
    public static final Class TYPE = null;

}
