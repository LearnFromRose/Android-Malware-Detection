// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   Field.java

package java.lang.reflect;

import java.lang.annotation.Annotation;

// Referenced classes of package java.lang.reflect:
//            AccessibleObject, Member, Type

public final class Field extends AccessibleObject
    implements Member
{

    Field()
    {
        throw new RuntimeException("Stub!");
    }

    public Class getDeclaringClass()
    {
        throw new RuntimeException("Stub!");
    }

    public String getName()
    {
        throw new RuntimeException("Stub!");
    }

    public int getModifiers()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isEnumConstant()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isSynthetic()
    {
        throw new RuntimeException("Stub!");
    }

    public Class getType()
    {
        throw new RuntimeException("Stub!");
    }

    public Type getGenericType()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean equals(Object obj)
    {
        throw new RuntimeException("Stub!");
    }

    public int hashCode()
    {
        throw new RuntimeException("Stub!");
    }

    public String toString()
    {
        throw new RuntimeException("Stub!");
    }

    public String toGenericString()
    {
        throw new RuntimeException("Stub!");
    }

    public native Object get(Object obj)
        throws IllegalAccessException, IllegalArgumentException;

    public native boolean getBoolean(Object obj)
        throws IllegalAccessException, IllegalArgumentException;

    public native byte getByte(Object obj)
        throws IllegalAccessException, IllegalArgumentException;

    public native char getChar(Object obj)
        throws IllegalAccessException, IllegalArgumentException;

    public native short getShort(Object obj)
        throws IllegalAccessException, IllegalArgumentException;

    public native int getInt(Object obj)
        throws IllegalAccessException, IllegalArgumentException;

    public native long getLong(Object obj)
        throws IllegalAccessException, IllegalArgumentException;

    public native float getFloat(Object obj)
        throws IllegalAccessException, IllegalArgumentException;

    public native double getDouble(Object obj)
        throws IllegalAccessException, IllegalArgumentException;

    public native void set(Object obj, Object obj1)
        throws IllegalAccessException, IllegalArgumentException;

    public native void setBoolean(Object obj, boolean flag)
        throws IllegalAccessException, IllegalArgumentException;

    public native void setByte(Object obj, byte byte0)
        throws IllegalAccessException, IllegalArgumentException;

    public native void setChar(Object obj, char c)
        throws IllegalAccessException, IllegalArgumentException;

    public native void setShort(Object obj, short word0)
        throws IllegalAccessException, IllegalArgumentException;

    public native void setInt(Object obj, int i)
        throws IllegalAccessException, IllegalArgumentException;

    public native void setLong(Object obj, long l)
        throws IllegalAccessException, IllegalArgumentException;

    public native void setFloat(Object obj, float f)
        throws IllegalAccessException, IllegalArgumentException;

    public native void setDouble(Object obj, double d)
        throws IllegalAccessException, IllegalArgumentException;

    public Annotation getAnnotation(Class annotationClass)
    {
        throw new RuntimeException("Stub!");
    }

    public Annotation[] getAnnotationsByType(Class annotationClass)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isAnnotationPresent(Class annotationType)
    {
        throw new RuntimeException("Stub!");
    }

    public native Annotation[] getDeclaredAnnotations();
}
