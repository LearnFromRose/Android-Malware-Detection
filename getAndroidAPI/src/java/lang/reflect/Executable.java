// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   Executable.java

package java.lang.reflect;

import java.lang.annotation.Annotation;

// Referenced classes of package java.lang.reflect:
//            AccessibleObject, Member, GenericDeclaration, TypeVariable, 
//            Type, Parameter

public abstract class Executable extends AccessibleObject
    implements Member, GenericDeclaration
{

    Executable()
    {
        throw new RuntimeException("Stub!");
    }

    public abstract Class getDeclaringClass();

    public abstract String getName();

    public abstract int getModifiers();

    public abstract TypeVariable[] getTypeParameters();

    public abstract Class[] getParameterTypes();

    public int getParameterCount()
    {
        throw new RuntimeException("Stub!");
    }

    public Type[] getGenericParameterTypes()
    {
        throw new RuntimeException("Stub!");
    }

    public Parameter[] getParameters()
    {
        throw new RuntimeException("Stub!");
    }

    public abstract Class[] getExceptionTypes();

    public Type[] getGenericExceptionTypes()
    {
        throw new RuntimeException("Stub!");
    }

    public abstract String toGenericString();

    public boolean isVarArgs()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isSynthetic()
    {
        throw new RuntimeException("Stub!");
    }

    public abstract Annotation[][] getParameterAnnotations();

    public Annotation getAnnotation(Class annotationClass)
    {
        throw new RuntimeException("Stub!");
    }

    public Annotation[] getAnnotationsByType(Class annotationClass)
    {
        throw new RuntimeException("Stub!");
    }

    public Annotation[] getDeclaredAnnotations()
    {
        throw new RuntimeException("Stub!");
    }

    public final boolean isAnnotationPresent(Class annotationType)
    {
        throw new RuntimeException("Stub!");
    }
}
