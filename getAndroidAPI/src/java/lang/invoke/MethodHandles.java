// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   MethodHandles.java

package java.lang.invoke;

import java.lang.reflect.*;
import java.util.List;

// Referenced classes of package java.lang.invoke:
//            MethodHandle, MethodType, MethodHandleInfo

public class MethodHandles
{
    public static final class Lookup
    {

        public Class lookupClass()
        {
            throw new RuntimeException("Stub!");
        }

        public int lookupModes()
        {
            throw new RuntimeException("Stub!");
        }

        public Lookup in(Class requestedLookupClass)
        {
            throw new RuntimeException("Stub!");
        }

        public String toString()
        {
            throw new RuntimeException("Stub!");
        }

        public MethodHandle findStatic(Class refc, String name, MethodType type)
            throws IllegalAccessException, NoSuchMethodException
        {
            throw new RuntimeException("Stub!");
        }

        public MethodHandle findVirtual(Class refc, String name, MethodType type)
            throws IllegalAccessException, NoSuchMethodException
        {
            throw new RuntimeException("Stub!");
        }

        public MethodHandle findConstructor(Class refc, MethodType type)
            throws IllegalAccessException, NoSuchMethodException
        {
            throw new RuntimeException("Stub!");
        }

        public MethodHandle findSpecial(Class refc, String name, MethodType type, Class specialCaller)
            throws IllegalAccessException, NoSuchMethodException
        {
            throw new RuntimeException("Stub!");
        }

        public MethodHandle findGetter(Class refc, String name, Class type)
            throws IllegalAccessException, NoSuchFieldException
        {
            throw new RuntimeException("Stub!");
        }

        public MethodHandle findSetter(Class refc, String name, Class type)
            throws IllegalAccessException, NoSuchFieldException
        {
            throw new RuntimeException("Stub!");
        }

        public MethodHandle findStaticGetter(Class refc, String name, Class type)
            throws IllegalAccessException, NoSuchFieldException
        {
            throw new RuntimeException("Stub!");
        }

        public MethodHandle findStaticSetter(Class refc, String name, Class type)
            throws IllegalAccessException, NoSuchFieldException
        {
            throw new RuntimeException("Stub!");
        }

        public MethodHandle bind(Object receiver, String name, MethodType type)
            throws IllegalAccessException, NoSuchMethodException
        {
            throw new RuntimeException("Stub!");
        }

        public MethodHandle unreflect(Method m)
            throws IllegalAccessException
        {
            throw new RuntimeException("Stub!");
        }

        public MethodHandle unreflectSpecial(Method m, Class specialCaller)
            throws IllegalAccessException
        {
            throw new RuntimeException("Stub!");
        }

        public MethodHandle unreflectConstructor(Constructor c)
            throws IllegalAccessException
        {
            throw new RuntimeException("Stub!");
        }

        public MethodHandle unreflectGetter(Field f)
            throws IllegalAccessException
        {
            throw new RuntimeException("Stub!");
        }

        public MethodHandle unreflectSetter(Field f)
            throws IllegalAccessException
        {
            throw new RuntimeException("Stub!");
        }

        public MethodHandleInfo revealDirect(MethodHandle target)
        {
            throw new RuntimeException("Stub!");
        }

        public static final int PACKAGE = 8;
        public static final int PRIVATE = 2;
        public static final int PROTECTED = 4;
        public static final int PUBLIC = 1;

        Lookup(Class lookupClass)
        {
            throw new RuntimeException("Stub!");
        }
    }


    MethodHandles()
    {
        throw new RuntimeException("Stub!");
    }

    public static Lookup lookup()
    {
        throw new RuntimeException("Stub!");
    }

    public static Lookup publicLookup()
    {
        throw new RuntimeException("Stub!");
    }

    public static Member reflectAs(Class expected, MethodHandle target)
    {
        throw new RuntimeException("Stub!");
    }

    public static MethodHandle arrayElementGetter(Class arrayClass)
        throws IllegalArgumentException
    {
        throw new RuntimeException("Stub!");
    }

    public static MethodHandle arrayElementSetter(Class arrayClass)
        throws IllegalArgumentException
    {
        throw new RuntimeException("Stub!");
    }

    public static MethodHandle spreadInvoker(MethodType type, int leadingArgCount)
    {
        throw new RuntimeException("Stub!");
    }

    public static MethodHandle exactInvoker(MethodType type)
    {
        throw new RuntimeException("Stub!");
    }

    public static MethodHandle invoker(MethodType type)
    {
        throw new RuntimeException("Stub!");
    }

    public static MethodHandle explicitCastArguments(MethodHandle target, MethodType newType)
    {
        throw new RuntimeException("Stub!");
    }

    public static transient MethodHandle permuteArguments(MethodHandle target, MethodType newType, int reorder[])
    {
        throw new RuntimeException("Stub!");
    }

    public static MethodHandle constant(Class type, Object value)
    {
        throw new RuntimeException("Stub!");
    }

    public static MethodHandle identity(Class type)
    {
        throw new RuntimeException("Stub!");
    }

    public static transient MethodHandle insertArguments(MethodHandle target, int pos, Object values[])
    {
        throw new RuntimeException("Stub!");
    }

    public static MethodHandle dropArguments(MethodHandle target, int pos, List valueTypes)
    {
        throw new RuntimeException("Stub!");
    }

    public static transient MethodHandle dropArguments(MethodHandle target, int pos, Class valueTypes[])
    {
        throw new RuntimeException("Stub!");
    }

    public static transient MethodHandle filterArguments(MethodHandle target, int pos, MethodHandle filters[])
    {
        throw new RuntimeException("Stub!");
    }

    public static MethodHandle collectArguments(MethodHandle target, int pos, MethodHandle filter)
    {
        throw new RuntimeException("Stub!");
    }

    public static MethodHandle filterReturnValue(MethodHandle target, MethodHandle filter)
    {
        throw new RuntimeException("Stub!");
    }

    public static MethodHandle foldArguments(MethodHandle target, MethodHandle combiner)
    {
        throw new RuntimeException("Stub!");
    }

    public static MethodHandle guardWithTest(MethodHandle test, MethodHandle target, MethodHandle fallback)
    {
        throw new RuntimeException("Stub!");
    }

    public static MethodHandle catchException(MethodHandle target, Class exType, MethodHandle handler)
    {
        throw new RuntimeException("Stub!");
    }

    public static MethodHandle throwException(Class returnType, Class exType)
    {
        throw new RuntimeException("Stub!");
    }
}
