// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   Writer.java

package java.io;


// Referenced classes of package java.io:
//            Closeable, Flushable, IOException

public abstract class Writer
    implements Appendable, Closeable, Flushable
{

    protected Writer()
    {
        throw new RuntimeException("Stub!");
    }

    protected Writer(Object lock)
    {
        throw new RuntimeException("Stub!");
    }

    public void write(int c)
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public void write(char cbuf[])
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public abstract void write(char ac[], int i, int j)
        throws IOException;

    public void write(String str)
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public void write(String str, int off, int len)
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public Writer append(CharSequence csq)
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public Writer append(CharSequence csq, int start, int end)
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public Writer append(char c)
        throws IOException
    {
        throw new RuntimeException("Stub!");
    }

    public abstract void flush()
        throws IOException;

    public abstract void close()
        throws IOException;

    public volatile Appendable append(char c)
        throws IOException
    {
        return append(c);
    }

    public volatile Appendable append(CharSequence charsequence, int i, int j)
        throws IOException
    {
        return append(charsequence, i, j);
    }

    public volatile Appendable append(CharSequence charsequence)
        throws IOException
    {
        return append(charsequence);
    }

    protected Object lock;
}
