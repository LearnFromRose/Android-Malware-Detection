// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   CompletableFuture.java

package java.util.concurrent;

import java.util.function.*;

// Referenced classes of package java.util.concurrent:
//            Future, CompletionStage, ExecutionException, TimeoutException, 
//            Executor, TimeUnit

public class CompletableFuture
    implements Future, CompletionStage
{
    public static interface AsynchronousCompletionTask
    {
    }


    public CompletableFuture()
    {
        throw new RuntimeException("Stub!");
    }

    public static CompletableFuture supplyAsync(Supplier supplier)
    {
        throw new RuntimeException("Stub!");
    }

    public static CompletableFuture supplyAsync(Supplier supplier, Executor executor)
    {
        throw new RuntimeException("Stub!");
    }

    public static CompletableFuture runAsync(Runnable runnable)
    {
        throw new RuntimeException("Stub!");
    }

    public static CompletableFuture runAsync(Runnable runnable, Executor executor)
    {
        throw new RuntimeException("Stub!");
    }

    public static CompletableFuture completedFuture(Object value)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isDone()
    {
        throw new RuntimeException("Stub!");
    }

    public Object get()
        throws ExecutionException, InterruptedException
    {
        throw new RuntimeException("Stub!");
    }

    public Object get(long timeout, TimeUnit unit)
        throws ExecutionException, InterruptedException, TimeoutException
    {
        throw new RuntimeException("Stub!");
    }

    public Object join()
    {
        throw new RuntimeException("Stub!");
    }

    public Object getNow(Object valueIfAbsent)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean complete(Object value)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean completeExceptionally(Throwable ex)
    {
        throw new RuntimeException("Stub!");
    }

    public CompletableFuture thenApply(Function fn)
    {
        throw new RuntimeException("Stub!");
    }

    public CompletableFuture thenApplyAsync(Function fn)
    {
        throw new RuntimeException("Stub!");
    }

    public CompletableFuture thenApplyAsync(Function fn, Executor executor)
    {
        throw new RuntimeException("Stub!");
    }

    public CompletableFuture thenAccept(Consumer action)
    {
        throw new RuntimeException("Stub!");
    }

    public CompletableFuture thenAcceptAsync(Consumer action)
    {
        throw new RuntimeException("Stub!");
    }

    public CompletableFuture thenAcceptAsync(Consumer action, Executor executor)
    {
        throw new RuntimeException("Stub!");
    }

    public CompletableFuture thenRun(Runnable action)
    {
        throw new RuntimeException("Stub!");
    }

    public CompletableFuture thenRunAsync(Runnable action)
    {
        throw new RuntimeException("Stub!");
    }

    public CompletableFuture thenRunAsync(Runnable action, Executor executor)
    {
        throw new RuntimeException("Stub!");
    }

    public CompletableFuture thenCombine(CompletionStage other, BiFunction fn)
    {
        throw new RuntimeException("Stub!");
    }

    public CompletableFuture thenCombineAsync(CompletionStage other, BiFunction fn)
    {
        throw new RuntimeException("Stub!");
    }

    public CompletableFuture thenCombineAsync(CompletionStage other, BiFunction fn, Executor executor)
    {
        throw new RuntimeException("Stub!");
    }

    public CompletableFuture thenAcceptBoth(CompletionStage other, BiConsumer action)
    {
        throw new RuntimeException("Stub!");
    }

    public CompletableFuture thenAcceptBothAsync(CompletionStage other, BiConsumer action)
    {
        throw new RuntimeException("Stub!");
    }

    public CompletableFuture thenAcceptBothAsync(CompletionStage other, BiConsumer action, Executor executor)
    {
        throw new RuntimeException("Stub!");
    }

    public CompletableFuture runAfterBoth(CompletionStage other, Runnable action)
    {
        throw new RuntimeException("Stub!");
    }

    public CompletableFuture runAfterBothAsync(CompletionStage other, Runnable action)
    {
        throw new RuntimeException("Stub!");
    }

    public CompletableFuture runAfterBothAsync(CompletionStage other, Runnable action, Executor executor)
    {
        throw new RuntimeException("Stub!");
    }

    public CompletableFuture applyToEither(CompletionStage other, Function fn)
    {
        throw new RuntimeException("Stub!");
    }

    public CompletableFuture applyToEitherAsync(CompletionStage other, Function fn)
    {
        throw new RuntimeException("Stub!");
    }

    public CompletableFuture applyToEitherAsync(CompletionStage other, Function fn, Executor executor)
    {
        throw new RuntimeException("Stub!");
    }

    public CompletableFuture acceptEither(CompletionStage other, Consumer action)
    {
        throw new RuntimeException("Stub!");
    }

    public CompletableFuture acceptEitherAsync(CompletionStage other, Consumer action)
    {
        throw new RuntimeException("Stub!");
    }

    public CompletableFuture acceptEitherAsync(CompletionStage other, Consumer action, Executor executor)
    {
        throw new RuntimeException("Stub!");
    }

    public CompletableFuture runAfterEither(CompletionStage other, Runnable action)
    {
        throw new RuntimeException("Stub!");
    }

    public CompletableFuture runAfterEitherAsync(CompletionStage other, Runnable action)
    {
        throw new RuntimeException("Stub!");
    }

    public CompletableFuture runAfterEitherAsync(CompletionStage other, Runnable action, Executor executor)
    {
        throw new RuntimeException("Stub!");
    }

    public CompletableFuture thenCompose(Function fn)
    {
        throw new RuntimeException("Stub!");
    }

    public CompletableFuture thenComposeAsync(Function fn)
    {
        throw new RuntimeException("Stub!");
    }

    public CompletableFuture thenComposeAsync(Function fn, Executor executor)
    {
        throw new RuntimeException("Stub!");
    }

    public CompletableFuture whenComplete(BiConsumer action)
    {
        throw new RuntimeException("Stub!");
    }

    public CompletableFuture whenCompleteAsync(BiConsumer action)
    {
        throw new RuntimeException("Stub!");
    }

    public CompletableFuture whenCompleteAsync(BiConsumer action, Executor executor)
    {
        throw new RuntimeException("Stub!");
    }

    public CompletableFuture handle(BiFunction fn)
    {
        throw new RuntimeException("Stub!");
    }

    public CompletableFuture handleAsync(BiFunction fn)
    {
        throw new RuntimeException("Stub!");
    }

    public CompletableFuture handleAsync(BiFunction fn, Executor executor)
    {
        throw new RuntimeException("Stub!");
    }

    public CompletableFuture toCompletableFuture()
    {
        throw new RuntimeException("Stub!");
    }

    public CompletableFuture exceptionally(Function fn)
    {
        throw new RuntimeException("Stub!");
    }

    public static transient CompletableFuture allOf(CompletableFuture cfs[])
    {
        throw new RuntimeException("Stub!");
    }

    public static transient CompletableFuture anyOf(CompletableFuture cfs[])
    {
        throw new RuntimeException("Stub!");
    }

    public boolean cancel(boolean mayInterruptIfRunning)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isCancelled()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isCompletedExceptionally()
    {
        throw new RuntimeException("Stub!");
    }

    public void obtrudeValue(Object value)
    {
        throw new RuntimeException("Stub!");
    }

    public void obtrudeException(Throwable ex)
    {
        throw new RuntimeException("Stub!");
    }

    public int getNumberOfDependents()
    {
        throw new RuntimeException("Stub!");
    }

    public String toString()
    {
        throw new RuntimeException("Stub!");
    }

    public volatile CompletionStage exceptionally(Function function)
    {
        return exceptionally(function);
    }

    public volatile CompletionStage whenCompleteAsync(BiConsumer biconsumer, Executor executor)
    {
        return whenCompleteAsync(biconsumer, executor);
    }

    public volatile CompletionStage whenCompleteAsync(BiConsumer biconsumer)
    {
        return whenCompleteAsync(biconsumer);
    }

    public volatile CompletionStage whenComplete(BiConsumer biconsumer)
    {
        return whenComplete(biconsumer);
    }

    public volatile CompletionStage handleAsync(BiFunction bifunction, Executor executor)
    {
        return handleAsync(bifunction, executor);
    }

    public volatile CompletionStage handleAsync(BiFunction bifunction)
    {
        return handleAsync(bifunction);
    }

    public volatile CompletionStage handle(BiFunction bifunction)
    {
        return handle(bifunction);
    }

    public volatile CompletionStage thenComposeAsync(Function function, Executor executor)
    {
        return thenComposeAsync(function, executor);
    }

    public volatile CompletionStage thenComposeAsync(Function function)
    {
        return thenComposeAsync(function);
    }

    public volatile CompletionStage thenCompose(Function function)
    {
        return thenCompose(function);
    }

    public volatile CompletionStage runAfterEitherAsync(CompletionStage completionstage, Runnable runnable, Executor executor)
    {
        return runAfterEitherAsync(completionstage, runnable, executor);
    }

    public volatile CompletionStage runAfterEitherAsync(CompletionStage completionstage, Runnable runnable)
    {
        return runAfterEitherAsync(completionstage, runnable);
    }

    public volatile CompletionStage runAfterEither(CompletionStage completionstage, Runnable runnable)
    {
        return runAfterEither(completionstage, runnable);
    }

    public volatile CompletionStage acceptEitherAsync(CompletionStage completionstage, Consumer consumer, Executor executor)
    {
        return acceptEitherAsync(completionstage, consumer, executor);
    }

    public volatile CompletionStage acceptEitherAsync(CompletionStage completionstage, Consumer consumer)
    {
        return acceptEitherAsync(completionstage, consumer);
    }

    public volatile CompletionStage acceptEither(CompletionStage completionstage, Consumer consumer)
    {
        return acceptEither(completionstage, consumer);
    }

    public volatile CompletionStage applyToEitherAsync(CompletionStage completionstage, Function function, Executor executor)
    {
        return applyToEitherAsync(completionstage, function, executor);
    }

    public volatile CompletionStage applyToEitherAsync(CompletionStage completionstage, Function function)
    {
        return applyToEitherAsync(completionstage, function);
    }

    public volatile CompletionStage applyToEither(CompletionStage completionstage, Function function)
    {
        return applyToEither(completionstage, function);
    }

    public volatile CompletionStage runAfterBothAsync(CompletionStage completionstage, Runnable runnable, Executor executor)
    {
        return runAfterBothAsync(completionstage, runnable, executor);
    }

    public volatile CompletionStage runAfterBothAsync(CompletionStage completionstage, Runnable runnable)
    {
        return runAfterBothAsync(completionstage, runnable);
    }

    public volatile CompletionStage runAfterBoth(CompletionStage completionstage, Runnable runnable)
    {
        return runAfterBoth(completionstage, runnable);
    }

    public volatile CompletionStage thenAcceptBothAsync(CompletionStage completionstage, BiConsumer biconsumer, Executor executor)
    {
        return thenAcceptBothAsync(completionstage, biconsumer, executor);
    }

    public volatile CompletionStage thenAcceptBothAsync(CompletionStage completionstage, BiConsumer biconsumer)
    {
        return thenAcceptBothAsync(completionstage, biconsumer);
    }

    public volatile CompletionStage thenAcceptBoth(CompletionStage completionstage, BiConsumer biconsumer)
    {
        return thenAcceptBoth(completionstage, biconsumer);
    }

    public volatile CompletionStage thenCombineAsync(CompletionStage completionstage, BiFunction bifunction, Executor executor)
    {
        return thenCombineAsync(completionstage, bifunction, executor);
    }

    public volatile CompletionStage thenCombineAsync(CompletionStage completionstage, BiFunction bifunction)
    {
        return thenCombineAsync(completionstage, bifunction);
    }

    public volatile CompletionStage thenCombine(CompletionStage completionstage, BiFunction bifunction)
    {
        return thenCombine(completionstage, bifunction);
    }

    public volatile CompletionStage thenRunAsync(Runnable runnable, Executor executor)
    {
        return thenRunAsync(runnable, executor);
    }

    public volatile CompletionStage thenRunAsync(Runnable runnable)
    {
        return thenRunAsync(runnable);
    }

    public volatile CompletionStage thenRun(Runnable runnable)
    {
        return thenRun(runnable);
    }

    public volatile CompletionStage thenAcceptAsync(Consumer consumer, Executor executor)
    {
        return thenAcceptAsync(consumer, executor);
    }

    public volatile CompletionStage thenAcceptAsync(Consumer consumer)
    {
        return thenAcceptAsync(consumer);
    }

    public volatile CompletionStage thenAccept(Consumer consumer)
    {
        return thenAccept(consumer);
    }

    public volatile CompletionStage thenApplyAsync(Function function, Executor executor)
    {
        return thenApplyAsync(function, executor);
    }

    public volatile CompletionStage thenApplyAsync(Function function)
    {
        return thenApplyAsync(function);
    }

    public volatile CompletionStage thenApply(Function function)
    {
        return thenApply(function);
    }
}
