// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   CompletionStage.java

package java.util.concurrent;

import java.util.function.*;

// Referenced classes of package java.util.concurrent:
//            Executor, CompletableFuture

public interface CompletionStage
{

    public abstract CompletionStage thenApply(Function function);

    public abstract CompletionStage thenApplyAsync(Function function);

    public abstract CompletionStage thenApplyAsync(Function function, Executor executor);

    public abstract CompletionStage thenAccept(Consumer consumer);

    public abstract CompletionStage thenAcceptAsync(Consumer consumer);

    public abstract CompletionStage thenAcceptAsync(Consumer consumer, Executor executor);

    public abstract CompletionStage thenRun(Runnable runnable);

    public abstract CompletionStage thenRunAsync(Runnable runnable);

    public abstract CompletionStage thenRunAsync(Runnable runnable, Executor executor);

    public abstract CompletionStage thenCombine(CompletionStage completionstage, BiFunction bifunction);

    public abstract CompletionStage thenCombineAsync(CompletionStage completionstage, BiFunction bifunction);

    public abstract CompletionStage thenCombineAsync(CompletionStage completionstage, BiFunction bifunction, Executor executor);

    public abstract CompletionStage thenAcceptBoth(CompletionStage completionstage, BiConsumer biconsumer);

    public abstract CompletionStage thenAcceptBothAsync(CompletionStage completionstage, BiConsumer biconsumer);

    public abstract CompletionStage thenAcceptBothAsync(CompletionStage completionstage, BiConsumer biconsumer, Executor executor);

    public abstract CompletionStage runAfterBoth(CompletionStage completionstage, Runnable runnable);

    public abstract CompletionStage runAfterBothAsync(CompletionStage completionstage, Runnable runnable);

    public abstract CompletionStage runAfterBothAsync(CompletionStage completionstage, Runnable runnable, Executor executor);

    public abstract CompletionStage applyToEither(CompletionStage completionstage, Function function);

    public abstract CompletionStage applyToEitherAsync(CompletionStage completionstage, Function function);

    public abstract CompletionStage applyToEitherAsync(CompletionStage completionstage, Function function, Executor executor);

    public abstract CompletionStage acceptEither(CompletionStage completionstage, Consumer consumer);

    public abstract CompletionStage acceptEitherAsync(CompletionStage completionstage, Consumer consumer);

    public abstract CompletionStage acceptEitherAsync(CompletionStage completionstage, Consumer consumer, Executor executor);

    public abstract CompletionStage runAfterEither(CompletionStage completionstage, Runnable runnable);

    public abstract CompletionStage runAfterEitherAsync(CompletionStage completionstage, Runnable runnable);

    public abstract CompletionStage runAfterEitherAsync(CompletionStage completionstage, Runnable runnable, Executor executor);

    public abstract CompletionStage thenCompose(Function function);

    public abstract CompletionStage thenComposeAsync(Function function);

    public abstract CompletionStage thenComposeAsync(Function function, Executor executor);

    public abstract CompletionStage handle(BiFunction bifunction);

    public abstract CompletionStage handleAsync(BiFunction bifunction);

    public abstract CompletionStage handleAsync(BiFunction bifunction, Executor executor);

    public abstract CompletionStage whenComplete(BiConsumer biconsumer);

    public abstract CompletionStage whenCompleteAsync(BiConsumer biconsumer);

    public abstract CompletionStage whenCompleteAsync(BiConsumer biconsumer, Executor executor);

    public abstract CompletionStage exceptionally(Function function);

    public abstract CompletableFuture toCompletableFuture();
}
