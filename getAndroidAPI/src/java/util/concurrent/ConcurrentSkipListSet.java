// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   ConcurrentSkipListSet.java

package java.util.concurrent;

import java.io.Serializable;
import java.util.*;

public class ConcurrentSkipListSet extends AbstractSet
    implements NavigableSet, Cloneable, Serializable
{

    public ConcurrentSkipListSet()
    {
        throw new RuntimeException("Stub!");
    }

    public ConcurrentSkipListSet(Comparator comparator)
    {
        throw new RuntimeException("Stub!");
    }

    public ConcurrentSkipListSet(Collection c)
    {
        throw new RuntimeException("Stub!");
    }

    public ConcurrentSkipListSet(SortedSet s)
    {
        throw new RuntimeException("Stub!");
    }

    public ConcurrentSkipListSet clone()
    {
        throw new RuntimeException("Stub!");
    }

    public int size()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isEmpty()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean contains(Object o)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean add(Object e)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean remove(Object o)
    {
        throw new RuntimeException("Stub!");
    }

    public void clear()
    {
        throw new RuntimeException("Stub!");
    }

    public Iterator iterator()
    {
        throw new RuntimeException("Stub!");
    }

    public Iterator descendingIterator()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean equals(Object o)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean removeAll(Collection c)
    {
        throw new RuntimeException("Stub!");
    }

    public Object lower(Object e)
    {
        throw new RuntimeException("Stub!");
    }

    public Object floor(Object e)
    {
        throw new RuntimeException("Stub!");
    }

    public Object ceiling(Object e)
    {
        throw new RuntimeException("Stub!");
    }

    public Object higher(Object e)
    {
        throw new RuntimeException("Stub!");
    }

    public Object pollFirst()
    {
        throw new RuntimeException("Stub!");
    }

    public Object pollLast()
    {
        throw new RuntimeException("Stub!");
    }

    public Comparator comparator()
    {
        throw new RuntimeException("Stub!");
    }

    public Object first()
    {
        throw new RuntimeException("Stub!");
    }

    public Object last()
    {
        throw new RuntimeException("Stub!");
    }

    public NavigableSet subSet(Object fromElement, boolean fromInclusive, Object toElement, boolean toInclusive)
    {
        throw new RuntimeException("Stub!");
    }

    public NavigableSet headSet(Object toElement, boolean inclusive)
    {
        throw new RuntimeException("Stub!");
    }

    public NavigableSet tailSet(Object fromElement, boolean inclusive)
    {
        throw new RuntimeException("Stub!");
    }

    public NavigableSet subSet(Object fromElement, Object toElement)
    {
        throw new RuntimeException("Stub!");
    }

    public NavigableSet headSet(Object toElement)
    {
        throw new RuntimeException("Stub!");
    }

    public NavigableSet tailSet(Object fromElement)
    {
        throw new RuntimeException("Stub!");
    }

    public NavigableSet descendingSet()
    {
        throw new RuntimeException("Stub!");
    }

    public Spliterator spliterator()
    {
        throw new RuntimeException("Stub!");
    }

    public volatile Object clone()
        throws CloneNotSupportedException
    {
        return clone();
    }

    public volatile SortedSet tailSet(Object obj)
    {
        return tailSet(obj);
    }

    public volatile SortedSet headSet(Object obj)
    {
        return headSet(obj);
    }

    public volatile SortedSet subSet(Object obj, Object obj1)
    {
        return subSet(obj, obj1);
    }
}
