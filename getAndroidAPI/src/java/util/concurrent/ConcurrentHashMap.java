// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   ConcurrentHashMap.java

package java.util.concurrent;

import java.io.Serializable;
import java.util.*;
import java.util.function.*;

// Referenced classes of package java.util.concurrent:
//            ConcurrentMap

public class ConcurrentHashMap extends AbstractMap
    implements ConcurrentMap, Serializable
{
    public static class KeySetView
        implements Collection, Serializable, Set
    {

        public Object getMappedValue()
        {
            throw new RuntimeException("Stub!");
        }

        public boolean contains(Object o)
        {
            throw new RuntimeException("Stub!");
        }

        public boolean remove(Object o)
        {
            throw new RuntimeException("Stub!");
        }

        public Iterator iterator()
        {
            throw new RuntimeException("Stub!");
        }

        public boolean add(Object e)
        {
            throw new RuntimeException("Stub!");
        }

        public boolean addAll(Collection c)
        {
            throw new RuntimeException("Stub!");
        }

        public int hashCode()
        {
            throw new RuntimeException("Stub!");
        }

        public boolean equals(Object o)
        {
            throw new RuntimeException("Stub!");
        }

        public Spliterator spliterator()
        {
            throw new RuntimeException("Stub!");
        }

        public void forEach(Consumer action)
        {
            throw new RuntimeException("Stub!");
        }

        public final boolean removeAll(Collection c)
        {
            throw new RuntimeException("Stub!");
        }

        public final int size()
        {
            throw new RuntimeException("Stub!");
        }

        public final boolean containsAll(Collection c)
        {
            throw new RuntimeException("Stub!");
        }

        public final void clear()
        {
            throw new RuntimeException("Stub!");
        }

        public final boolean isEmpty()
        {
            throw new RuntimeException("Stub!");
        }

        public final Object[] toArray()
        {
            throw new RuntimeException("Stub!");
        }

        public final Object[] toArray(Object a[])
        {
            throw new RuntimeException("Stub!");
        }

        public final String toString()
        {
            throw new RuntimeException("Stub!");
        }

        public ConcurrentHashMap getMap()
        {
            throw new RuntimeException("Stub!");
        }

        public final boolean retainAll(Collection c)
        {
            throw new RuntimeException("Stub!");
        }

        KeySetView(ConcurrentHashMap map, Object value)
        {
            throw new RuntimeException("Stub!");
        }
    }


    public ConcurrentHashMap()
    {
        throw new RuntimeException("Stub!");
    }

    public ConcurrentHashMap(int initialCapacity)
    {
        throw new RuntimeException("Stub!");
    }

    public ConcurrentHashMap(Map m)
    {
        throw new RuntimeException("Stub!");
    }

    public ConcurrentHashMap(int initialCapacity, float loadFactor)
    {
        throw new RuntimeException("Stub!");
    }

    public ConcurrentHashMap(int initialCapacity, float loadFactor, int concurrencyLevel)
    {
        throw new RuntimeException("Stub!");
    }

    public int size()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isEmpty()
    {
        throw new RuntimeException("Stub!");
    }

    public Object get(Object key)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean containsKey(Object key)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean containsValue(Object value)
    {
        throw new RuntimeException("Stub!");
    }

    public Object put(Object key, Object value)
    {
        throw new RuntimeException("Stub!");
    }

    public void putAll(Map m)
    {
        throw new RuntimeException("Stub!");
    }

    public Object remove(Object key)
    {
        throw new RuntimeException("Stub!");
    }

    public void clear()
    {
        throw new RuntimeException("Stub!");
    }

    public Set keySet()
    {
        throw new RuntimeException("Stub!");
    }

    public Collection values()
    {
        throw new RuntimeException("Stub!");
    }

    public Set entrySet()
    {
        throw new RuntimeException("Stub!");
    }

    public int hashCode()
    {
        throw new RuntimeException("Stub!");
    }

    public String toString()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean equals(Object o)
    {
        throw new RuntimeException("Stub!");
    }

    public Object putIfAbsent(Object key, Object value)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean remove(Object key, Object value)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean replace(Object key, Object oldValue, Object newValue)
    {
        throw new RuntimeException("Stub!");
    }

    public Object replace(Object key, Object value)
    {
        throw new RuntimeException("Stub!");
    }

    public Object getOrDefault(Object key, Object defaultValue)
    {
        throw new RuntimeException("Stub!");
    }

    public void forEach(BiConsumer action)
    {
        throw new RuntimeException("Stub!");
    }

    public void replaceAll(BiFunction function)
    {
        throw new RuntimeException("Stub!");
    }

    public Object computeIfAbsent(Object key, Function mappingFunction)
    {
        throw new RuntimeException("Stub!");
    }

    public Object computeIfPresent(Object key, BiFunction remappingFunction)
    {
        throw new RuntimeException("Stub!");
    }

    public Object compute(Object key, BiFunction remappingFunction)
    {
        throw new RuntimeException("Stub!");
    }

    public Object merge(Object key, Object value, BiFunction remappingFunction)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean contains(Object value)
    {
        throw new RuntimeException("Stub!");
    }

    public Enumeration keys()
    {
        throw new RuntimeException("Stub!");
    }

    public Enumeration elements()
    {
        throw new RuntimeException("Stub!");
    }

    public long mappingCount()
    {
        throw new RuntimeException("Stub!");
    }

    public static KeySetView newKeySet()
    {
        throw new RuntimeException("Stub!");
    }

    public static KeySetView newKeySet(int initialCapacity)
    {
        throw new RuntimeException("Stub!");
    }

    public KeySetView keySet(Object mappedValue)
    {
        throw new RuntimeException("Stub!");
    }

    public void forEach(long parallelismThreshold, BiConsumer action)
    {
        throw new RuntimeException("Stub!");
    }

    public void forEach(long parallelismThreshold, BiFunction transformer, Consumer action)
    {
        throw new RuntimeException("Stub!");
    }

    public Object search(long parallelismThreshold, BiFunction searchFunction)
    {
        throw new RuntimeException("Stub!");
    }

    public Object reduce(long parallelismThreshold, BiFunction transformer, BiFunction reducer)
    {
        throw new RuntimeException("Stub!");
    }

    public double reduceToDouble(long parallelismThreshold, ToDoubleBiFunction transformer, double basis, DoubleBinaryOperator reducer)
    {
        throw new RuntimeException("Stub!");
    }

    public long reduceToLong(long parallelismThreshold, ToLongBiFunction transformer, long basis, LongBinaryOperator reducer)
    {
        throw new RuntimeException("Stub!");
    }

    public int reduceToInt(long parallelismThreshold, ToIntBiFunction transformer, int basis, IntBinaryOperator reducer)
    {
        throw new RuntimeException("Stub!");
    }

    public void forEachKey(long parallelismThreshold, Consumer action)
    {
        throw new RuntimeException("Stub!");
    }

    public void forEachKey(long parallelismThreshold, Function transformer, Consumer action)
    {
        throw new RuntimeException("Stub!");
    }

    public Object searchKeys(long parallelismThreshold, Function searchFunction)
    {
        throw new RuntimeException("Stub!");
    }

    public Object reduceKeys(long parallelismThreshold, BiFunction reducer)
    {
        throw new RuntimeException("Stub!");
    }

    public Object reduceKeys(long parallelismThreshold, Function transformer, BiFunction reducer)
    {
        throw new RuntimeException("Stub!");
    }

    public double reduceKeysToDouble(long parallelismThreshold, ToDoubleFunction transformer, double basis, DoubleBinaryOperator reducer)
    {
        throw new RuntimeException("Stub!");
    }

    public long reduceKeysToLong(long parallelismThreshold, ToLongFunction transformer, long basis, LongBinaryOperator reducer)
    {
        throw new RuntimeException("Stub!");
    }

    public int reduceKeysToInt(long parallelismThreshold, ToIntFunction transformer, int basis, IntBinaryOperator reducer)
    {
        throw new RuntimeException("Stub!");
    }

    public void forEachValue(long parallelismThreshold, Consumer action)
    {
        throw new RuntimeException("Stub!");
    }

    public void forEachValue(long parallelismThreshold, Function transformer, Consumer action)
    {
        throw new RuntimeException("Stub!");
    }

    public Object searchValues(long parallelismThreshold, Function searchFunction)
    {
        throw new RuntimeException("Stub!");
    }

    public Object reduceValues(long parallelismThreshold, BiFunction reducer)
    {
        throw new RuntimeException("Stub!");
    }

    public Object reduceValues(long parallelismThreshold, Function transformer, BiFunction reducer)
    {
        throw new RuntimeException("Stub!");
    }

    public double reduceValuesToDouble(long parallelismThreshold, ToDoubleFunction transformer, double basis, DoubleBinaryOperator reducer)
    {
        throw new RuntimeException("Stub!");
    }

    public long reduceValuesToLong(long parallelismThreshold, ToLongFunction transformer, long basis, LongBinaryOperator reducer)
    {
        throw new RuntimeException("Stub!");
    }

    public int reduceValuesToInt(long parallelismThreshold, ToIntFunction transformer, int basis, IntBinaryOperator reducer)
    {
        throw new RuntimeException("Stub!");
    }

    public void forEachEntry(long parallelismThreshold, Consumer action)
    {
        throw new RuntimeException("Stub!");
    }

    public void forEachEntry(long parallelismThreshold, Function transformer, Consumer action)
    {
        throw new RuntimeException("Stub!");
    }

    public Object searchEntries(long parallelismThreshold, Function searchFunction)
    {
        throw new RuntimeException("Stub!");
    }

    public java.util.Map.Entry reduceEntries(long parallelismThreshold, BiFunction reducer)
    {
        throw new RuntimeException("Stub!");
    }

    public Object reduceEntries(long parallelismThreshold, Function transformer, BiFunction reducer)
    {
        throw new RuntimeException("Stub!");
    }

    public double reduceEntriesToDouble(long parallelismThreshold, ToDoubleFunction transformer, double basis, DoubleBinaryOperator reducer)
    {
        throw new RuntimeException("Stub!");
    }

    public long reduceEntriesToLong(long parallelismThreshold, ToLongFunction transformer, long basis, LongBinaryOperator reducer)
    {
        throw new RuntimeException("Stub!");
    }

    public int reduceEntriesToInt(long parallelismThreshold, ToIntFunction transformer, int basis, IntBinaryOperator reducer)
    {
        throw new RuntimeException("Stub!");
    }
}
