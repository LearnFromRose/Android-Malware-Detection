// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   DelayQueue.java

package java.util.concurrent;

import java.util.*;

// Referenced classes of package java.util.concurrent:
//            Delayed, BlockingQueue, TimeUnit

public class DelayQueue extends AbstractQueue
    implements BlockingQueue
{

    public DelayQueue()
    {
        throw new RuntimeException("Stub!");
    }

    public DelayQueue(Collection c)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean add(Delayed e)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean offer(Delayed e)
    {
        throw new RuntimeException("Stub!");
    }

    public void put(Delayed e)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean offer(Delayed e, long timeout, TimeUnit unit)
    {
        throw new RuntimeException("Stub!");
    }

    public Delayed poll()
    {
        throw new RuntimeException("Stub!");
    }

    public Delayed take()
        throws InterruptedException
    {
        throw new RuntimeException("Stub!");
    }

    public Delayed poll(long timeout, TimeUnit unit)
        throws InterruptedException
    {
        throw new RuntimeException("Stub!");
    }

    public Delayed peek()
    {
        throw new RuntimeException("Stub!");
    }

    public int size()
    {
        throw new RuntimeException("Stub!");
    }

    public int drainTo(Collection c)
    {
        throw new RuntimeException("Stub!");
    }

    public int drainTo(Collection c, int maxElements)
    {
        throw new RuntimeException("Stub!");
    }

    public void clear()
    {
        throw new RuntimeException("Stub!");
    }

    public int remainingCapacity()
    {
        throw new RuntimeException("Stub!");
    }

    public Object[] toArray()
    {
        throw new RuntimeException("Stub!");
    }

    public Object[] toArray(Object a[])
    {
        throw new RuntimeException("Stub!");
    }

    public boolean remove(Object o)
    {
        throw new RuntimeException("Stub!");
    }

    public Iterator iterator()
    {
        throw new RuntimeException("Stub!");
    }

    public volatile boolean add(Object obj)
    {
        return add((Delayed)obj);
    }

    public volatile Object peek()
    {
        return peek();
    }

    public volatile Object poll()
    {
        return poll();
    }

    public volatile boolean offer(Object obj)
    {
        return offer((Delayed)obj);
    }

    public volatile Object poll(long l, TimeUnit timeunit)
        throws InterruptedException
    {
        return poll(l, timeunit);
    }

    public volatile Object take()
        throws InterruptedException
    {
        return take();
    }

    public volatile boolean offer(Object obj, long l, TimeUnit timeunit)
        throws InterruptedException
    {
        return offer((Delayed)obj, l, timeunit);
    }

    public volatile void put(Object obj)
        throws InterruptedException
    {
        put((Delayed)obj);
    }
}
