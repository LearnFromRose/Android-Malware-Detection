// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   ConcurrentSkipListMap.java

package java.util.concurrent;

import java.io.Serializable;
import java.util.*;
import java.util.function.*;

// Referenced classes of package java.util.concurrent:
//            ConcurrentNavigableMap

public class ConcurrentSkipListMap extends AbstractMap
    implements ConcurrentNavigableMap, Cloneable, Serializable
{

    public ConcurrentSkipListMap()
    {
        throw new RuntimeException("Stub!");
    }

    public ConcurrentSkipListMap(Comparator comparator)
    {
        throw new RuntimeException("Stub!");
    }

    public ConcurrentSkipListMap(Map m)
    {
        throw new RuntimeException("Stub!");
    }

    public ConcurrentSkipListMap(SortedMap m)
    {
        throw new RuntimeException("Stub!");
    }

    public ConcurrentSkipListMap clone()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean containsKey(Object key)
    {
        throw new RuntimeException("Stub!");
    }

    public Object get(Object key)
    {
        throw new RuntimeException("Stub!");
    }

    public Object getOrDefault(Object key, Object defaultValue)
    {
        throw new RuntimeException("Stub!");
    }

    public Object put(Object key, Object value)
    {
        throw new RuntimeException("Stub!");
    }

    public Object remove(Object key)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean containsValue(Object value)
    {
        throw new RuntimeException("Stub!");
    }

    public int size()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isEmpty()
    {
        throw new RuntimeException("Stub!");
    }

    public void clear()
    {
        throw new RuntimeException("Stub!");
    }

    public Object computeIfAbsent(Object key, Function mappingFunction)
    {
        throw new RuntimeException("Stub!");
    }

    public Object computeIfPresent(Object key, BiFunction remappingFunction)
    {
        throw new RuntimeException("Stub!");
    }

    public Object compute(Object key, BiFunction remappingFunction)
    {
        throw new RuntimeException("Stub!");
    }

    public Object merge(Object key, Object value, BiFunction remappingFunction)
    {
        throw new RuntimeException("Stub!");
    }

    public NavigableSet keySet()
    {
        throw new RuntimeException("Stub!");
    }

    public NavigableSet navigableKeySet()
    {
        throw new RuntimeException("Stub!");
    }

    public Collection values()
    {
        throw new RuntimeException("Stub!");
    }

    public Set entrySet()
    {
        throw new RuntimeException("Stub!");
    }

    public ConcurrentNavigableMap descendingMap()
    {
        throw new RuntimeException("Stub!");
    }

    public NavigableSet descendingKeySet()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean equals(Object o)
    {
        throw new RuntimeException("Stub!");
    }

    public Object putIfAbsent(Object key, Object value)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean remove(Object key, Object value)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean replace(Object key, Object oldValue, Object newValue)
    {
        throw new RuntimeException("Stub!");
    }

    public Object replace(Object key, Object value)
    {
        throw new RuntimeException("Stub!");
    }

    public Comparator comparator()
    {
        throw new RuntimeException("Stub!");
    }

    public Object firstKey()
    {
        throw new RuntimeException("Stub!");
    }

    public Object lastKey()
    {
        throw new RuntimeException("Stub!");
    }

    public ConcurrentNavigableMap subMap(Object fromKey, boolean fromInclusive, Object toKey, boolean toInclusive)
    {
        throw new RuntimeException("Stub!");
    }

    public ConcurrentNavigableMap headMap(Object toKey, boolean inclusive)
    {
        throw new RuntimeException("Stub!");
    }

    public ConcurrentNavigableMap tailMap(Object fromKey, boolean inclusive)
    {
        throw new RuntimeException("Stub!");
    }

    public ConcurrentNavigableMap subMap(Object fromKey, Object toKey)
    {
        throw new RuntimeException("Stub!");
    }

    public ConcurrentNavigableMap headMap(Object toKey)
    {
        throw new RuntimeException("Stub!");
    }

    public ConcurrentNavigableMap tailMap(Object fromKey)
    {
        throw new RuntimeException("Stub!");
    }

    public java.util.Map.Entry lowerEntry(Object key)
    {
        throw new RuntimeException("Stub!");
    }

    public Object lowerKey(Object key)
    {
        throw new RuntimeException("Stub!");
    }

    public java.util.Map.Entry floorEntry(Object key)
    {
        throw new RuntimeException("Stub!");
    }

    public Object floorKey(Object key)
    {
        throw new RuntimeException("Stub!");
    }

    public java.util.Map.Entry ceilingEntry(Object key)
    {
        throw new RuntimeException("Stub!");
    }

    public Object ceilingKey(Object key)
    {
        throw new RuntimeException("Stub!");
    }

    public java.util.Map.Entry higherEntry(Object key)
    {
        throw new RuntimeException("Stub!");
    }

    public Object higherKey(Object key)
    {
        throw new RuntimeException("Stub!");
    }

    public java.util.Map.Entry firstEntry()
    {
        throw new RuntimeException("Stub!");
    }

    public java.util.Map.Entry lastEntry()
    {
        throw new RuntimeException("Stub!");
    }

    public java.util.Map.Entry pollFirstEntry()
    {
        throw new RuntimeException("Stub!");
    }

    public java.util.Map.Entry pollLastEntry()
    {
        throw new RuntimeException("Stub!");
    }

    public void forEach(BiConsumer action)
    {
        throw new RuntimeException("Stub!");
    }

    public void replaceAll(BiFunction function)
    {
        throw new RuntimeException("Stub!");
    }

    public volatile Object clone()
        throws CloneNotSupportedException
    {
        return clone();
    }

    public volatile Set keySet()
    {
        return keySet();
    }

    public volatile SortedMap tailMap(Object obj)
    {
        return tailMap(obj);
    }

    public volatile SortedMap headMap(Object obj)
    {
        return headMap(obj);
    }

    public volatile SortedMap subMap(Object obj, Object obj1)
    {
        return subMap(obj, obj1);
    }

    public volatile NavigableMap tailMap(Object obj, boolean flag)
    {
        return tailMap(obj, flag);
    }

    public volatile NavigableMap headMap(Object obj, boolean flag)
    {
        return headMap(obj, flag);
    }

    public volatile NavigableMap subMap(Object obj, boolean flag, Object obj1, boolean flag1)
    {
        return subMap(obj, flag, obj1, flag1);
    }

    public volatile NavigableMap descendingMap()
    {
        return descendingMap();
    }
}
