// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   LinkedBlockingDeque.java

package java.util.concurrent;

import java.io.Serializable;
import java.util.*;

// Referenced classes of package java.util.concurrent:
//            BlockingDeque, TimeUnit

public class LinkedBlockingDeque extends AbstractQueue
    implements BlockingDeque, Serializable
{

    public LinkedBlockingDeque()
    {
        throw new RuntimeException("Stub!");
    }

    public LinkedBlockingDeque(int capacity)
    {
        throw new RuntimeException("Stub!");
    }

    public LinkedBlockingDeque(Collection c)
    {
        throw new RuntimeException("Stub!");
    }

    public void addFirst(Object e)
    {
        throw new RuntimeException("Stub!");
    }

    public void addLast(Object e)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean offerFirst(Object e)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean offerLast(Object e)
    {
        throw new RuntimeException("Stub!");
    }

    public void putFirst(Object e)
        throws InterruptedException
    {
        throw new RuntimeException("Stub!");
    }

    public void putLast(Object e)
        throws InterruptedException
    {
        throw new RuntimeException("Stub!");
    }

    public boolean offerFirst(Object e, long timeout, TimeUnit unit)
        throws InterruptedException
    {
        throw new RuntimeException("Stub!");
    }

    public boolean offerLast(Object e, long timeout, TimeUnit unit)
        throws InterruptedException
    {
        throw new RuntimeException("Stub!");
    }

    public Object removeFirst()
    {
        throw new RuntimeException("Stub!");
    }

    public Object removeLast()
    {
        throw new RuntimeException("Stub!");
    }

    public Object pollFirst()
    {
        throw new RuntimeException("Stub!");
    }

    public Object pollLast()
    {
        throw new RuntimeException("Stub!");
    }

    public Object takeFirst()
        throws InterruptedException
    {
        throw new RuntimeException("Stub!");
    }

    public Object takeLast()
        throws InterruptedException
    {
        throw new RuntimeException("Stub!");
    }

    public Object pollFirst(long timeout, TimeUnit unit)
        throws InterruptedException
    {
        throw new RuntimeException("Stub!");
    }

    public Object pollLast(long timeout, TimeUnit unit)
        throws InterruptedException
    {
        throw new RuntimeException("Stub!");
    }

    public Object getFirst()
    {
        throw new RuntimeException("Stub!");
    }

    public Object getLast()
    {
        throw new RuntimeException("Stub!");
    }

    public Object peekFirst()
    {
        throw new RuntimeException("Stub!");
    }

    public Object peekLast()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean removeFirstOccurrence(Object o)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean removeLastOccurrence(Object o)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean add(Object e)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean offer(Object e)
    {
        throw new RuntimeException("Stub!");
    }

    public void put(Object e)
        throws InterruptedException
    {
        throw new RuntimeException("Stub!");
    }

    public boolean offer(Object e, long timeout, TimeUnit unit)
        throws InterruptedException
    {
        throw new RuntimeException("Stub!");
    }

    public Object remove()
    {
        throw new RuntimeException("Stub!");
    }

    public Object poll()
    {
        throw new RuntimeException("Stub!");
    }

    public Object take()
        throws InterruptedException
    {
        throw new RuntimeException("Stub!");
    }

    public Object poll(long timeout, TimeUnit unit)
        throws InterruptedException
    {
        throw new RuntimeException("Stub!");
    }

    public Object element()
    {
        throw new RuntimeException("Stub!");
    }

    public Object peek()
    {
        throw new RuntimeException("Stub!");
    }

    public int remainingCapacity()
    {
        throw new RuntimeException("Stub!");
    }

    public int drainTo(Collection c)
    {
        throw new RuntimeException("Stub!");
    }

    public int drainTo(Collection c, int maxElements)
    {
        throw new RuntimeException("Stub!");
    }

    public void push(Object e)
    {
        throw new RuntimeException("Stub!");
    }

    public Object pop()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean remove(Object o)
    {
        throw new RuntimeException("Stub!");
    }

    public int size()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean contains(Object o)
    {
        throw new RuntimeException("Stub!");
    }

    public Object[] toArray()
    {
        throw new RuntimeException("Stub!");
    }

    public Object[] toArray(Object a[])
    {
        throw new RuntimeException("Stub!");
    }

    public String toString()
    {
        throw new RuntimeException("Stub!");
    }

    public void clear()
    {
        throw new RuntimeException("Stub!");
    }

    public Iterator iterator()
    {
        throw new RuntimeException("Stub!");
    }

    public Iterator descendingIterator()
    {
        throw new RuntimeException("Stub!");
    }

    public Spliterator spliterator()
    {
        throw new RuntimeException("Stub!");
    }
}
