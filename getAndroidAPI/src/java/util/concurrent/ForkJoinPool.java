// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   ForkJoinPool.java

package java.util.concurrent;

import java.util.Collection;
import java.util.List;

// Referenced classes of package java.util.concurrent:
//            AbstractExecutorService, ForkJoinTask, Callable, TimeUnit, 
//            RunnableFuture, Future, ForkJoinWorkerThread

public class ForkJoinPool extends AbstractExecutorService
{
    public static interface ManagedBlocker
    {

        public abstract boolean block()
            throws InterruptedException;

        public abstract boolean isReleasable();
    }

    public static interface ForkJoinWorkerThreadFactory
    {

        public abstract ForkJoinWorkerThread newThread(ForkJoinPool forkjoinpool);
    }


    public ForkJoinPool()
    {
        throw new RuntimeException("Stub!");
    }

    public ForkJoinPool(int parallelism)
    {
        throw new RuntimeException("Stub!");
    }

    public ForkJoinPool(int parallelism, ForkJoinWorkerThreadFactory factory, Thread.UncaughtExceptionHandler handler, boolean asyncMode)
    {
        throw new RuntimeException("Stub!");
    }

    public static ForkJoinPool commonPool()
    {
        throw new RuntimeException("Stub!");
    }

    public Object invoke(ForkJoinTask task)
    {
        throw new RuntimeException("Stub!");
    }

    public void execute(ForkJoinTask task)
    {
        throw new RuntimeException("Stub!");
    }

    public void execute(Runnable task)
    {
        throw new RuntimeException("Stub!");
    }

    public ForkJoinTask submit(ForkJoinTask task)
    {
        throw new RuntimeException("Stub!");
    }

    public ForkJoinTask submit(Callable task)
    {
        throw new RuntimeException("Stub!");
    }

    public ForkJoinTask submit(Runnable task, Object result)
    {
        throw new RuntimeException("Stub!");
    }

    public ForkJoinTask submit(Runnable task)
    {
        throw new RuntimeException("Stub!");
    }

    public List invokeAll(Collection tasks)
    {
        throw new RuntimeException("Stub!");
    }

    public ForkJoinWorkerThreadFactory getFactory()
    {
        throw new RuntimeException("Stub!");
    }

    public Thread.UncaughtExceptionHandler getUncaughtExceptionHandler()
    {
        throw new RuntimeException("Stub!");
    }

    public int getParallelism()
    {
        throw new RuntimeException("Stub!");
    }

    public static int getCommonPoolParallelism()
    {
        throw new RuntimeException("Stub!");
    }

    public int getPoolSize()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean getAsyncMode()
    {
        throw new RuntimeException("Stub!");
    }

    public int getRunningThreadCount()
    {
        throw new RuntimeException("Stub!");
    }

    public int getActiveThreadCount()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isQuiescent()
    {
        throw new RuntimeException("Stub!");
    }

    public long getStealCount()
    {
        throw new RuntimeException("Stub!");
    }

    public long getQueuedTaskCount()
    {
        throw new RuntimeException("Stub!");
    }

    public int getQueuedSubmissionCount()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean hasQueuedSubmissions()
    {
        throw new RuntimeException("Stub!");
    }

    protected ForkJoinTask pollSubmission()
    {
        throw new RuntimeException("Stub!");
    }

    protected int drainTasksTo(Collection c)
    {
        throw new RuntimeException("Stub!");
    }

    public String toString()
    {
        throw new RuntimeException("Stub!");
    }

    public void shutdown()
    {
        throw new RuntimeException("Stub!");
    }

    public List shutdownNow()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isTerminated()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isTerminating()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isShutdown()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean awaitTermination(long timeout, TimeUnit unit)
        throws InterruptedException
    {
        throw new RuntimeException("Stub!");
    }

    public boolean awaitQuiescence(long timeout, TimeUnit unit)
    {
        throw new RuntimeException("Stub!");
    }

    public static void managedBlock(ManagedBlocker blocker)
        throws InterruptedException
    {
        throw new RuntimeException("Stub!");
    }

    protected RunnableFuture newTaskFor(Runnable runnable, Object value)
    {
        throw new RuntimeException("Stub!");
    }

    protected RunnableFuture newTaskFor(Callable callable)
    {
        throw new RuntimeException("Stub!");
    }

    public volatile Future submit(Callable callable)
    {
        return submit(callable);
    }

    public volatile Future submit(Runnable runnable, Object obj)
    {
        return submit(runnable, obj);
    }

    public volatile Future submit(Runnable runnable)
    {
        return submit(runnable);
    }

    public static final ForkJoinWorkerThreadFactory defaultForkJoinWorkerThreadFactory = null;

}
