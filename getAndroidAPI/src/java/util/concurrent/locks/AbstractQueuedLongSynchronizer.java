// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   AbstractQueuedLongSynchronizer.java

package java.util.concurrent.locks;

import java.io.Serializable;
import java.util.Collection;
import java.util.Date;
import java.util.concurrent.TimeUnit;

// Referenced classes of package java.util.concurrent.locks:
//            AbstractOwnableSynchronizer, Condition

public abstract class AbstractQueuedLongSynchronizer extends AbstractOwnableSynchronizer
    implements Serializable
{
    public class ConditionObject
        implements Condition, Serializable
    {

        public final void signal()
        {
            throw new RuntimeException("Stub!");
        }

        public final void signalAll()
        {
            throw new RuntimeException("Stub!");
        }

        public final void awaitUninterruptibly()
        {
            throw new RuntimeException("Stub!");
        }

        public final void await()
            throws InterruptedException
        {
            throw new RuntimeException("Stub!");
        }

        public final long awaitNanos(long nanosTimeout)
            throws InterruptedException
        {
            throw new RuntimeException("Stub!");
        }

        public final boolean awaitUntil(Date deadline)
            throws InterruptedException
        {
            throw new RuntimeException("Stub!");
        }

        public final boolean await(long time, TimeUnit unit)
            throws InterruptedException
        {
            throw new RuntimeException("Stub!");
        }

        protected final boolean hasWaiters()
        {
            throw new RuntimeException("Stub!");
        }

        protected final int getWaitQueueLength()
        {
            throw new RuntimeException("Stub!");
        }

        protected final Collection getWaitingThreads()
        {
            throw new RuntimeException("Stub!");
        }

        final AbstractQueuedLongSynchronizer this$0;

        public ConditionObject()
        {
            this.this$0 = AbstractQueuedLongSynchronizer.this;
            super();
            throw new RuntimeException("Stub!");
        }
    }


    protected AbstractQueuedLongSynchronizer()
    {
        throw new RuntimeException("Stub!");
    }

    protected final long getState()
    {
        throw new RuntimeException("Stub!");
    }

    protected final void setState(long newState)
    {
        throw new RuntimeException("Stub!");
    }

    protected final boolean compareAndSetState(long expect, long update)
    {
        throw new RuntimeException("Stub!");
    }

    protected boolean tryAcquire(long arg)
    {
        throw new RuntimeException("Stub!");
    }

    protected boolean tryRelease(long arg)
    {
        throw new RuntimeException("Stub!");
    }

    protected long tryAcquireShared(long arg)
    {
        throw new RuntimeException("Stub!");
    }

    protected boolean tryReleaseShared(long arg)
    {
        throw new RuntimeException("Stub!");
    }

    protected boolean isHeldExclusively()
    {
        throw new RuntimeException("Stub!");
    }

    public final void acquire(long arg)
    {
        throw new RuntimeException("Stub!");
    }

    public final void acquireInterruptibly(long arg)
        throws InterruptedException
    {
        throw new RuntimeException("Stub!");
    }

    public final boolean tryAcquireNanos(long arg, long nanosTimeout)
        throws InterruptedException
    {
        throw new RuntimeException("Stub!");
    }

    public final boolean release(long arg)
    {
        throw new RuntimeException("Stub!");
    }

    public final void acquireShared(long arg)
    {
        throw new RuntimeException("Stub!");
    }

    public final void acquireSharedInterruptibly(long arg)
        throws InterruptedException
    {
        throw new RuntimeException("Stub!");
    }

    public final boolean tryAcquireSharedNanos(long arg, long nanosTimeout)
        throws InterruptedException
    {
        throw new RuntimeException("Stub!");
    }

    public final boolean releaseShared(long arg)
    {
        throw new RuntimeException("Stub!");
    }

    public final boolean hasQueuedThreads()
    {
        throw new RuntimeException("Stub!");
    }

    public final boolean hasContended()
    {
        throw new RuntimeException("Stub!");
    }

    public final Thread getFirstQueuedThread()
    {
        throw new RuntimeException("Stub!");
    }

    public final boolean isQueued(Thread thread)
    {
        throw new RuntimeException("Stub!");
    }

    public final boolean hasQueuedPredecessors()
    {
        throw new RuntimeException("Stub!");
    }

    public final int getQueueLength()
    {
        throw new RuntimeException("Stub!");
    }

    public final Collection getQueuedThreads()
    {
        throw new RuntimeException("Stub!");
    }

    public final Collection getExclusiveQueuedThreads()
    {
        throw new RuntimeException("Stub!");
    }

    public final Collection getSharedQueuedThreads()
    {
        throw new RuntimeException("Stub!");
    }

    public String toString()
    {
        throw new RuntimeException("Stub!");
    }

    public final boolean owns(ConditionObject condition)
    {
        throw new RuntimeException("Stub!");
    }

    public final boolean hasWaiters(ConditionObject condition)
    {
        throw new RuntimeException("Stub!");
    }

    public final int getWaitQueueLength(ConditionObject condition)
    {
        throw new RuntimeException("Stub!");
    }

    public final Collection getWaitingThreads(ConditionObject condition)
    {
        throw new RuntimeException("Stub!");
    }
}
