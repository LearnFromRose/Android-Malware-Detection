// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   ForkJoinTask.java

package java.util.concurrent;

import java.io.Serializable;
import java.util.Collection;

// Referenced classes of package java.util.concurrent:
//            Future, ExecutionException, TimeoutException, TimeUnit, 
//            ForkJoinPool, Callable

public abstract class ForkJoinTask
    implements Future, Serializable
{

    public ForkJoinTask()
    {
        throw new RuntimeException("Stub!");
    }

    public final ForkJoinTask fork()
    {
        throw new RuntimeException("Stub!");
    }

    public final Object join()
    {
        throw new RuntimeException("Stub!");
    }

    public final Object invoke()
    {
        throw new RuntimeException("Stub!");
    }

    public static void invokeAll(ForkJoinTask t1, ForkJoinTask t2)
    {
        throw new RuntimeException("Stub!");
    }

    public static transient void invokeAll(ForkJoinTask tasks[])
    {
        throw new RuntimeException("Stub!");
    }

    public static Collection invokeAll(Collection tasks)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean cancel(boolean mayInterruptIfRunning)
    {
        throw new RuntimeException("Stub!");
    }

    public final boolean isDone()
    {
        throw new RuntimeException("Stub!");
    }

    public final boolean isCancelled()
    {
        throw new RuntimeException("Stub!");
    }

    public final boolean isCompletedAbnormally()
    {
        throw new RuntimeException("Stub!");
    }

    public final boolean isCompletedNormally()
    {
        throw new RuntimeException("Stub!");
    }

    public final Throwable getException()
    {
        throw new RuntimeException("Stub!");
    }

    public void completeExceptionally(Throwable ex)
    {
        throw new RuntimeException("Stub!");
    }

    public void complete(Object value)
    {
        throw new RuntimeException("Stub!");
    }

    public final void quietlyComplete()
    {
        throw new RuntimeException("Stub!");
    }

    public final Object get()
        throws ExecutionException, InterruptedException
    {
        throw new RuntimeException("Stub!");
    }

    public final Object get(long timeout, TimeUnit unit)
        throws ExecutionException, InterruptedException, TimeoutException
    {
        throw new RuntimeException("Stub!");
    }

    public final void quietlyJoin()
    {
        throw new RuntimeException("Stub!");
    }

    public final void quietlyInvoke()
    {
        throw new RuntimeException("Stub!");
    }

    public static void helpQuiesce()
    {
        throw new RuntimeException("Stub!");
    }

    public void reinitialize()
    {
        throw new RuntimeException("Stub!");
    }

    public static ForkJoinPool getPool()
    {
        throw new RuntimeException("Stub!");
    }

    public static boolean inForkJoinPool()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean tryUnfork()
    {
        throw new RuntimeException("Stub!");
    }

    public static int getQueuedTaskCount()
    {
        throw new RuntimeException("Stub!");
    }

    public static int getSurplusQueuedTaskCount()
    {
        throw new RuntimeException("Stub!");
    }

    public abstract Object getRawResult();

    protected abstract void setRawResult(Object obj);

    protected abstract boolean exec();

    protected static ForkJoinTask peekNextLocalTask()
    {
        throw new RuntimeException("Stub!");
    }

    protected static ForkJoinTask pollNextLocalTask()
    {
        throw new RuntimeException("Stub!");
    }

    protected static ForkJoinTask pollTask()
    {
        throw new RuntimeException("Stub!");
    }

    public final short getForkJoinTaskTag()
    {
        throw new RuntimeException("Stub!");
    }

    public final short setForkJoinTaskTag(short newValue)
    {
        throw new RuntimeException("Stub!");
    }

    public final boolean compareAndSetForkJoinTaskTag(short expect, short update)
    {
        throw new RuntimeException("Stub!");
    }

    public static ForkJoinTask adapt(Runnable runnable)
    {
        throw new RuntimeException("Stub!");
    }

    public static ForkJoinTask adapt(Runnable runnable, Object result)
    {
        throw new RuntimeException("Stub!");
    }

    public static ForkJoinTask adapt(Callable callable)
    {
        throw new RuntimeException("Stub!");
    }
}
