// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   AtomicReferenceFieldUpdater.java

package java.util.concurrent.atomic;

import java.util.function.BinaryOperator;
import java.util.function.UnaryOperator;

public abstract class AtomicReferenceFieldUpdater
{

    protected AtomicReferenceFieldUpdater()
    {
        throw new RuntimeException("Stub!");
    }

    public static AtomicReferenceFieldUpdater newUpdater(Class tclass, Class vclass, String fieldName)
    {
        throw new RuntimeException("Stub!");
    }

    public abstract boolean compareAndSet(Object obj, Object obj1, Object obj2);

    public abstract boolean weakCompareAndSet(Object obj, Object obj1, Object obj2);

    public abstract void set(Object obj, Object obj1);

    public abstract void lazySet(Object obj, Object obj1);

    public abstract Object get(Object obj);

    public Object getAndSet(Object obj, Object newValue)
    {
        throw new RuntimeException("Stub!");
    }

    public final Object getAndUpdate(Object obj, UnaryOperator updateFunction)
    {
        throw new RuntimeException("Stub!");
    }

    public final Object updateAndGet(Object obj, UnaryOperator updateFunction)
    {
        throw new RuntimeException("Stub!");
    }

    public final Object getAndAccumulate(Object obj, Object x, BinaryOperator accumulatorFunction)
    {
        throw new RuntimeException("Stub!");
    }

    public final Object accumulateAndGet(Object obj, Object x, BinaryOperator accumulatorFunction)
    {
        throw new RuntimeException("Stub!");
    }
}
