// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   AtomicReference.java

package java.util.concurrent.atomic;

import java.io.Serializable;
import java.util.function.BinaryOperator;
import java.util.function.UnaryOperator;

public class AtomicReference
    implements Serializable
{

    public AtomicReference(Object initialValue)
    {
        throw new RuntimeException("Stub!");
    }

    public AtomicReference()
    {
        throw new RuntimeException("Stub!");
    }

    public final Object get()
    {
        throw new RuntimeException("Stub!");
    }

    public final void set(Object newValue)
    {
        throw new RuntimeException("Stub!");
    }

    public final void lazySet(Object newValue)
    {
        throw new RuntimeException("Stub!");
    }

    public final boolean compareAndSet(Object expect, Object update)
    {
        throw new RuntimeException("Stub!");
    }

    public final boolean weakCompareAndSet(Object expect, Object update)
    {
        throw new RuntimeException("Stub!");
    }

    public final Object getAndSet(Object newValue)
    {
        throw new RuntimeException("Stub!");
    }

    public final Object getAndUpdate(UnaryOperator updateFunction)
    {
        throw new RuntimeException("Stub!");
    }

    public final Object updateAndGet(UnaryOperator updateFunction)
    {
        throw new RuntimeException("Stub!");
    }

    public final Object getAndAccumulate(Object x, BinaryOperator accumulatorFunction)
    {
        throw new RuntimeException("Stub!");
    }

    public final Object accumulateAndGet(Object x, BinaryOperator accumulatorFunction)
    {
        throw new RuntimeException("Stub!");
    }

    public String toString()
    {
        throw new RuntimeException("Stub!");
    }
}
