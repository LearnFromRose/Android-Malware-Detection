// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   Arrays.java

package java.util;

import java.util.function.*;
import java.util.stream.*;

// Referenced classes of package java.util:
//            Spliterator, Comparator, List

public class Arrays
{

    Arrays()
    {
        throw new RuntimeException("Stub!");
    }

    public static void sort(int a[])
    {
        throw new RuntimeException("Stub!");
    }

    public static void sort(int a[], int fromIndex, int toIndex)
    {
        throw new RuntimeException("Stub!");
    }

    public static void sort(long a[])
    {
        throw new RuntimeException("Stub!");
    }

    public static void sort(long a[], int fromIndex, int toIndex)
    {
        throw new RuntimeException("Stub!");
    }

    public static void sort(short a[])
    {
        throw new RuntimeException("Stub!");
    }

    public static void sort(short a[], int fromIndex, int toIndex)
    {
        throw new RuntimeException("Stub!");
    }

    public static void sort(char a[])
    {
        throw new RuntimeException("Stub!");
    }

    public static void sort(char a[], int fromIndex, int toIndex)
    {
        throw new RuntimeException("Stub!");
    }

    public static void sort(byte a[])
    {
        throw new RuntimeException("Stub!");
    }

    public static void sort(byte a[], int fromIndex, int toIndex)
    {
        throw new RuntimeException("Stub!");
    }

    public static void sort(float a[])
    {
        throw new RuntimeException("Stub!");
    }

    public static void sort(float a[], int fromIndex, int toIndex)
    {
        throw new RuntimeException("Stub!");
    }

    public static void sort(double a[])
    {
        throw new RuntimeException("Stub!");
    }

    public static void sort(double a[], int fromIndex, int toIndex)
    {
        throw new RuntimeException("Stub!");
    }

    public static void parallelSort(byte a[])
    {
        throw new RuntimeException("Stub!");
    }

    public static void parallelSort(byte a[], int fromIndex, int toIndex)
    {
        throw new RuntimeException("Stub!");
    }

    public static void parallelSort(char a[])
    {
        throw new RuntimeException("Stub!");
    }

    public static void parallelSort(char a[], int fromIndex, int toIndex)
    {
        throw new RuntimeException("Stub!");
    }

    public static void parallelSort(short a[])
    {
        throw new RuntimeException("Stub!");
    }

    public static void parallelSort(short a[], int fromIndex, int toIndex)
    {
        throw new RuntimeException("Stub!");
    }

    public static void parallelSort(int a[])
    {
        throw new RuntimeException("Stub!");
    }

    public static void parallelSort(int a[], int fromIndex, int toIndex)
    {
        throw new RuntimeException("Stub!");
    }

    public static void parallelSort(long a[])
    {
        throw new RuntimeException("Stub!");
    }

    public static void parallelSort(long a[], int fromIndex, int toIndex)
    {
        throw new RuntimeException("Stub!");
    }

    public static void parallelSort(float a[])
    {
        throw new RuntimeException("Stub!");
    }

    public static void parallelSort(float a[], int fromIndex, int toIndex)
    {
        throw new RuntimeException("Stub!");
    }

    public static void parallelSort(double a[])
    {
        throw new RuntimeException("Stub!");
    }

    public static void parallelSort(double a[], int fromIndex, int toIndex)
    {
        throw new RuntimeException("Stub!");
    }

    public static void parallelSort(Comparable a[])
    {
        throw new RuntimeException("Stub!");
    }

    public static void parallelSort(Comparable a[], int fromIndex, int toIndex)
    {
        throw new RuntimeException("Stub!");
    }

    public static void parallelSort(Object a[], Comparator cmp)
    {
        throw new RuntimeException("Stub!");
    }

    public static void parallelSort(Object a[], int fromIndex, int toIndex, Comparator cmp)
    {
        throw new RuntimeException("Stub!");
    }

    public static void sort(Object a[])
    {
        throw new RuntimeException("Stub!");
    }

    public static void sort(Object a[], int fromIndex, int toIndex)
    {
        throw new RuntimeException("Stub!");
    }

    public static void sort(Object a[], Comparator c)
    {
        throw new RuntimeException("Stub!");
    }

    public static void sort(Object a[], int fromIndex, int toIndex, Comparator c)
    {
        throw new RuntimeException("Stub!");
    }

    public static void parallelPrefix(Object array[], BinaryOperator op)
    {
        throw new RuntimeException("Stub!");
    }

    public static void parallelPrefix(Object array[], int fromIndex, int toIndex, BinaryOperator op)
    {
        throw new RuntimeException("Stub!");
    }

    public static void parallelPrefix(long array[], LongBinaryOperator op)
    {
        throw new RuntimeException("Stub!");
    }

    public static void parallelPrefix(long array[], int fromIndex, int toIndex, LongBinaryOperator op)
    {
        throw new RuntimeException("Stub!");
    }

    public static void parallelPrefix(double array[], DoubleBinaryOperator op)
    {
        throw new RuntimeException("Stub!");
    }

    public static void parallelPrefix(double array[], int fromIndex, int toIndex, DoubleBinaryOperator op)
    {
        throw new RuntimeException("Stub!");
    }

    public static void parallelPrefix(int array[], IntBinaryOperator op)
    {
        throw new RuntimeException("Stub!");
    }

    public static void parallelPrefix(int array[], int fromIndex, int toIndex, IntBinaryOperator op)
    {
        throw new RuntimeException("Stub!");
    }

    public static int binarySearch(long a[], long key)
    {
        throw new RuntimeException("Stub!");
    }

    public static int binarySearch(long a[], int fromIndex, int toIndex, long key)
    {
        throw new RuntimeException("Stub!");
    }

    public static int binarySearch(int a[], int key)
    {
        throw new RuntimeException("Stub!");
    }

    public static int binarySearch(int a[], int fromIndex, int toIndex, int key)
    {
        throw new RuntimeException("Stub!");
    }

    public static int binarySearch(short a[], short key)
    {
        throw new RuntimeException("Stub!");
    }

    public static int binarySearch(short a[], int fromIndex, int toIndex, short key)
    {
        throw new RuntimeException("Stub!");
    }

    public static int binarySearch(char a[], char key)
    {
        throw new RuntimeException("Stub!");
    }

    public static int binarySearch(char a[], int fromIndex, int toIndex, char key)
    {
        throw new RuntimeException("Stub!");
    }

    public static int binarySearch(byte a[], byte key)
    {
        throw new RuntimeException("Stub!");
    }

    public static int binarySearch(byte a[], int fromIndex, int toIndex, byte key)
    {
        throw new RuntimeException("Stub!");
    }

    public static int binarySearch(double a[], double key)
    {
        throw new RuntimeException("Stub!");
    }

    public static int binarySearch(double a[], int fromIndex, int toIndex, double key)
    {
        throw new RuntimeException("Stub!");
    }

    public static int binarySearch(float a[], float key)
    {
        throw new RuntimeException("Stub!");
    }

    public static int binarySearch(float a[], int fromIndex, int toIndex, float key)
    {
        throw new RuntimeException("Stub!");
    }

    public static int binarySearch(Object a[], Object key)
    {
        throw new RuntimeException("Stub!");
    }

    public static int binarySearch(Object a[], int fromIndex, int toIndex, Object key)
    {
        throw new RuntimeException("Stub!");
    }

    public static int binarySearch(Object a[], Object key, Comparator c)
    {
        throw new RuntimeException("Stub!");
    }

    public static int binarySearch(Object a[], int fromIndex, int toIndex, Object key, Comparator c)
    {
        throw new RuntimeException("Stub!");
    }

    public static boolean equals(long a[], long a2[])
    {
        throw new RuntimeException("Stub!");
    }

    public static boolean equals(int a[], int a2[])
    {
        throw new RuntimeException("Stub!");
    }

    public static boolean equals(short a[], short a2[])
    {
        throw new RuntimeException("Stub!");
    }

    public static boolean equals(char a[], char a2[])
    {
        throw new RuntimeException("Stub!");
    }

    public static boolean equals(byte a[], byte a2[])
    {
        throw new RuntimeException("Stub!");
    }

    public static boolean equals(boolean a[], boolean a2[])
    {
        throw new RuntimeException("Stub!");
    }

    public static boolean equals(double a[], double a2[])
    {
        throw new RuntimeException("Stub!");
    }

    public static boolean equals(float a[], float a2[])
    {
        throw new RuntimeException("Stub!");
    }

    public static boolean equals(Object a[], Object a2[])
    {
        throw new RuntimeException("Stub!");
    }

    public static void fill(long a[], long val)
    {
        throw new RuntimeException("Stub!");
    }

    public static void fill(long a[], int fromIndex, int toIndex, long val)
    {
        throw new RuntimeException("Stub!");
    }

    public static void fill(int a[], int val)
    {
        throw new RuntimeException("Stub!");
    }

    public static void fill(int a[], int fromIndex, int toIndex, int val)
    {
        throw new RuntimeException("Stub!");
    }

    public static void fill(short a[], short val)
    {
        throw new RuntimeException("Stub!");
    }

    public static void fill(short a[], int fromIndex, int toIndex, short val)
    {
        throw new RuntimeException("Stub!");
    }

    public static void fill(char a[], char val)
    {
        throw new RuntimeException("Stub!");
    }

    public static void fill(char a[], int fromIndex, int toIndex, char val)
    {
        throw new RuntimeException("Stub!");
    }

    public static void fill(byte a[], byte val)
    {
        throw new RuntimeException("Stub!");
    }

    public static void fill(byte a[], int fromIndex, int toIndex, byte val)
    {
        throw new RuntimeException("Stub!");
    }

    public static void fill(boolean a[], boolean val)
    {
        throw new RuntimeException("Stub!");
    }

    public static void fill(boolean a[], int fromIndex, int toIndex, boolean val)
    {
        throw new RuntimeException("Stub!");
    }

    public static void fill(double a[], double val)
    {
        throw new RuntimeException("Stub!");
    }

    public static void fill(double a[], int fromIndex, int toIndex, double val)
    {
        throw new RuntimeException("Stub!");
    }

    public static void fill(float a[], float val)
    {
        throw new RuntimeException("Stub!");
    }

    public static void fill(float a[], int fromIndex, int toIndex, float val)
    {
        throw new RuntimeException("Stub!");
    }

    public static void fill(Object a[], Object val)
    {
        throw new RuntimeException("Stub!");
    }

    public static void fill(Object a[], int fromIndex, int toIndex, Object val)
    {
        throw new RuntimeException("Stub!");
    }

    public static Object[] copyOf(Object original[], int newLength)
    {
        throw new RuntimeException("Stub!");
    }

    public static Object[] copyOf(Object original[], int newLength, Class newType)
    {
        throw new RuntimeException("Stub!");
    }

    public static byte[] copyOf(byte original[], int newLength)
    {
        throw new RuntimeException("Stub!");
    }

    public static short[] copyOf(short original[], int newLength)
    {
        throw new RuntimeException("Stub!");
    }

    public static int[] copyOf(int original[], int newLength)
    {
        throw new RuntimeException("Stub!");
    }

    public static long[] copyOf(long original[], int newLength)
    {
        throw new RuntimeException("Stub!");
    }

    public static char[] copyOf(char original[], int newLength)
    {
        throw new RuntimeException("Stub!");
    }

    public static float[] copyOf(float original[], int newLength)
    {
        throw new RuntimeException("Stub!");
    }

    public static double[] copyOf(double original[], int newLength)
    {
        throw new RuntimeException("Stub!");
    }

    public static boolean[] copyOf(boolean original[], int newLength)
    {
        throw new RuntimeException("Stub!");
    }

    public static Object[] copyOfRange(Object original[], int from, int to)
    {
        throw new RuntimeException("Stub!");
    }

    public static Object[] copyOfRange(Object original[], int from, int to, Class newType)
    {
        throw new RuntimeException("Stub!");
    }

    public static byte[] copyOfRange(byte original[], int from, int to)
    {
        throw new RuntimeException("Stub!");
    }

    public static short[] copyOfRange(short original[], int from, int to)
    {
        throw new RuntimeException("Stub!");
    }

    public static int[] copyOfRange(int original[], int from, int to)
    {
        throw new RuntimeException("Stub!");
    }

    public static long[] copyOfRange(long original[], int from, int to)
    {
        throw new RuntimeException("Stub!");
    }

    public static char[] copyOfRange(char original[], int from, int to)
    {
        throw new RuntimeException("Stub!");
    }

    public static float[] copyOfRange(float original[], int from, int to)
    {
        throw new RuntimeException("Stub!");
    }

    public static double[] copyOfRange(double original[], int from, int to)
    {
        throw new RuntimeException("Stub!");
    }

    public static boolean[] copyOfRange(boolean original[], int from, int to)
    {
        throw new RuntimeException("Stub!");
    }

    public static transient List asList(Object a[])
    {
        throw new RuntimeException("Stub!");
    }

    public static int hashCode(long a[])
    {
        throw new RuntimeException("Stub!");
    }

    public static int hashCode(int a[])
    {
        throw new RuntimeException("Stub!");
    }

    public static int hashCode(short a[])
    {
        throw new RuntimeException("Stub!");
    }

    public static int hashCode(char a[])
    {
        throw new RuntimeException("Stub!");
    }

    public static int hashCode(byte a[])
    {
        throw new RuntimeException("Stub!");
    }

    public static int hashCode(boolean a[])
    {
        throw new RuntimeException("Stub!");
    }

    public static int hashCode(float a[])
    {
        throw new RuntimeException("Stub!");
    }

    public static int hashCode(double a[])
    {
        throw new RuntimeException("Stub!");
    }

    public static int hashCode(Object a[])
    {
        throw new RuntimeException("Stub!");
    }

    public static int deepHashCode(Object a[])
    {
        throw new RuntimeException("Stub!");
    }

    public static boolean deepEquals(Object a1[], Object a2[])
    {
        throw new RuntimeException("Stub!");
    }

    public static String toString(long a[])
    {
        throw new RuntimeException("Stub!");
    }

    public static String toString(int a[])
    {
        throw new RuntimeException("Stub!");
    }

    public static String toString(short a[])
    {
        throw new RuntimeException("Stub!");
    }

    public static String toString(char a[])
    {
        throw new RuntimeException("Stub!");
    }

    public static String toString(byte a[])
    {
        throw new RuntimeException("Stub!");
    }

    public static String toString(boolean a[])
    {
        throw new RuntimeException("Stub!");
    }

    public static String toString(float a[])
    {
        throw new RuntimeException("Stub!");
    }

    public static String toString(double a[])
    {
        throw new RuntimeException("Stub!");
    }

    public static String toString(Object a[])
    {
        throw new RuntimeException("Stub!");
    }

    public static String deepToString(Object a[])
    {
        throw new RuntimeException("Stub!");
    }

    public static void setAll(Object array[], IntFunction generator)
    {
        throw new RuntimeException("Stub!");
    }

    public static void parallelSetAll(Object array[], IntFunction generator)
    {
        throw new RuntimeException("Stub!");
    }

    public static void setAll(int array[], IntUnaryOperator generator)
    {
        throw new RuntimeException("Stub!");
    }

    public static void parallelSetAll(int array[], IntUnaryOperator generator)
    {
        throw new RuntimeException("Stub!");
    }

    public static void setAll(long array[], IntToLongFunction generator)
    {
        throw new RuntimeException("Stub!");
    }

    public static void parallelSetAll(long array[], IntToLongFunction generator)
    {
        throw new RuntimeException("Stub!");
    }

    public static void setAll(double array[], IntToDoubleFunction generator)
    {
        throw new RuntimeException("Stub!");
    }

    public static void parallelSetAll(double array[], IntToDoubleFunction generator)
    {
        throw new RuntimeException("Stub!");
    }

    public static Spliterator spliterator(Object array[])
    {
        throw new RuntimeException("Stub!");
    }

    public static Spliterator spliterator(Object array[], int startInclusive, int endExclusive)
    {
        throw new RuntimeException("Stub!");
    }

    public static Spliterator.OfInt spliterator(int array[])
    {
        throw new RuntimeException("Stub!");
    }

    public static Spliterator.OfInt spliterator(int array[], int startInclusive, int endExclusive)
    {
        throw new RuntimeException("Stub!");
    }

    public static Spliterator.OfLong spliterator(long array[])
    {
        throw new RuntimeException("Stub!");
    }

    public static Spliterator.OfLong spliterator(long array[], int startInclusive, int endExclusive)
    {
        throw new RuntimeException("Stub!");
    }

    public static Spliterator.OfDouble spliterator(double array[])
    {
        throw new RuntimeException("Stub!");
    }

    public static Spliterator.OfDouble spliterator(double array[], int startInclusive, int endExclusive)
    {
        throw new RuntimeException("Stub!");
    }

    public static Stream stream(Object array[])
    {
        throw new RuntimeException("Stub!");
    }

    public static Stream stream(Object array[], int startInclusive, int endExclusive)
    {
        throw new RuntimeException("Stub!");
    }

    public static IntStream stream(int array[])
    {
        throw new RuntimeException("Stub!");
    }

    public static IntStream stream(int array[], int startInclusive, int endExclusive)
    {
        throw new RuntimeException("Stub!");
    }

    public static LongStream stream(long array[])
    {
        throw new RuntimeException("Stub!");
    }

    public static LongStream stream(long array[], int startInclusive, int endExclusive)
    {
        throw new RuntimeException("Stub!");
    }

    public static DoubleStream stream(double array[])
    {
        throw new RuntimeException("Stub!");
    }

    public static DoubleStream stream(double array[], int startInclusive, int endExclusive)
    {
        throw new RuntimeException("Stub!");
    }
}
