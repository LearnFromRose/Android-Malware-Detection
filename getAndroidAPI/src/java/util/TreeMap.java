// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   TreeMap.java

package java.util;

import java.io.Serializable;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

// Referenced classes of package java.util:
//            AbstractMap, NavigableMap, Map, Comparator, 
//            SortedMap, Set, NavigableSet, Collection

public class TreeMap extends AbstractMap
    implements NavigableMap, Cloneable, Serializable
{

    public TreeMap()
    {
        throw new RuntimeException("Stub!");
    }

    public TreeMap(Comparator comparator)
    {
        throw new RuntimeException("Stub!");
    }

    public TreeMap(Map m)
    {
        throw new RuntimeException("Stub!");
    }

    public TreeMap(SortedMap m)
    {
        throw new RuntimeException("Stub!");
    }

    public int size()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean containsKey(Object key)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean containsValue(Object value)
    {
        throw new RuntimeException("Stub!");
    }

    public Object get(Object key)
    {
        throw new RuntimeException("Stub!");
    }

    public Comparator comparator()
    {
        throw new RuntimeException("Stub!");
    }

    public Object firstKey()
    {
        throw new RuntimeException("Stub!");
    }

    public Object lastKey()
    {
        throw new RuntimeException("Stub!");
    }

    public void putAll(Map map)
    {
        throw new RuntimeException("Stub!");
    }

    public Object put(Object key, Object value)
    {
        throw new RuntimeException("Stub!");
    }

    public Object remove(Object key)
    {
        throw new RuntimeException("Stub!");
    }

    public void clear()
    {
        throw new RuntimeException("Stub!");
    }

    public Object clone()
    {
        throw new RuntimeException("Stub!");
    }

    public Map.Entry firstEntry()
    {
        throw new RuntimeException("Stub!");
    }

    public Map.Entry lastEntry()
    {
        throw new RuntimeException("Stub!");
    }

    public Map.Entry pollFirstEntry()
    {
        throw new RuntimeException("Stub!");
    }

    public Map.Entry pollLastEntry()
    {
        throw new RuntimeException("Stub!");
    }

    public Map.Entry lowerEntry(Object key)
    {
        throw new RuntimeException("Stub!");
    }

    public Object lowerKey(Object key)
    {
        throw new RuntimeException("Stub!");
    }

    public Map.Entry floorEntry(Object key)
    {
        throw new RuntimeException("Stub!");
    }

    public Object floorKey(Object key)
    {
        throw new RuntimeException("Stub!");
    }

    public Map.Entry ceilingEntry(Object key)
    {
        throw new RuntimeException("Stub!");
    }

    public Object ceilingKey(Object key)
    {
        throw new RuntimeException("Stub!");
    }

    public Map.Entry higherEntry(Object key)
    {
        throw new RuntimeException("Stub!");
    }

    public Object higherKey(Object key)
    {
        throw new RuntimeException("Stub!");
    }

    public Set keySet()
    {
        throw new RuntimeException("Stub!");
    }

    public NavigableSet navigableKeySet()
    {
        throw new RuntimeException("Stub!");
    }

    public NavigableSet descendingKeySet()
    {
        throw new RuntimeException("Stub!");
    }

    public Collection values()
    {
        throw new RuntimeException("Stub!");
    }

    public Set entrySet()
    {
        throw new RuntimeException("Stub!");
    }

    public NavigableMap descendingMap()
    {
        throw new RuntimeException("Stub!");
    }

    public NavigableMap subMap(Object fromKey, boolean fromInclusive, Object toKey, boolean toInclusive)
    {
        throw new RuntimeException("Stub!");
    }

    public NavigableMap headMap(Object toKey, boolean inclusive)
    {
        throw new RuntimeException("Stub!");
    }

    public NavigableMap tailMap(Object fromKey, boolean inclusive)
    {
        throw new RuntimeException("Stub!");
    }

    public SortedMap subMap(Object fromKey, Object toKey)
    {
        throw new RuntimeException("Stub!");
    }

    public SortedMap headMap(Object toKey)
    {
        throw new RuntimeException("Stub!");
    }

    public SortedMap tailMap(Object fromKey)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean replace(Object key, Object oldValue, Object newValue)
    {
        throw new RuntimeException("Stub!");
    }

    public Object replace(Object key, Object value)
    {
        throw new RuntimeException("Stub!");
    }

    public void forEach(BiConsumer action)
    {
        throw new RuntimeException("Stub!");
    }

    public void replaceAll(BiFunction function)
    {
        throw new RuntimeException("Stub!");
    }
}
