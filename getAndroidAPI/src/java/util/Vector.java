// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   Vector.java

package java.util;

import java.io.Serializable;
import java.util.function.*;

// Referenced classes of package java.util:
//            AbstractList, List, RandomAccess, Collection, 
//            Enumeration, ListIterator, Iterator, Comparator, 
//            Spliterator

public class Vector extends AbstractList
    implements List, RandomAccess, Cloneable, Serializable
{

    public Vector(int initialCapacity, int capacityIncrement)
    {
        throw new RuntimeException("Stub!");
    }

    public Vector(int initialCapacity)
    {
        throw new RuntimeException("Stub!");
    }

    public Vector()
    {
        throw new RuntimeException("Stub!");
    }

    public Vector(Collection c)
    {
        throw new RuntimeException("Stub!");
    }

    public synchronized void copyInto(Object anArray[])
    {
        throw new RuntimeException("Stub!");
    }

    public synchronized void trimToSize()
    {
        throw new RuntimeException("Stub!");
    }

    public synchronized void ensureCapacity(int minCapacity)
    {
        throw new RuntimeException("Stub!");
    }

    public synchronized void setSize(int newSize)
    {
        throw new RuntimeException("Stub!");
    }

    public synchronized int capacity()
    {
        throw new RuntimeException("Stub!");
    }

    public synchronized int size()
    {
        throw new RuntimeException("Stub!");
    }

    public synchronized boolean isEmpty()
    {
        throw new RuntimeException("Stub!");
    }

    public Enumeration elements()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean contains(Object o)
    {
        throw new RuntimeException("Stub!");
    }

    public int indexOf(Object o)
    {
        throw new RuntimeException("Stub!");
    }

    public synchronized int indexOf(Object o, int index)
    {
        throw new RuntimeException("Stub!");
    }

    public synchronized int lastIndexOf(Object o)
    {
        throw new RuntimeException("Stub!");
    }

    public synchronized int lastIndexOf(Object o, int index)
    {
        throw new RuntimeException("Stub!");
    }

    public synchronized Object elementAt(int index)
    {
        throw new RuntimeException("Stub!");
    }

    public synchronized Object firstElement()
    {
        throw new RuntimeException("Stub!");
    }

    public synchronized Object lastElement()
    {
        throw new RuntimeException("Stub!");
    }

    public synchronized void setElementAt(Object obj, int index)
    {
        throw new RuntimeException("Stub!");
    }

    public synchronized void removeElementAt(int index)
    {
        throw new RuntimeException("Stub!");
    }

    public synchronized void insertElementAt(Object obj, int index)
    {
        throw new RuntimeException("Stub!");
    }

    public synchronized void addElement(Object obj)
    {
        throw new RuntimeException("Stub!");
    }

    public synchronized boolean removeElement(Object obj)
    {
        throw new RuntimeException("Stub!");
    }

    public synchronized void removeAllElements()
    {
        throw new RuntimeException("Stub!");
    }

    public synchronized Object clone()
    {
        throw new RuntimeException("Stub!");
    }

    public synchronized Object[] toArray()
    {
        throw new RuntimeException("Stub!");
    }

    public synchronized Object[] toArray(Object a[])
    {
        throw new RuntimeException("Stub!");
    }

    public synchronized Object get(int index)
    {
        throw new RuntimeException("Stub!");
    }

    public synchronized Object set(int index, Object element)
    {
        throw new RuntimeException("Stub!");
    }

    public synchronized boolean add(Object e)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean remove(Object o)
    {
        throw new RuntimeException("Stub!");
    }

    public void add(int index, Object element)
    {
        throw new RuntimeException("Stub!");
    }

    public synchronized Object remove(int index)
    {
        throw new RuntimeException("Stub!");
    }

    public void clear()
    {
        throw new RuntimeException("Stub!");
    }

    public synchronized boolean containsAll(Collection c)
    {
        throw new RuntimeException("Stub!");
    }

    public synchronized boolean addAll(Collection c)
    {
        throw new RuntimeException("Stub!");
    }

    public synchronized boolean removeAll(Collection c)
    {
        throw new RuntimeException("Stub!");
    }

    public synchronized boolean retainAll(Collection c)
    {
        throw new RuntimeException("Stub!");
    }

    public synchronized boolean addAll(int index, Collection c)
    {
        throw new RuntimeException("Stub!");
    }

    public synchronized boolean equals(Object o)
    {
        throw new RuntimeException("Stub!");
    }

    public synchronized int hashCode()
    {
        throw new RuntimeException("Stub!");
    }

    public synchronized String toString()
    {
        throw new RuntimeException("Stub!");
    }

    public synchronized List subList(int fromIndex, int toIndex)
    {
        throw new RuntimeException("Stub!");
    }

    protected synchronized void removeRange(int fromIndex, int toIndex)
    {
        throw new RuntimeException("Stub!");
    }

    public synchronized ListIterator listIterator(int index)
    {
        throw new RuntimeException("Stub!");
    }

    public synchronized ListIterator listIterator()
    {
        throw new RuntimeException("Stub!");
    }

    public synchronized Iterator iterator()
    {
        throw new RuntimeException("Stub!");
    }

    public synchronized void forEach(Consumer action)
    {
        throw new RuntimeException("Stub!");
    }

    public synchronized boolean removeIf(Predicate filter)
    {
        throw new RuntimeException("Stub!");
    }

    public synchronized void replaceAll(UnaryOperator operator)
    {
        throw new RuntimeException("Stub!");
    }

    public synchronized void sort(Comparator c)
    {
        throw new RuntimeException("Stub!");
    }

    public Spliterator spliterator()
    {
        throw new RuntimeException("Stub!");
    }

    protected int capacityIncrement;
    protected int elementCount;
    protected Object elementData[];
}
