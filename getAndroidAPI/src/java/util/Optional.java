// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   Optional.java

package java.util;

import java.util.function.*;

public final class Optional
{

    Optional()
    {
        throw new RuntimeException("Stub!");
    }

    public static Optional empty()
    {
        throw new RuntimeException("Stub!");
    }

    public static Optional of(Object value)
    {
        throw new RuntimeException("Stub!");
    }

    public static Optional ofNullable(Object value)
    {
        throw new RuntimeException("Stub!");
    }

    public Object get()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isPresent()
    {
        throw new RuntimeException("Stub!");
    }

    public void ifPresent(Consumer consumer)
    {
        throw new RuntimeException("Stub!");
    }

    public Optional filter(Predicate predicate)
    {
        throw new RuntimeException("Stub!");
    }

    public Optional map(Function mapper)
    {
        throw new RuntimeException("Stub!");
    }

    public Optional flatMap(Function mapper)
    {
        throw new RuntimeException("Stub!");
    }

    public Object orElse(Object other)
    {
        throw new RuntimeException("Stub!");
    }

    public Object orElseGet(Supplier other)
    {
        throw new RuntimeException("Stub!");
    }

    public Object orElseThrow(Supplier exceptionSupplier)
        throws Throwable
    {
        throw new RuntimeException("Stub!");
    }

    public boolean equals(Object obj)
    {
        throw new RuntimeException("Stub!");
    }

    public int hashCode()
    {
        throw new RuntimeException("Stub!");
    }

    public String toString()
    {
        throw new RuntimeException("Stub!");
    }
}
