// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   AbstractPreferences.java

package java.util.prefs;

import java.io.IOException;
import java.io.OutputStream;

// Referenced classes of package java.util.prefs:
//            Preferences, BackingStoreException, PreferenceChangeListener, NodeChangeListener

public abstract class AbstractPreferences extends Preferences
{

    protected AbstractPreferences(AbstractPreferences parent, String name)
    {
        newNode = false;
        throw new RuntimeException("Stub!");
    }

    public void put(String key, String value)
    {
        throw new RuntimeException("Stub!");
    }

    public String get(String key, String def)
    {
        throw new RuntimeException("Stub!");
    }

    public void remove(String key)
    {
        throw new RuntimeException("Stub!");
    }

    public void clear()
        throws BackingStoreException
    {
        throw new RuntimeException("Stub!");
    }

    public void putInt(String key, int value)
    {
        throw new RuntimeException("Stub!");
    }

    public int getInt(String key, int def)
    {
        throw new RuntimeException("Stub!");
    }

    public void putLong(String key, long value)
    {
        throw new RuntimeException("Stub!");
    }

    public long getLong(String key, long def)
    {
        throw new RuntimeException("Stub!");
    }

    public void putBoolean(String key, boolean value)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean getBoolean(String key, boolean def)
    {
        throw new RuntimeException("Stub!");
    }

    public void putFloat(String key, float value)
    {
        throw new RuntimeException("Stub!");
    }

    public float getFloat(String key, float def)
    {
        throw new RuntimeException("Stub!");
    }

    public void putDouble(String key, double value)
    {
        throw new RuntimeException("Stub!");
    }

    public double getDouble(String key, double def)
    {
        throw new RuntimeException("Stub!");
    }

    public void putByteArray(String key, byte value[])
    {
        throw new RuntimeException("Stub!");
    }

    public byte[] getByteArray(String key, byte def[])
    {
        throw new RuntimeException("Stub!");
    }

    public String[] keys()
        throws BackingStoreException
    {
        throw new RuntimeException("Stub!");
    }

    public String[] childrenNames()
        throws BackingStoreException
    {
        throw new RuntimeException("Stub!");
    }

    protected final AbstractPreferences[] cachedChildren()
    {
        throw new RuntimeException("Stub!");
    }

    public Preferences parent()
    {
        throw new RuntimeException("Stub!");
    }

    public Preferences node(String path)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean nodeExists(String path)
        throws BackingStoreException
    {
        throw new RuntimeException("Stub!");
    }

    public void removeNode()
        throws BackingStoreException
    {
        throw new RuntimeException("Stub!");
    }

    public String name()
    {
        throw new RuntimeException("Stub!");
    }

    public String absolutePath()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isUserNode()
    {
        throw new RuntimeException("Stub!");
    }

    public void addPreferenceChangeListener(PreferenceChangeListener pcl)
    {
        throw new RuntimeException("Stub!");
    }

    public void removePreferenceChangeListener(PreferenceChangeListener pcl)
    {
        throw new RuntimeException("Stub!");
    }

    public void addNodeChangeListener(NodeChangeListener ncl)
    {
        throw new RuntimeException("Stub!");
    }

    public void removeNodeChangeListener(NodeChangeListener ncl)
    {
        throw new RuntimeException("Stub!");
    }

    protected abstract void putSpi(String s, String s1);

    protected abstract String getSpi(String s);

    protected abstract void removeSpi(String s);

    protected abstract void removeNodeSpi()
        throws BackingStoreException;

    protected abstract String[] keysSpi()
        throws BackingStoreException;

    protected abstract String[] childrenNamesSpi()
        throws BackingStoreException;

    protected AbstractPreferences getChild(String nodeName)
        throws BackingStoreException
    {
        throw new RuntimeException("Stub!");
    }

    protected abstract AbstractPreferences childSpi(String s);

    public String toString()
    {
        throw new RuntimeException("Stub!");
    }

    public void sync()
        throws BackingStoreException
    {
        throw new RuntimeException("Stub!");
    }

    protected abstract void syncSpi()
        throws BackingStoreException;

    public void flush()
        throws BackingStoreException
    {
        throw new RuntimeException("Stub!");
    }

    protected abstract void flushSpi()
        throws BackingStoreException;

    protected boolean isRemoved()
    {
        throw new RuntimeException("Stub!");
    }

    public void exportNode(OutputStream os)
        throws BackingStoreException, IOException
    {
        throw new RuntimeException("Stub!");
    }

    public void exportSubtree(OutputStream os)
        throws BackingStoreException, IOException
    {
        throw new RuntimeException("Stub!");
    }

    protected final Object lock = null;
    protected boolean newNode;
}
