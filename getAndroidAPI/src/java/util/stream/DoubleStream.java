// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   DoubleStream.java

package java.util.stream;

import java.util.*;
import java.util.function.*;

// Referenced classes of package java.util.stream:
//            BaseStream, Stream, IntStream, LongStream

public interface DoubleStream
    extends BaseStream
{
    public static interface Builder
        extends DoubleConsumer
    {

        public abstract void accept(double d);

        public Builder add(double t)
        {
            throw new RuntimeException("Stub!");
        }

        public abstract DoubleStream build();
    }


    public abstract DoubleStream filter(DoublePredicate doublepredicate);

    public abstract DoubleStream map(DoubleUnaryOperator doubleunaryoperator);

    public abstract Stream mapToObj(DoubleFunction doublefunction);

    public abstract IntStream mapToInt(DoubleToIntFunction doubletointfunction);

    public abstract LongStream mapToLong(DoubleToLongFunction doubletolongfunction);

    public abstract DoubleStream flatMap(DoubleFunction doublefunction);

    public abstract DoubleStream distinct();

    public abstract DoubleStream sorted();

    public abstract DoubleStream peek(DoubleConsumer doubleconsumer);

    public abstract DoubleStream limit(long l);

    public abstract DoubleStream skip(long l);

    public abstract void forEach(DoubleConsumer doubleconsumer);

    public abstract void forEachOrdered(DoubleConsumer doubleconsumer);

    public abstract double[] toArray();

    public abstract double reduce(double d, DoubleBinaryOperator doublebinaryoperator);

    public abstract OptionalDouble reduce(DoubleBinaryOperator doublebinaryoperator);

    public abstract Object collect(Supplier supplier, ObjDoubleConsumer objdoubleconsumer, BiConsumer biconsumer);

    public abstract double sum();

    public abstract OptionalDouble min();

    public abstract OptionalDouble max();

    public abstract long count();

    public abstract OptionalDouble average();

    public abstract DoubleSummaryStatistics summaryStatistics();

    public abstract boolean anyMatch(DoublePredicate doublepredicate);

    public abstract boolean allMatch(DoublePredicate doublepredicate);

    public abstract boolean noneMatch(DoublePredicate doublepredicate);

    public abstract OptionalDouble findFirst();

    public abstract OptionalDouble findAny();

    public abstract Stream boxed();

    public abstract DoubleStream sequential();

    public abstract DoubleStream parallel();

    public abstract java.util.PrimitiveIterator.OfDouble iterator();

    public abstract java.util.Spliterator.OfDouble spliterator();

    public static Builder builder()
    {
        throw new RuntimeException("Stub!");
    }

    public static DoubleStream empty()
    {
        throw new RuntimeException("Stub!");
    }

    public static DoubleStream of(double t)
    {
        throw new RuntimeException("Stub!");
    }

    public static transient DoubleStream of(double values[])
    {
        throw new RuntimeException("Stub!");
    }

    public static DoubleStream iterate(double seed, DoubleUnaryOperator f)
    {
        throw new RuntimeException("Stub!");
    }

    public static DoubleStream generate(DoubleSupplier s)
    {
        throw new RuntimeException("Stub!");
    }

    public static DoubleStream concat(DoubleStream a, DoubleStream b)
    {
        throw new RuntimeException("Stub!");
    }

    public volatile BaseStream parallel()
    {
        return parallel();
    }

    public volatile BaseStream sequential()
    {
        return sequential();
    }

    public volatile Spliterator spliterator()
    {
        return spliterator();
    }

    public volatile Iterator iterator()
    {
        return iterator();
    }
}
