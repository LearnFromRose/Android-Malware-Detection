// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   Stream.java

package java.util.stream;

import java.util.Comparator;
import java.util.Optional;
import java.util.function.*;

// Referenced classes of package java.util.stream:
//            BaseStream, IntStream, LongStream, DoubleStream, 
//            Collector

public interface Stream
    extends BaseStream
{
    public static interface Builder
        extends Consumer
    {

        public abstract void accept(Object obj);

        public Builder add(Object t)
        {
            throw new RuntimeException("Stub!");
        }

        public abstract Stream build();
    }


    public abstract Stream filter(Predicate predicate);

    public abstract Stream map(Function function);

    public abstract IntStream mapToInt(ToIntFunction tointfunction);

    public abstract LongStream mapToLong(ToLongFunction tolongfunction);

    public abstract DoubleStream mapToDouble(ToDoubleFunction todoublefunction);

    public abstract Stream flatMap(Function function);

    public abstract IntStream flatMapToInt(Function function);

    public abstract LongStream flatMapToLong(Function function);

    public abstract DoubleStream flatMapToDouble(Function function);

    public abstract Stream distinct();

    public abstract Stream sorted();

    public abstract Stream sorted(Comparator comparator);

    public abstract Stream peek(Consumer consumer);

    public abstract Stream limit(long l);

    public abstract Stream skip(long l);

    public abstract void forEach(Consumer consumer);

    public abstract void forEachOrdered(Consumer consumer);

    public abstract Object[] toArray();

    public abstract Object[] toArray(IntFunction intfunction);

    public abstract Object reduce(Object obj, BinaryOperator binaryoperator);

    public abstract Optional reduce(BinaryOperator binaryoperator);

    public abstract Object reduce(Object obj, BiFunction bifunction, BinaryOperator binaryoperator);

    public abstract Object collect(Supplier supplier, BiConsumer biconsumer, BiConsumer biconsumer1);

    public abstract Object collect(Collector collector);

    public abstract Optional min(Comparator comparator);

    public abstract Optional max(Comparator comparator);

    public abstract long count();

    public abstract boolean anyMatch(Predicate predicate);

    public abstract boolean allMatch(Predicate predicate);

    public abstract boolean noneMatch(Predicate predicate);

    public abstract Optional findFirst();

    public abstract Optional findAny();

    public static Builder builder()
    {
        throw new RuntimeException("Stub!");
    }

    public static Stream empty()
    {
        throw new RuntimeException("Stub!");
    }

    public static Stream of(Object t)
    {
        throw new RuntimeException("Stub!");
    }

    public static transient Stream of(Object values[])
    {
        throw new RuntimeException("Stub!");
    }

    public static Stream iterate(Object seed, UnaryOperator f)
    {
        throw new RuntimeException("Stub!");
    }

    public static Stream generate(Supplier s)
    {
        throw new RuntimeException("Stub!");
    }

    public static Stream concat(Stream a, Stream b)
    {
        throw new RuntimeException("Stub!");
    }
}
