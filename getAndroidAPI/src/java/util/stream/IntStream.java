// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   IntStream.java

package java.util.stream;

import java.util.*;
import java.util.function.*;

// Referenced classes of package java.util.stream:
//            BaseStream, Stream, LongStream, DoubleStream

public interface IntStream
    extends BaseStream
{
    public static interface Builder
        extends IntConsumer
    {

        public abstract void accept(int i);

        public Builder add(int t)
        {
            throw new RuntimeException("Stub!");
        }

        public abstract IntStream build();
    }


    public abstract IntStream filter(IntPredicate intpredicate);

    public abstract IntStream map(IntUnaryOperator intunaryoperator);

    public abstract Stream mapToObj(IntFunction intfunction);

    public abstract LongStream mapToLong(IntToLongFunction inttolongfunction);

    public abstract DoubleStream mapToDouble(IntToDoubleFunction inttodoublefunction);

    public abstract IntStream flatMap(IntFunction intfunction);

    public abstract IntStream distinct();

    public abstract IntStream sorted();

    public abstract IntStream peek(IntConsumer intconsumer);

    public abstract IntStream limit(long l);

    public abstract IntStream skip(long l);

    public abstract void forEach(IntConsumer intconsumer);

    public abstract void forEachOrdered(IntConsumer intconsumer);

    public abstract int[] toArray();

    public abstract int reduce(int i, IntBinaryOperator intbinaryoperator);

    public abstract OptionalInt reduce(IntBinaryOperator intbinaryoperator);

    public abstract Object collect(Supplier supplier, ObjIntConsumer objintconsumer, BiConsumer biconsumer);

    public abstract int sum();

    public abstract OptionalInt min();

    public abstract OptionalInt max();

    public abstract long count();

    public abstract OptionalDouble average();

    public abstract IntSummaryStatistics summaryStatistics();

    public abstract boolean anyMatch(IntPredicate intpredicate);

    public abstract boolean allMatch(IntPredicate intpredicate);

    public abstract boolean noneMatch(IntPredicate intpredicate);

    public abstract OptionalInt findFirst();

    public abstract OptionalInt findAny();

    public abstract LongStream asLongStream();

    public abstract DoubleStream asDoubleStream();

    public abstract Stream boxed();

    public abstract IntStream sequential();

    public abstract IntStream parallel();

    public abstract java.util.PrimitiveIterator.OfInt iterator();

    public abstract java.util.Spliterator.OfInt spliterator();

    public static Builder builder()
    {
        throw new RuntimeException("Stub!");
    }

    public static IntStream empty()
    {
        throw new RuntimeException("Stub!");
    }

    public static IntStream of(int t)
    {
        throw new RuntimeException("Stub!");
    }

    public static transient IntStream of(int values[])
    {
        throw new RuntimeException("Stub!");
    }

    public static IntStream iterate(int seed, IntUnaryOperator f)
    {
        throw new RuntimeException("Stub!");
    }

    public static IntStream generate(IntSupplier s)
    {
        throw new RuntimeException("Stub!");
    }

    public static IntStream range(int startInclusive, int endExclusive)
    {
        throw new RuntimeException("Stub!");
    }

    public static IntStream rangeClosed(int startInclusive, int endInclusive)
    {
        throw new RuntimeException("Stub!");
    }

    public static IntStream concat(IntStream a, IntStream b)
    {
        throw new RuntimeException("Stub!");
    }

    public volatile BaseStream parallel()
    {
        return parallel();
    }

    public volatile BaseStream sequential()
    {
        return sequential();
    }

    public volatile Spliterator spliterator()
    {
        return spliterator();
    }

    public volatile Iterator iterator()
    {
        return iterator();
    }
}
