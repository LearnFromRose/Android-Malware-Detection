// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   LongStream.java

package java.util.stream;

import java.util.*;
import java.util.function.*;

// Referenced classes of package java.util.stream:
//            BaseStream, Stream, IntStream, DoubleStream

public interface LongStream
    extends BaseStream
{
    public static interface Builder
        extends LongConsumer
    {

        public abstract void accept(long l);

        public Builder add(long t)
        {
            throw new RuntimeException("Stub!");
        }

        public abstract LongStream build();
    }


    public abstract LongStream filter(LongPredicate longpredicate);

    public abstract LongStream map(LongUnaryOperator longunaryoperator);

    public abstract Stream mapToObj(LongFunction longfunction);

    public abstract IntStream mapToInt(LongToIntFunction longtointfunction);

    public abstract DoubleStream mapToDouble(LongToDoubleFunction longtodoublefunction);

    public abstract LongStream flatMap(LongFunction longfunction);

    public abstract LongStream distinct();

    public abstract LongStream sorted();

    public abstract LongStream peek(LongConsumer longconsumer);

    public abstract LongStream limit(long l);

    public abstract LongStream skip(long l);

    public abstract void forEach(LongConsumer longconsumer);

    public abstract void forEachOrdered(LongConsumer longconsumer);

    public abstract long[] toArray();

    public abstract long reduce(long l, LongBinaryOperator longbinaryoperator);

    public abstract OptionalLong reduce(LongBinaryOperator longbinaryoperator);

    public abstract Object collect(Supplier supplier, ObjLongConsumer objlongconsumer, BiConsumer biconsumer);

    public abstract long sum();

    public abstract OptionalLong min();

    public abstract OptionalLong max();

    public abstract long count();

    public abstract OptionalDouble average();

    public abstract LongSummaryStatistics summaryStatistics();

    public abstract boolean anyMatch(LongPredicate longpredicate);

    public abstract boolean allMatch(LongPredicate longpredicate);

    public abstract boolean noneMatch(LongPredicate longpredicate);

    public abstract OptionalLong findFirst();

    public abstract OptionalLong findAny();

    public abstract DoubleStream asDoubleStream();

    public abstract Stream boxed();

    public abstract LongStream sequential();

    public abstract LongStream parallel();

    public abstract java.util.PrimitiveIterator.OfLong iterator();

    public abstract java.util.Spliterator.OfLong spliterator();

    public static Builder builder()
    {
        throw new RuntimeException("Stub!");
    }

    public static LongStream empty()
    {
        throw new RuntimeException("Stub!");
    }

    public static LongStream of(long t)
    {
        throw new RuntimeException("Stub!");
    }

    public static transient LongStream of(long values[])
    {
        throw new RuntimeException("Stub!");
    }

    public static LongStream iterate(long seed, LongUnaryOperator f)
    {
        throw new RuntimeException("Stub!");
    }

    public static LongStream generate(LongSupplier s)
    {
        throw new RuntimeException("Stub!");
    }

    public static LongStream range(long startInclusive, long endExclusive)
    {
        throw new RuntimeException("Stub!");
    }

    public static LongStream rangeClosed(long startInclusive, long endInclusive)
    {
        throw new RuntimeException("Stub!");
    }

    public static LongStream concat(LongStream a, LongStream b)
    {
        throw new RuntimeException("Stub!");
    }

    public volatile BaseStream parallel()
    {
        return parallel();
    }

    public volatile BaseStream sequential()
    {
        return sequential();
    }

    public volatile Spliterator spliterator()
    {
        return spliterator();
    }

    public volatile Iterator iterator()
    {
        return iterator();
    }
}
