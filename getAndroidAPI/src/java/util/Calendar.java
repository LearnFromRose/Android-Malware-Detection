// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   Calendar.java

package java.util;

import java.io.Serializable;
import java.time.Instant;

// Referenced classes of package java.util:
//            TimeZone, Locale, Date, Map, 
//            Set

public abstract class Calendar
    implements Serializable, Cloneable, Comparable
{
    public static class Builder
    {

        public Builder setInstant(long instant)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setInstant(Date instant)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder set(int field, int value)
        {
            throw new RuntimeException("Stub!");
        }

        public transient Builder setFields(int fieldValuePairs[])
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setDate(int year, int month, int dayOfMonth)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setTimeOfDay(int hourOfDay, int minute, int second)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setTimeOfDay(int hourOfDay, int minute, int second, int millis)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setWeekDate(int weekYear, int weekOfYear, int dayOfWeek)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setTimeZone(TimeZone zone)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setLenient(boolean lenient)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setCalendarType(String type)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setLocale(Locale locale)
        {
            throw new RuntimeException("Stub!");
        }

        public Builder setWeekDefinition(int firstDayOfWeek, int minimalDaysInFirstWeek)
        {
            throw new RuntimeException("Stub!");
        }

        public Calendar build()
        {
            throw new RuntimeException("Stub!");
        }

        public Builder()
        {
            throw new RuntimeException("Stub!");
        }
    }


    protected Calendar()
    {
        throw new RuntimeException("Stub!");
    }

    protected Calendar(TimeZone zone, Locale aLocale)
    {
        throw new RuntimeException("Stub!");
    }

    public static Calendar getInstance()
    {
        throw new RuntimeException("Stub!");
    }

    public static Calendar getInstance(TimeZone zone)
    {
        throw new RuntimeException("Stub!");
    }

    public static Calendar getInstance(Locale aLocale)
    {
        throw new RuntimeException("Stub!");
    }

    public static Calendar getInstance(TimeZone zone, Locale aLocale)
    {
        throw new RuntimeException("Stub!");
    }

    public static synchronized Locale[] getAvailableLocales()
    {
        throw new RuntimeException("Stub!");
    }

    protected abstract void computeTime();

    protected abstract void computeFields();

    public final Date getTime()
    {
        throw new RuntimeException("Stub!");
    }

    public final void setTime(Date date)
    {
        throw new RuntimeException("Stub!");
    }

    public long getTimeInMillis()
    {
        throw new RuntimeException("Stub!");
    }

    public void setTimeInMillis(long millis)
    {
        throw new RuntimeException("Stub!");
    }

    public int get(int field)
    {
        throw new RuntimeException("Stub!");
    }

    protected final int internalGet(int field)
    {
        throw new RuntimeException("Stub!");
    }

    public void set(int field, int value)
    {
        throw new RuntimeException("Stub!");
    }

    public final void set(int year, int month, int date)
    {
        throw new RuntimeException("Stub!");
    }

    public final void set(int year, int month, int date, int hourOfDay, int minute)
    {
        throw new RuntimeException("Stub!");
    }

    public final void set(int year, int month, int date, int hourOfDay, int minute, int second)
    {
        throw new RuntimeException("Stub!");
    }

    public final void clear()
    {
        throw new RuntimeException("Stub!");
    }

    public final void clear(int field)
    {
        throw new RuntimeException("Stub!");
    }

    public final boolean isSet(int field)
    {
        throw new RuntimeException("Stub!");
    }

    public String getDisplayName(int field, int style, Locale locale)
    {
        throw new RuntimeException("Stub!");
    }

    public Map getDisplayNames(int field, int style, Locale locale)
    {
        throw new RuntimeException("Stub!");
    }

    protected void complete()
    {
        throw new RuntimeException("Stub!");
    }

    public static Set getAvailableCalendarTypes()
    {
        throw new RuntimeException("Stub!");
    }

    public String getCalendarType()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean equals(Object obj)
    {
        throw new RuntimeException("Stub!");
    }

    public int hashCode()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean before(Object when)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean after(Object when)
    {
        throw new RuntimeException("Stub!");
    }

    public int compareTo(Calendar anotherCalendar)
    {
        throw new RuntimeException("Stub!");
    }

    public abstract void add(int i, int j);

    public abstract void roll(int i, boolean flag);

    public void roll(int field, int amount)
    {
        throw new RuntimeException("Stub!");
    }

    public void setTimeZone(TimeZone value)
    {
        throw new RuntimeException("Stub!");
    }

    public TimeZone getTimeZone()
    {
        throw new RuntimeException("Stub!");
    }

    public void setLenient(boolean lenient)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isLenient()
    {
        throw new RuntimeException("Stub!");
    }

    public void setFirstDayOfWeek(int value)
    {
        throw new RuntimeException("Stub!");
    }

    public int getFirstDayOfWeek()
    {
        throw new RuntimeException("Stub!");
    }

    public void setMinimalDaysInFirstWeek(int value)
    {
        throw new RuntimeException("Stub!");
    }

    public int getMinimalDaysInFirstWeek()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isWeekDateSupported()
    {
        throw new RuntimeException("Stub!");
    }

    public int getWeekYear()
    {
        throw new RuntimeException("Stub!");
    }

    public void setWeekDate(int weekYear, int weekOfYear, int dayOfWeek)
    {
        throw new RuntimeException("Stub!");
    }

    public int getWeeksInWeekYear()
    {
        throw new RuntimeException("Stub!");
    }

    public abstract int getMinimum(int i);

    public abstract int getMaximum(int i);

    public abstract int getGreatestMinimum(int i);

    public abstract int getLeastMaximum(int i);

    public int getActualMinimum(int field)
    {
        throw new RuntimeException("Stub!");
    }

    public int getActualMaximum(int field)
    {
        throw new RuntimeException("Stub!");
    }

    public Object clone()
    {
        throw new RuntimeException("Stub!");
    }

    public String toString()
    {
        throw new RuntimeException("Stub!");
    }

    public final Instant toInstant()
    {
        throw new RuntimeException("Stub!");
    }

    public volatile int compareTo(Object obj)
    {
        return compareTo((Calendar)obj);
    }

    public static final int ALL_STYLES = 0;
    public static final int AM = 0;
    public static final int AM_PM = 9;
    public static final int APRIL = 3;
    public static final int AUGUST = 7;
    public static final int DATE = 5;
    public static final int DAY_OF_MONTH = 5;
    public static final int DAY_OF_WEEK = 7;
    public static final int DAY_OF_WEEK_IN_MONTH = 8;
    public static final int DAY_OF_YEAR = 6;
    public static final int DECEMBER = 11;
    public static final int DST_OFFSET = 16;
    public static final int ERA = 0;
    public static final int FEBRUARY = 1;
    public static final int FIELD_COUNT = 17;
    public static final int FRIDAY = 6;
    public static final int HOUR = 10;
    public static final int HOUR_OF_DAY = 11;
    public static final int JANUARY = 0;
    public static final int JULY = 6;
    public static final int JUNE = 5;
    public static final int LONG = 2;
    public static final int LONG_FORMAT = 2;
    public static final int LONG_STANDALONE = 32770;
    public static final int MARCH = 2;
    public static final int MAY = 4;
    public static final int MILLISECOND = 14;
    public static final int MINUTE = 12;
    public static final int MONDAY = 2;
    public static final int MONTH = 2;
    public static final int NARROW_FORMAT = 4;
    public static final int NARROW_STANDALONE = 32772;
    public static final int NOVEMBER = 10;
    public static final int OCTOBER = 9;
    public static final int PM = 1;
    public static final int SATURDAY = 7;
    public static final int SECOND = 13;
    public static final int SEPTEMBER = 8;
    public static final int SHORT = 1;
    public static final int SHORT_FORMAT = 1;
    public static final int SHORT_STANDALONE = 32769;
    public static final int SUNDAY = 1;
    public static final int THURSDAY = 5;
    public static final int TUESDAY = 3;
    public static final int UNDECIMBER = 12;
    public static final int WEDNESDAY = 4;
    public static final int WEEK_OF_MONTH = 4;
    public static final int WEEK_OF_YEAR = 3;
    public static final int YEAR = 1;
    public static final int ZONE_OFFSET = 15;
    protected boolean areFieldsSet;
    protected int fields[];
    protected boolean isSet[];
    protected boolean isTimeSet;
    protected long time;
}
