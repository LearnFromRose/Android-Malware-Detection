// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   AbstractList.java

package java.util;


// Referenced classes of package java.util:
//            AbstractCollection, List, Collection, Iterator, 
//            ListIterator

public abstract class AbstractList extends AbstractCollection
    implements List
{

    protected AbstractList()
    {
        modCount = 0;
        throw new RuntimeException("Stub!");
    }

    public boolean add(Object e)
    {
        throw new RuntimeException("Stub!");
    }

    public abstract Object get(int i);

    public Object set(int index, Object element)
    {
        throw new RuntimeException("Stub!");
    }

    public void add(int index, Object element)
    {
        throw new RuntimeException("Stub!");
    }

    public Object remove(int index)
    {
        throw new RuntimeException("Stub!");
    }

    public int indexOf(Object o)
    {
        throw new RuntimeException("Stub!");
    }

    public int lastIndexOf(Object o)
    {
        throw new RuntimeException("Stub!");
    }

    public void clear()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean addAll(int index, Collection c)
    {
        throw new RuntimeException("Stub!");
    }

    public Iterator iterator()
    {
        throw new RuntimeException("Stub!");
    }

    public ListIterator listIterator()
    {
        throw new RuntimeException("Stub!");
    }

    public ListIterator listIterator(int index)
    {
        throw new RuntimeException("Stub!");
    }

    public List subList(int fromIndex, int toIndex)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean equals(Object o)
    {
        throw new RuntimeException("Stub!");
    }

    public int hashCode()
    {
        throw new RuntimeException("Stub!");
    }

    protected void removeRange(int fromIndex, int toIndex)
    {
        throw new RuntimeException("Stub!");
    }

    protected transient int modCount;
}
