// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   HashMap.java

package java.util;

import java.io.Serializable;
import java.util.function.*;

// Referenced classes of package java.util:
//            AbstractMap, Map, Set, Collection

public class HashMap extends AbstractMap
    implements Map, Cloneable, Serializable
{

    public HashMap(int initialCapacity, float loadFactor)
    {
        throw new RuntimeException("Stub!");
    }

    public HashMap(int initialCapacity)
    {
        throw new RuntimeException("Stub!");
    }

    public HashMap()
    {
        throw new RuntimeException("Stub!");
    }

    public HashMap(Map m)
    {
        throw new RuntimeException("Stub!");
    }

    public int size()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isEmpty()
    {
        throw new RuntimeException("Stub!");
    }

    public Object get(Object key)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean containsKey(Object key)
    {
        throw new RuntimeException("Stub!");
    }

    public Object put(Object key, Object value)
    {
        throw new RuntimeException("Stub!");
    }

    public void putAll(Map m)
    {
        throw new RuntimeException("Stub!");
    }

    public Object remove(Object key)
    {
        throw new RuntimeException("Stub!");
    }

    public void clear()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean containsValue(Object value)
    {
        throw new RuntimeException("Stub!");
    }

    public Set keySet()
    {
        throw new RuntimeException("Stub!");
    }

    public Collection values()
    {
        throw new RuntimeException("Stub!");
    }

    public Set entrySet()
    {
        throw new RuntimeException("Stub!");
    }

    public Object getOrDefault(Object key, Object defaultValue)
    {
        throw new RuntimeException("Stub!");
    }

    public Object putIfAbsent(Object key, Object value)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean remove(Object key, Object value)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean replace(Object key, Object oldValue, Object newValue)
    {
        throw new RuntimeException("Stub!");
    }

    public Object replace(Object key, Object value)
    {
        throw new RuntimeException("Stub!");
    }

    public Object computeIfAbsent(Object key, Function mappingFunction)
    {
        throw new RuntimeException("Stub!");
    }

    public Object computeIfPresent(Object key, BiFunction remappingFunction)
    {
        throw new RuntimeException("Stub!");
    }

    public Object compute(Object key, BiFunction remappingFunction)
    {
        throw new RuntimeException("Stub!");
    }

    public Object merge(Object key, Object value, BiFunction remappingFunction)
    {
        throw new RuntimeException("Stub!");
    }

    public void forEach(BiConsumer action)
    {
        throw new RuntimeException("Stub!");
    }

    public void replaceAll(BiFunction function)
    {
        throw new RuntimeException("Stub!");
    }

    public Object clone()
    {
        throw new RuntimeException("Stub!");
    }
}
