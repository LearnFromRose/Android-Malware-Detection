// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   Collections.java

package java.util;


// Referenced classes of package java.util:
//            List, Map, Set, Comparator, 
//            Random, Collection, SortedSet, NavigableSet, 
//            SortedMap, NavigableMap, Queue, Iterator, 
//            ListIterator, Enumeration, ArrayList, Deque

public class Collections
{

    Collections()
    {
        throw new RuntimeException("Stub!");
    }

    public static void sort(List list)
    {
        throw new RuntimeException("Stub!");
    }

    public static void sort(List list, Comparator c)
    {
        throw new RuntimeException("Stub!");
    }

    public static int binarySearch(List list, Object key)
    {
        throw new RuntimeException("Stub!");
    }

    public static int binarySearch(List list, Object key, Comparator c)
    {
        throw new RuntimeException("Stub!");
    }

    public static void reverse(List list)
    {
        throw new RuntimeException("Stub!");
    }

    public static void shuffle(List list)
    {
        throw new RuntimeException("Stub!");
    }

    public static void shuffle(List list, Random rnd)
    {
        throw new RuntimeException("Stub!");
    }

    public static void swap(List list, int i, int j)
    {
        throw new RuntimeException("Stub!");
    }

    public static void fill(List list, Object obj)
    {
        throw new RuntimeException("Stub!");
    }

    public static void copy(List dest, List src)
    {
        throw new RuntimeException("Stub!");
    }

    public static Object min(Collection coll)
    {
        throw new RuntimeException("Stub!");
    }

    public static Object min(Collection coll, Comparator comp)
    {
        throw new RuntimeException("Stub!");
    }

    public static Object max(Collection coll)
    {
        throw new RuntimeException("Stub!");
    }

    public static Object max(Collection coll, Comparator comp)
    {
        throw new RuntimeException("Stub!");
    }

    public static void rotate(List list, int distance)
    {
        throw new RuntimeException("Stub!");
    }

    public static boolean replaceAll(List list, Object oldVal, Object newVal)
    {
        throw new RuntimeException("Stub!");
    }

    public static int indexOfSubList(List source, List target)
    {
        throw new RuntimeException("Stub!");
    }

    public static int lastIndexOfSubList(List source, List target)
    {
        throw new RuntimeException("Stub!");
    }

    public static Collection unmodifiableCollection(Collection c)
    {
        throw new RuntimeException("Stub!");
    }

    public static Set unmodifiableSet(Set s)
    {
        throw new RuntimeException("Stub!");
    }

    public static SortedSet unmodifiableSortedSet(SortedSet s)
    {
        throw new RuntimeException("Stub!");
    }

    public static NavigableSet unmodifiableNavigableSet(NavigableSet s)
    {
        throw new RuntimeException("Stub!");
    }

    public static List unmodifiableList(List list)
    {
        throw new RuntimeException("Stub!");
    }

    public static Map unmodifiableMap(Map m)
    {
        throw new RuntimeException("Stub!");
    }

    public static SortedMap unmodifiableSortedMap(SortedMap m)
    {
        throw new RuntimeException("Stub!");
    }

    public static NavigableMap unmodifiableNavigableMap(NavigableMap m)
    {
        throw new RuntimeException("Stub!");
    }

    public static Collection synchronizedCollection(Collection c)
    {
        throw new RuntimeException("Stub!");
    }

    public static Set synchronizedSet(Set s)
    {
        throw new RuntimeException("Stub!");
    }

    public static SortedSet synchronizedSortedSet(SortedSet s)
    {
        throw new RuntimeException("Stub!");
    }

    public static NavigableSet synchronizedNavigableSet(NavigableSet s)
    {
        throw new RuntimeException("Stub!");
    }

    public static List synchronizedList(List list)
    {
        throw new RuntimeException("Stub!");
    }

    public static Map synchronizedMap(Map m)
    {
        throw new RuntimeException("Stub!");
    }

    public static SortedMap synchronizedSortedMap(SortedMap m)
    {
        throw new RuntimeException("Stub!");
    }

    public static NavigableMap synchronizedNavigableMap(NavigableMap m)
    {
        throw new RuntimeException("Stub!");
    }

    public static Collection checkedCollection(Collection c, Class type)
    {
        throw new RuntimeException("Stub!");
    }

    public static Queue checkedQueue(Queue queue, Class type)
    {
        throw new RuntimeException("Stub!");
    }

    public static Set checkedSet(Set s, Class type)
    {
        throw new RuntimeException("Stub!");
    }

    public static SortedSet checkedSortedSet(SortedSet s, Class type)
    {
        throw new RuntimeException("Stub!");
    }

    public static NavigableSet checkedNavigableSet(NavigableSet s, Class type)
    {
        throw new RuntimeException("Stub!");
    }

    public static List checkedList(List list, Class type)
    {
        throw new RuntimeException("Stub!");
    }

    public static Map checkedMap(Map m, Class keyType, Class valueType)
    {
        throw new RuntimeException("Stub!");
    }

    public static SortedMap checkedSortedMap(SortedMap m, Class keyType, Class valueType)
    {
        throw new RuntimeException("Stub!");
    }

    public static NavigableMap checkedNavigableMap(NavigableMap m, Class keyType, Class valueType)
    {
        throw new RuntimeException("Stub!");
    }

    public static Iterator emptyIterator()
    {
        throw new RuntimeException("Stub!");
    }

    public static ListIterator emptyListIterator()
    {
        throw new RuntimeException("Stub!");
    }

    public static Enumeration emptyEnumeration()
    {
        throw new RuntimeException("Stub!");
    }

    public static final Set emptySet()
    {
        throw new RuntimeException("Stub!");
    }

    public static SortedSet emptySortedSet()
    {
        throw new RuntimeException("Stub!");
    }

    public static NavigableSet emptyNavigableSet()
    {
        throw new RuntimeException("Stub!");
    }

    public static final List emptyList()
    {
        throw new RuntimeException("Stub!");
    }

    public static final Map emptyMap()
    {
        throw new RuntimeException("Stub!");
    }

    public static final SortedMap emptySortedMap()
    {
        throw new RuntimeException("Stub!");
    }

    public static final NavigableMap emptyNavigableMap()
    {
        throw new RuntimeException("Stub!");
    }

    public static Set singleton(Object o)
    {
        throw new RuntimeException("Stub!");
    }

    public static List singletonList(Object o)
    {
        throw new RuntimeException("Stub!");
    }

    public static Map singletonMap(Object key, Object value)
    {
        throw new RuntimeException("Stub!");
    }

    public static List nCopies(int n, Object o)
    {
        throw new RuntimeException("Stub!");
    }

    public static Comparator reverseOrder()
    {
        throw new RuntimeException("Stub!");
    }

    public static Comparator reverseOrder(Comparator cmp)
    {
        throw new RuntimeException("Stub!");
    }

    public static Enumeration enumeration(Collection c)
    {
        throw new RuntimeException("Stub!");
    }

    public static ArrayList list(Enumeration e)
    {
        throw new RuntimeException("Stub!");
    }

    public static int frequency(Collection c, Object o)
    {
        throw new RuntimeException("Stub!");
    }

    public static boolean disjoint(Collection c1, Collection c2)
    {
        throw new RuntimeException("Stub!");
    }

    public static transient boolean addAll(Collection c, Object elements[])
    {
        throw new RuntimeException("Stub!");
    }

    public static Set newSetFromMap(Map map)
    {
        throw new RuntimeException("Stub!");
    }

    public static Queue asLifoQueue(Deque deque)
    {
        throw new RuntimeException("Stub!");
    }

    public static final List EMPTY_LIST = null;
    public static final Map EMPTY_MAP = null;
    public static final Set EMPTY_SET = null;

}
