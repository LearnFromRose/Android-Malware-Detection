// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   Spliterator.java

package java.util;

import java.util.function.*;

// Referenced classes of package java.util:
//            Comparator

public interface Spliterator
{
    public static interface OfPrimitive
        extends Spliterator
    {

        public abstract OfPrimitive trySplit();

        public abstract boolean tryAdvance(Object obj);

        public void forEachRemaining(Object action)
        {
            throw new RuntimeException("Stub!");
        }

        public volatile Spliterator trySplit()
        {
            return trySplit();
        }
    }

    public static interface OfLong
        extends OfPrimitive
    {

        public abstract OfLong trySplit();

        public abstract boolean tryAdvance(LongConsumer longconsumer);

        public void forEachRemaining(LongConsumer action)
        {
            throw new RuntimeException("Stub!");
        }

        public boolean tryAdvance(Consumer action)
        {
            throw new RuntimeException("Stub!");
        }

        public void forEachRemaining(Consumer action)
        {
            throw new RuntimeException("Stub!");
        }

        public volatile void forEachRemaining(Object obj)
        {
            forEachRemaining((LongConsumer)obj);
        }

        public volatile boolean tryAdvance(Object obj)
        {
            return tryAdvance((LongConsumer)obj);
        }

        public volatile OfPrimitive trySplit()
        {
            return trySplit();
        }

        public volatile Spliterator trySplit()
        {
            return trySplit();
        }
    }

    public static interface OfInt
        extends OfPrimitive
    {

        public abstract OfInt trySplit();

        public abstract boolean tryAdvance(IntConsumer intconsumer);

        public void forEachRemaining(IntConsumer action)
        {
            throw new RuntimeException("Stub!");
        }

        public boolean tryAdvance(Consumer action)
        {
            throw new RuntimeException("Stub!");
        }

        public void forEachRemaining(Consumer action)
        {
            throw new RuntimeException("Stub!");
        }

        public volatile void forEachRemaining(Object obj)
        {
            forEachRemaining((IntConsumer)obj);
        }

        public volatile boolean tryAdvance(Object obj)
        {
            return tryAdvance((IntConsumer)obj);
        }

        public volatile OfPrimitive trySplit()
        {
            return trySplit();
        }

        public volatile Spliterator trySplit()
        {
            return trySplit();
        }
    }

    public static interface OfDouble
        extends OfPrimitive
    {

        public abstract OfDouble trySplit();

        public abstract boolean tryAdvance(DoubleConsumer doubleconsumer);

        public void forEachRemaining(DoubleConsumer action)
        {
            throw new RuntimeException("Stub!");
        }

        public boolean tryAdvance(Consumer action)
        {
            throw new RuntimeException("Stub!");
        }

        public void forEachRemaining(Consumer action)
        {
            throw new RuntimeException("Stub!");
        }

        public volatile void forEachRemaining(Object obj)
        {
            forEachRemaining((DoubleConsumer)obj);
        }

        public volatile boolean tryAdvance(Object obj)
        {
            return tryAdvance((DoubleConsumer)obj);
        }

        public volatile OfPrimitive trySplit()
        {
            return trySplit();
        }

        public volatile Spliterator trySplit()
        {
            return trySplit();
        }
    }


    public abstract boolean tryAdvance(Consumer consumer);

    public void forEachRemaining(Consumer action)
    {
        throw new RuntimeException("Stub!");
    }

    public abstract Spliterator trySplit();

    public abstract long estimateSize();

    public long getExactSizeIfKnown()
    {
        throw new RuntimeException("Stub!");
    }

    public abstract int characteristics();

    public boolean hasCharacteristics(int characteristics)
    {
        throw new RuntimeException("Stub!");
    }

    public Comparator getComparator()
    {
        throw new RuntimeException("Stub!");
    }

    public static final int CONCURRENT = 4096;
    public static final int DISTINCT = 1;
    public static final int IMMUTABLE = 1024;
    public static final int NONNULL = 256;
    public static final int ORDERED = 16;
    public static final int SIZED = 64;
    public static final int SORTED = 4;
    public static final int SUBSIZED = 16384;
}
