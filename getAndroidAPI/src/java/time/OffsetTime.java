// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   OffsetTime.java

package java.time;

import java.io.Serializable;
import java.time.format.DateTimeFormatter;
import java.time.temporal.*;

// Referenced classes of package java.time:
//            LocalTime, ZoneOffset, ZoneId, Clock, 
//            Instant, LocalDate, OffsetDateTime

public final class OffsetTime
    implements Temporal, TemporalAdjuster, Comparable, Serializable
{

    OffsetTime(LocalTime time, ZoneOffset offset)
    {
        throw new RuntimeException("Stub!");
    }

    public static OffsetTime now()
    {
        throw new RuntimeException("Stub!");
    }

    public static OffsetTime now(ZoneId zone)
    {
        throw new RuntimeException("Stub!");
    }

    public static OffsetTime now(Clock clock)
    {
        throw new RuntimeException("Stub!");
    }

    public static OffsetTime of(LocalTime time, ZoneOffset offset)
    {
        throw new RuntimeException("Stub!");
    }

    public static OffsetTime of(int hour, int minute, int second, int nanoOfSecond, ZoneOffset offset)
    {
        throw new RuntimeException("Stub!");
    }

    public static OffsetTime ofInstant(Instant instant, ZoneId zone)
    {
        throw new RuntimeException("Stub!");
    }

    public static OffsetTime from(TemporalAccessor temporal)
    {
        throw new RuntimeException("Stub!");
    }

    public static OffsetTime parse(CharSequence text)
    {
        throw new RuntimeException("Stub!");
    }

    public static OffsetTime parse(CharSequence text, DateTimeFormatter formatter)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isSupported(TemporalField field)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isSupported(TemporalUnit unit)
    {
        throw new RuntimeException("Stub!");
    }

    public ValueRange range(TemporalField field)
    {
        throw new RuntimeException("Stub!");
    }

    public int get(TemporalField field)
    {
        throw new RuntimeException("Stub!");
    }

    public long getLong(TemporalField field)
    {
        throw new RuntimeException("Stub!");
    }

    public ZoneOffset getOffset()
    {
        throw new RuntimeException("Stub!");
    }

    public OffsetTime withOffsetSameLocal(ZoneOffset offset)
    {
        throw new RuntimeException("Stub!");
    }

    public OffsetTime withOffsetSameInstant(ZoneOffset offset)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalTime toLocalTime()
    {
        throw new RuntimeException("Stub!");
    }

    public int getHour()
    {
        throw new RuntimeException("Stub!");
    }

    public int getMinute()
    {
        throw new RuntimeException("Stub!");
    }

    public int getSecond()
    {
        throw new RuntimeException("Stub!");
    }

    public int getNano()
    {
        throw new RuntimeException("Stub!");
    }

    public OffsetTime with(TemporalAdjuster adjuster)
    {
        throw new RuntimeException("Stub!");
    }

    public OffsetTime with(TemporalField field, long newValue)
    {
        throw new RuntimeException("Stub!");
    }

    public OffsetTime withHour(int hour)
    {
        throw new RuntimeException("Stub!");
    }

    public OffsetTime withMinute(int minute)
    {
        throw new RuntimeException("Stub!");
    }

    public OffsetTime withSecond(int second)
    {
        throw new RuntimeException("Stub!");
    }

    public OffsetTime withNano(int nanoOfSecond)
    {
        throw new RuntimeException("Stub!");
    }

    public OffsetTime truncatedTo(TemporalUnit unit)
    {
        throw new RuntimeException("Stub!");
    }

    public OffsetTime plus(TemporalAmount amountToAdd)
    {
        throw new RuntimeException("Stub!");
    }

    public OffsetTime plus(long amountToAdd, TemporalUnit unit)
    {
        throw new RuntimeException("Stub!");
    }

    public OffsetTime plusHours(long hours)
    {
        throw new RuntimeException("Stub!");
    }

    public OffsetTime plusMinutes(long minutes)
    {
        throw new RuntimeException("Stub!");
    }

    public OffsetTime plusSeconds(long seconds)
    {
        throw new RuntimeException("Stub!");
    }

    public OffsetTime plusNanos(long nanos)
    {
        throw new RuntimeException("Stub!");
    }

    public OffsetTime minus(TemporalAmount amountToSubtract)
    {
        throw new RuntimeException("Stub!");
    }

    public OffsetTime minus(long amountToSubtract, TemporalUnit unit)
    {
        throw new RuntimeException("Stub!");
    }

    public OffsetTime minusHours(long hours)
    {
        throw new RuntimeException("Stub!");
    }

    public OffsetTime minusMinutes(long minutes)
    {
        throw new RuntimeException("Stub!");
    }

    public OffsetTime minusSeconds(long seconds)
    {
        throw new RuntimeException("Stub!");
    }

    public OffsetTime minusNanos(long nanos)
    {
        throw new RuntimeException("Stub!");
    }

    public Object query(TemporalQuery query)
    {
        throw new RuntimeException("Stub!");
    }

    public Temporal adjustInto(Temporal temporal)
    {
        throw new RuntimeException("Stub!");
    }

    public long until(Temporal endExclusive, TemporalUnit unit)
    {
        throw new RuntimeException("Stub!");
    }

    public String format(DateTimeFormatter formatter)
    {
        throw new RuntimeException("Stub!");
    }

    public OffsetDateTime atDate(LocalDate date)
    {
        throw new RuntimeException("Stub!");
    }

    public int compareTo(OffsetTime other)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isAfter(OffsetTime other)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isBefore(OffsetTime other)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isEqual(OffsetTime other)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean equals(Object obj)
    {
        throw new RuntimeException("Stub!");
    }

    public int hashCode()
    {
        throw new RuntimeException("Stub!");
    }

    public String toString()
    {
        throw new RuntimeException("Stub!");
    }

    public volatile Temporal minus(long l, TemporalUnit temporalunit)
    {
        return minus(l, temporalunit);
    }

    public volatile Temporal minus(TemporalAmount temporalamount)
    {
        return minus(temporalamount);
    }

    public volatile Temporal plus(long l, TemporalUnit temporalunit)
    {
        return plus(l, temporalunit);
    }

    public volatile Temporal plus(TemporalAmount temporalamount)
    {
        return plus(temporalamount);
    }

    public volatile Temporal with(TemporalField temporalfield, long l)
    {
        return with(temporalfield, l);
    }

    public volatile Temporal with(TemporalAdjuster temporaladjuster)
    {
        return with(temporaladjuster);
    }

    public volatile int compareTo(Object obj)
    {
        return compareTo((OffsetTime)obj);
    }

    public static final OffsetTime MAX = null;
    public static final OffsetTime MIN = null;

}
