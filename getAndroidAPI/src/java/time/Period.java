// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   Period.java

package java.time;

import java.io.Serializable;
import java.time.chrono.*;
import java.time.temporal.*;
import java.util.List;

// Referenced classes of package java.time:
//            LocalDate

public final class Period
    implements ChronoPeriod, Serializable
{

    Period(int years, int months, int days)
    {
        throw new RuntimeException("Stub!");
    }

    public static Period ofYears(int years)
    {
        throw new RuntimeException("Stub!");
    }

    public static Period ofMonths(int months)
    {
        throw new RuntimeException("Stub!");
    }

    public static Period ofWeeks(int weeks)
    {
        throw new RuntimeException("Stub!");
    }

    public static Period ofDays(int days)
    {
        throw new RuntimeException("Stub!");
    }

    public static Period of(int years, int months, int days)
    {
        throw new RuntimeException("Stub!");
    }

    public static Period from(TemporalAmount amount)
    {
        throw new RuntimeException("Stub!");
    }

    public static Period parse(CharSequence text)
    {
        throw new RuntimeException("Stub!");
    }

    public static Period between(LocalDate startDateInclusive, LocalDate endDateExclusive)
    {
        throw new RuntimeException("Stub!");
    }

    public long get(TemporalUnit unit)
    {
        throw new RuntimeException("Stub!");
    }

    public List getUnits()
    {
        throw new RuntimeException("Stub!");
    }

    public IsoChronology getChronology()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isZero()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isNegative()
    {
        throw new RuntimeException("Stub!");
    }

    public int getYears()
    {
        throw new RuntimeException("Stub!");
    }

    public int getMonths()
    {
        throw new RuntimeException("Stub!");
    }

    public int getDays()
    {
        throw new RuntimeException("Stub!");
    }

    public Period withYears(int years)
    {
        throw new RuntimeException("Stub!");
    }

    public Period withMonths(int months)
    {
        throw new RuntimeException("Stub!");
    }

    public Period withDays(int days)
    {
        throw new RuntimeException("Stub!");
    }

    public Period plus(TemporalAmount amountToAdd)
    {
        throw new RuntimeException("Stub!");
    }

    public Period plusYears(long yearsToAdd)
    {
        throw new RuntimeException("Stub!");
    }

    public Period plusMonths(long monthsToAdd)
    {
        throw new RuntimeException("Stub!");
    }

    public Period plusDays(long daysToAdd)
    {
        throw new RuntimeException("Stub!");
    }

    public Period minus(TemporalAmount amountToSubtract)
    {
        throw new RuntimeException("Stub!");
    }

    public Period minusYears(long yearsToSubtract)
    {
        throw new RuntimeException("Stub!");
    }

    public Period minusMonths(long monthsToSubtract)
    {
        throw new RuntimeException("Stub!");
    }

    public Period minusDays(long daysToSubtract)
    {
        throw new RuntimeException("Stub!");
    }

    public Period multipliedBy(int scalar)
    {
        throw new RuntimeException("Stub!");
    }

    public Period negated()
    {
        throw new RuntimeException("Stub!");
    }

    public Period normalized()
    {
        throw new RuntimeException("Stub!");
    }

    public long toTotalMonths()
    {
        throw new RuntimeException("Stub!");
    }

    public Temporal addTo(Temporal temporal)
    {
        throw new RuntimeException("Stub!");
    }

    public Temporal subtractFrom(Temporal temporal)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean equals(Object obj)
    {
        throw new RuntimeException("Stub!");
    }

    public int hashCode()
    {
        throw new RuntimeException("Stub!");
    }

    public String toString()
    {
        throw new RuntimeException("Stub!");
    }

    public volatile ChronoPeriod normalized()
    {
        return normalized();
    }

    public volatile ChronoPeriod negated()
    {
        return negated();
    }

    public volatile ChronoPeriod multipliedBy(int i)
    {
        return multipliedBy(i);
    }

    public volatile ChronoPeriod minus(TemporalAmount temporalamount)
    {
        return minus(temporalamount);
    }

    public volatile ChronoPeriod plus(TemporalAmount temporalamount)
    {
        return plus(temporalamount);
    }

    public volatile Chronology getChronology()
    {
        return getChronology();
    }

    public static final Period ZERO = null;

}
