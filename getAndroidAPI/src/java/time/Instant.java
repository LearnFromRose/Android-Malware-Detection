// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   Instant.java

package java.time;

import java.io.Serializable;
import java.time.temporal.*;

// Referenced classes of package java.time:
//            Clock, ZoneOffset, OffsetDateTime, ZoneId, 
//            ZonedDateTime

public final class Instant
    implements Temporal, TemporalAdjuster, Comparable, Serializable
{

    Instant(long epochSecond, int nanos)
    {
        throw new RuntimeException("Stub!");
    }

    public static Instant now()
    {
        throw new RuntimeException("Stub!");
    }

    public static Instant now(Clock clock)
    {
        throw new RuntimeException("Stub!");
    }

    public static Instant ofEpochSecond(long epochSecond)
    {
        throw new RuntimeException("Stub!");
    }

    public static Instant ofEpochSecond(long epochSecond, long nanoAdjustment)
    {
        throw new RuntimeException("Stub!");
    }

    public static Instant ofEpochMilli(long epochMilli)
    {
        throw new RuntimeException("Stub!");
    }

    public static Instant from(TemporalAccessor temporal)
    {
        throw new RuntimeException("Stub!");
    }

    public static Instant parse(CharSequence text)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isSupported(TemporalField field)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isSupported(TemporalUnit unit)
    {
        throw new RuntimeException("Stub!");
    }

    public ValueRange range(TemporalField field)
    {
        throw new RuntimeException("Stub!");
    }

    public int get(TemporalField field)
    {
        throw new RuntimeException("Stub!");
    }

    public long getLong(TemporalField field)
    {
        throw new RuntimeException("Stub!");
    }

    public long getEpochSecond()
    {
        throw new RuntimeException("Stub!");
    }

    public int getNano()
    {
        throw new RuntimeException("Stub!");
    }

    public Instant with(TemporalAdjuster adjuster)
    {
        throw new RuntimeException("Stub!");
    }

    public Instant with(TemporalField field, long newValue)
    {
        throw new RuntimeException("Stub!");
    }

    public Instant truncatedTo(TemporalUnit unit)
    {
        throw new RuntimeException("Stub!");
    }

    public Instant plus(TemporalAmount amountToAdd)
    {
        throw new RuntimeException("Stub!");
    }

    public Instant plus(long amountToAdd, TemporalUnit unit)
    {
        throw new RuntimeException("Stub!");
    }

    public Instant plusSeconds(long secondsToAdd)
    {
        throw new RuntimeException("Stub!");
    }

    public Instant plusMillis(long millisToAdd)
    {
        throw new RuntimeException("Stub!");
    }

    public Instant plusNanos(long nanosToAdd)
    {
        throw new RuntimeException("Stub!");
    }

    public Instant minus(TemporalAmount amountToSubtract)
    {
        throw new RuntimeException("Stub!");
    }

    public Instant minus(long amountToSubtract, TemporalUnit unit)
    {
        throw new RuntimeException("Stub!");
    }

    public Instant minusSeconds(long secondsToSubtract)
    {
        throw new RuntimeException("Stub!");
    }

    public Instant minusMillis(long millisToSubtract)
    {
        throw new RuntimeException("Stub!");
    }

    public Instant minusNanos(long nanosToSubtract)
    {
        throw new RuntimeException("Stub!");
    }

    public Object query(TemporalQuery query)
    {
        throw new RuntimeException("Stub!");
    }

    public Temporal adjustInto(Temporal temporal)
    {
        throw new RuntimeException("Stub!");
    }

    public long until(Temporal endExclusive, TemporalUnit unit)
    {
        throw new RuntimeException("Stub!");
    }

    public OffsetDateTime atOffset(ZoneOffset offset)
    {
        throw new RuntimeException("Stub!");
    }

    public ZonedDateTime atZone(ZoneId zone)
    {
        throw new RuntimeException("Stub!");
    }

    public long toEpochMilli()
    {
        throw new RuntimeException("Stub!");
    }

    public int compareTo(Instant otherInstant)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isAfter(Instant otherInstant)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isBefore(Instant otherInstant)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean equals(Object otherInstant)
    {
        throw new RuntimeException("Stub!");
    }

    public int hashCode()
    {
        throw new RuntimeException("Stub!");
    }

    public String toString()
    {
        throw new RuntimeException("Stub!");
    }

    public volatile Temporal minus(long l, TemporalUnit temporalunit)
    {
        return minus(l, temporalunit);
    }

    public volatile Temporal minus(TemporalAmount temporalamount)
    {
        return minus(temporalamount);
    }

    public volatile Temporal plus(long l, TemporalUnit temporalunit)
    {
        return plus(l, temporalunit);
    }

    public volatile Temporal plus(TemporalAmount temporalamount)
    {
        return plus(temporalamount);
    }

    public volatile Temporal with(TemporalField temporalfield, long l)
    {
        return with(temporalfield, l);
    }

    public volatile Temporal with(TemporalAdjuster temporaladjuster)
    {
        return with(temporaladjuster);
    }

    public volatile int compareTo(Object obj)
    {
        return compareTo((Instant)obj);
    }

    public static final Instant EPOCH = null;
    public static final Instant MAX = null;
    public static final Instant MIN = null;

}
