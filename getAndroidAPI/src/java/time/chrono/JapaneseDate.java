// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   JapaneseDate.java

package java.time.chrono;

import java.io.Serializable;
import java.time.*;
import java.time.temporal.*;

// Referenced classes of package java.time.chrono:
//            ChronoLocalDate, JapaneseEra, JapaneseChronology, ChronoLocalDateTime, 
//            ChronoPeriod, Era, Chronology

public final class JapaneseDate
    implements ChronoLocalDate, Temporal, TemporalAdjuster, Serializable
{

    JapaneseDate(LocalDate isoDate)
    {
        throw new RuntimeException("Stub!");
    }

    public static JapaneseDate now()
    {
        throw new RuntimeException("Stub!");
    }

    public static JapaneseDate now(ZoneId zone)
    {
        throw new RuntimeException("Stub!");
    }

    public static JapaneseDate now(Clock clock)
    {
        throw new RuntimeException("Stub!");
    }

    public static JapaneseDate of(JapaneseEra era, int yearOfEra, int month, int dayOfMonth)
    {
        throw new RuntimeException("Stub!");
    }

    public static JapaneseDate of(int prolepticYear, int month, int dayOfMonth)
    {
        throw new RuntimeException("Stub!");
    }

    public static JapaneseDate from(TemporalAccessor temporal)
    {
        throw new RuntimeException("Stub!");
    }

    public JapaneseChronology getChronology()
    {
        throw new RuntimeException("Stub!");
    }

    public JapaneseEra getEra()
    {
        throw new RuntimeException("Stub!");
    }

    public int lengthOfMonth()
    {
        throw new RuntimeException("Stub!");
    }

    public int lengthOfYear()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isSupported(TemporalField field)
    {
        throw new RuntimeException("Stub!");
    }

    public ValueRange range(TemporalField field)
    {
        throw new RuntimeException("Stub!");
    }

    public long getLong(TemporalField field)
    {
        throw new RuntimeException("Stub!");
    }

    public JapaneseDate with(TemporalField field, long newValue)
    {
        throw new RuntimeException("Stub!");
    }

    public JapaneseDate with(TemporalAdjuster adjuster)
    {
        throw new RuntimeException("Stub!");
    }

    public JapaneseDate plus(TemporalAmount amount)
    {
        throw new RuntimeException("Stub!");
    }

    public JapaneseDate minus(TemporalAmount amount)
    {
        throw new RuntimeException("Stub!");
    }

    public JapaneseDate plus(long amountToAdd, TemporalUnit unit)
    {
        throw new RuntimeException("Stub!");
    }

    public JapaneseDate minus(long amountToAdd, TemporalUnit unit)
    {
        throw new RuntimeException("Stub!");
    }

    public ChronoLocalDateTime atTime(LocalTime localTime)
    {
        throw new RuntimeException("Stub!");
    }

    public ChronoPeriod until(ChronoLocalDate endDate)
    {
        throw new RuntimeException("Stub!");
    }

    public long toEpochDay()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean equals(Object obj)
    {
        throw new RuntimeException("Stub!");
    }

    public int hashCode()
    {
        throw new RuntimeException("Stub!");
    }

    public long until(Temporal endExclusive, TemporalUnit unit)
    {
        throw new RuntimeException("Stub!");
    }

    public String toString()
    {
        throw new RuntimeException("Stub!");
    }

    public volatile ChronoLocalDate minus(long l, TemporalUnit temporalunit)
    {
        return minus(l, temporalunit);
    }

    public volatile ChronoLocalDate minus(TemporalAmount temporalamount)
    {
        return minus(temporalamount);
    }

    public volatile ChronoLocalDate plus(long l, TemporalUnit temporalunit)
    {
        return plus(l, temporalunit);
    }

    public volatile ChronoLocalDate plus(TemporalAmount temporalamount)
    {
        return plus(temporalamount);
    }

    public volatile ChronoLocalDate with(TemporalField temporalfield, long l)
    {
        return with(temporalfield, l);
    }

    public volatile ChronoLocalDate with(TemporalAdjuster temporaladjuster)
    {
        return with(temporaladjuster);
    }

    public volatile Era getEra()
    {
        return getEra();
    }

    public volatile Chronology getChronology()
    {
        return getChronology();
    }

    public volatile Temporal minus(long l, TemporalUnit temporalunit)
    {
        return minus(l, temporalunit);
    }

    public volatile Temporal minus(TemporalAmount temporalamount)
    {
        return minus(temporalamount);
    }

    public volatile Temporal plus(long l, TemporalUnit temporalunit)
    {
        return plus(l, temporalunit);
    }

    public volatile Temporal plus(TemporalAmount temporalamount)
    {
        return plus(temporalamount);
    }

    public volatile Temporal with(TemporalField temporalfield, long l)
    {
        return with(temporalfield, l);
    }

    public volatile Temporal with(TemporalAdjuster temporaladjuster)
    {
        return with(temporaladjuster);
    }
}
