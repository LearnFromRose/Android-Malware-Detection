// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   ChronoLocalDateTime.java

package java.time.chrono;

import java.time.*;
import java.time.format.DateTimeFormatter;
import java.time.temporal.*;
import java.util.Comparator;

// Referenced classes of package java.time.chrono:
//            Chronology, ChronoLocalDate, ChronoZonedDateTime

public interface ChronoLocalDateTime
    extends Temporal, TemporalAdjuster, Comparable
{

    public static Comparator timeLineOrder()
    {
        throw new RuntimeException("Stub!");
    }

    public static ChronoLocalDateTime from(TemporalAccessor temporal)
    {
        throw new RuntimeException("Stub!");
    }

    public Chronology getChronology()
    {
        throw new RuntimeException("Stub!");
    }

    public abstract ChronoLocalDate toLocalDate();

    public abstract LocalTime toLocalTime();

    public abstract boolean isSupported(TemporalField temporalfield);

    public boolean isSupported(TemporalUnit unit)
    {
        throw new RuntimeException("Stub!");
    }

    public ChronoLocalDateTime with(TemporalAdjuster adjuster)
    {
        throw new RuntimeException("Stub!");
    }

    public abstract ChronoLocalDateTime with(TemporalField temporalfield, long l);

    public ChronoLocalDateTime plus(TemporalAmount amount)
    {
        throw new RuntimeException("Stub!");
    }

    public abstract ChronoLocalDateTime plus(long l, TemporalUnit temporalunit);

    public ChronoLocalDateTime minus(TemporalAmount amount)
    {
        throw new RuntimeException("Stub!");
    }

    public ChronoLocalDateTime minus(long amountToSubtract, TemporalUnit unit)
    {
        throw new RuntimeException("Stub!");
    }

    public Object query(TemporalQuery query)
    {
        throw new RuntimeException("Stub!");
    }

    public Temporal adjustInto(Temporal temporal)
    {
        throw new RuntimeException("Stub!");
    }

    public String format(DateTimeFormatter formatter)
    {
        throw new RuntimeException("Stub!");
    }

    public abstract ChronoZonedDateTime atZone(ZoneId zoneid);

    public Instant toInstant(ZoneOffset offset)
    {
        throw new RuntimeException("Stub!");
    }

    public long toEpochSecond(ZoneOffset offset)
    {
        throw new RuntimeException("Stub!");
    }

    public int compareTo(ChronoLocalDateTime other)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isAfter(ChronoLocalDateTime other)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isBefore(ChronoLocalDateTime other)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isEqual(ChronoLocalDateTime other)
    {
        throw new RuntimeException("Stub!");
    }

    public abstract boolean equals(Object obj);

    public abstract int hashCode();

    public abstract String toString();

    public volatile Temporal minus(long l, TemporalUnit temporalunit)
    {
        return minus(l, temporalunit);
    }

    public volatile Temporal minus(TemporalAmount temporalamount)
    {
        return minus(temporalamount);
    }

    public volatile Temporal plus(long l, TemporalUnit temporalunit)
    {
        return plus(l, temporalunit);
    }

    public volatile Temporal plus(TemporalAmount temporalamount)
    {
        return plus(temporalamount);
    }

    public volatile Temporal with(TemporalField temporalfield, long l)
    {
        return with(temporalfield, l);
    }

    public volatile Temporal with(TemporalAdjuster temporaladjuster)
    {
        return with(temporaladjuster);
    }

    public volatile int compareTo(Object obj)
    {
        return compareTo((ChronoLocalDateTime)obj);
    }
}
