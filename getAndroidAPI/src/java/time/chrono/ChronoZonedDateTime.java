// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   ChronoZonedDateTime.java

package java.time.chrono;

import java.time.*;
import java.time.format.DateTimeFormatter;
import java.time.temporal.*;
import java.util.Comparator;

// Referenced classes of package java.time.chrono:
//            ChronoLocalDate, ChronoLocalDateTime, Chronology

public interface ChronoZonedDateTime
    extends Temporal, Comparable
{

    public static Comparator timeLineOrder()
    {
        throw new RuntimeException("Stub!");
    }

    public static ChronoZonedDateTime from(TemporalAccessor temporal)
    {
        throw new RuntimeException("Stub!");
    }

    public ValueRange range(TemporalField field)
    {
        throw new RuntimeException("Stub!");
    }

    public int get(TemporalField field)
    {
        throw new RuntimeException("Stub!");
    }

    public long getLong(TemporalField field)
    {
        throw new RuntimeException("Stub!");
    }

    public ChronoLocalDate toLocalDate()
    {
        throw new RuntimeException("Stub!");
    }

    public LocalTime toLocalTime()
    {
        throw new RuntimeException("Stub!");
    }

    public abstract ChronoLocalDateTime toLocalDateTime();

    public Chronology getChronology()
    {
        throw new RuntimeException("Stub!");
    }

    public abstract ZoneOffset getOffset();

    public abstract ZoneId getZone();

    public abstract ChronoZonedDateTime withEarlierOffsetAtOverlap();

    public abstract ChronoZonedDateTime withLaterOffsetAtOverlap();

    public abstract ChronoZonedDateTime withZoneSameLocal(ZoneId zoneid);

    public abstract ChronoZonedDateTime withZoneSameInstant(ZoneId zoneid);

    public abstract boolean isSupported(TemporalField temporalfield);

    public boolean isSupported(TemporalUnit unit)
    {
        throw new RuntimeException("Stub!");
    }

    public ChronoZonedDateTime with(TemporalAdjuster adjuster)
    {
        throw new RuntimeException("Stub!");
    }

    public abstract ChronoZonedDateTime with(TemporalField temporalfield, long l);

    public ChronoZonedDateTime plus(TemporalAmount amount)
    {
        throw new RuntimeException("Stub!");
    }

    public abstract ChronoZonedDateTime plus(long l, TemporalUnit temporalunit);

    public ChronoZonedDateTime minus(TemporalAmount amount)
    {
        throw new RuntimeException("Stub!");
    }

    public ChronoZonedDateTime minus(long amountToSubtract, TemporalUnit unit)
    {
        throw new RuntimeException("Stub!");
    }

    public Object query(TemporalQuery query)
    {
        throw new RuntimeException("Stub!");
    }

    public String format(DateTimeFormatter formatter)
    {
        throw new RuntimeException("Stub!");
    }

    public Instant toInstant()
    {
        throw new RuntimeException("Stub!");
    }

    public long toEpochSecond()
    {
        throw new RuntimeException("Stub!");
    }

    public int compareTo(ChronoZonedDateTime other)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isBefore(ChronoZonedDateTime other)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isAfter(ChronoZonedDateTime other)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isEqual(ChronoZonedDateTime other)
    {
        throw new RuntimeException("Stub!");
    }

    public abstract boolean equals(Object obj);

    public abstract int hashCode();

    public abstract String toString();

    public volatile Temporal minus(long l, TemporalUnit temporalunit)
    {
        return minus(l, temporalunit);
    }

    public volatile Temporal minus(TemporalAmount temporalamount)
    {
        return minus(temporalamount);
    }

    public volatile Temporal plus(long l, TemporalUnit temporalunit)
    {
        return plus(l, temporalunit);
    }

    public volatile Temporal plus(TemporalAmount temporalamount)
    {
        return plus(temporalamount);
    }

    public volatile Temporal with(TemporalField temporalfield, long l)
    {
        return with(temporalfield, l);
    }

    public volatile Temporal with(TemporalAdjuster temporaladjuster)
    {
        return with(temporaladjuster);
    }

    public volatile int compareTo(Object obj)
    {
        return compareTo((ChronoZonedDateTime)obj);
    }
}
