// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   IsoChronology.java

package java.time.chrono;

import java.io.Serializable;
import java.time.*;
import java.time.format.ResolverStyle;
import java.time.temporal.*;
import java.util.List;
import java.util.Map;

// Referenced classes of package java.time.chrono:
//            AbstractChronology, Era, IsoEra, ChronoLocalDate, 
//            ChronoPeriod, ChronoZonedDateTime, ChronoLocalDateTime

public final class IsoChronology extends AbstractChronology
    implements Serializable
{

    IsoChronology()
    {
        throw new RuntimeException("Stub!");
    }

    public String getId()
    {
        throw new RuntimeException("Stub!");
    }

    public String getCalendarType()
    {
        throw new RuntimeException("Stub!");
    }

    public LocalDate date(Era era, int yearOfEra, int month, int dayOfMonth)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalDate date(int prolepticYear, int month, int dayOfMonth)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalDate dateYearDay(Era era, int yearOfEra, int dayOfYear)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalDate dateYearDay(int prolepticYear, int dayOfYear)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalDate dateEpochDay(long epochDay)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalDate date(TemporalAccessor temporal)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalDateTime localDateTime(TemporalAccessor temporal)
    {
        throw new RuntimeException("Stub!");
    }

    public ZonedDateTime zonedDateTime(TemporalAccessor temporal)
    {
        throw new RuntimeException("Stub!");
    }

    public ZonedDateTime zonedDateTime(Instant instant, ZoneId zone)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalDate dateNow()
    {
        throw new RuntimeException("Stub!");
    }

    public LocalDate dateNow(ZoneId zone)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalDate dateNow(Clock clock)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isLeapYear(long prolepticYear)
    {
        throw new RuntimeException("Stub!");
    }

    public int prolepticYear(Era era, int yearOfEra)
    {
        throw new RuntimeException("Stub!");
    }

    public IsoEra eraOf(int eraValue)
    {
        throw new RuntimeException("Stub!");
    }

    public List eras()
    {
        throw new RuntimeException("Stub!");
    }

    public LocalDate resolveDate(Map fieldValues, ResolverStyle resolverStyle)
    {
        throw new RuntimeException("Stub!");
    }

    public ValueRange range(ChronoField field)
    {
        throw new RuntimeException("Stub!");
    }

    public Period period(int years, int months, int days)
    {
        throw new RuntimeException("Stub!");
    }

    public volatile ChronoLocalDate resolveDate(Map map, ResolverStyle resolverstyle)
    {
        return resolveDate(map, resolverstyle);
    }

    public volatile ChronoPeriod period(int i, int j, int k)
    {
        return period(i, j, k);
    }

    public volatile Era eraOf(int i)
    {
        return eraOf(i);
    }

    public volatile ChronoZonedDateTime zonedDateTime(Instant instant, ZoneId zoneid)
    {
        return zonedDateTime(instant, zoneid);
    }

    public volatile ChronoZonedDateTime zonedDateTime(TemporalAccessor temporalaccessor)
    {
        return zonedDateTime(temporalaccessor);
    }

    public volatile ChronoLocalDateTime localDateTime(TemporalAccessor temporalaccessor)
    {
        return localDateTime(temporalaccessor);
    }

    public volatile ChronoLocalDate date(TemporalAccessor temporalaccessor)
    {
        return date(temporalaccessor);
    }

    public volatile ChronoLocalDate dateNow(Clock clock)
    {
        return dateNow(clock);
    }

    public volatile ChronoLocalDate dateNow(ZoneId zoneid)
    {
        return dateNow(zoneid);
    }

    public volatile ChronoLocalDate dateNow()
    {
        return dateNow();
    }

    public volatile ChronoLocalDate dateEpochDay(long l)
    {
        return dateEpochDay(l);
    }

    public volatile ChronoLocalDate dateYearDay(int i, int j)
    {
        return dateYearDay(i, j);
    }

    public volatile ChronoLocalDate dateYearDay(Era era, int i, int j)
    {
        return dateYearDay(era, i, j);
    }

    public volatile ChronoLocalDate date(int i, int j, int k)
    {
        return date(i, j, k);
    }

    public volatile ChronoLocalDate date(Era era, int i, int j, int k)
    {
        return date(era, i, j, k);
    }

    public static final IsoChronology INSTANCE = null;

}
