// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   Chronology.java

package java.time.chrono;

import java.time.*;
import java.time.format.ResolverStyle;
import java.time.format.TextStyle;
import java.time.temporal.*;
import java.util.*;

// Referenced classes of package java.time.chrono:
//            Era, ChronoLocalDate, ChronoLocalDateTime, ChronoZonedDateTime, 
//            ChronoPeriod

public interface Chronology
    extends Comparable
{

    public static Chronology from(TemporalAccessor temporal)
    {
        throw new RuntimeException("Stub!");
    }

    public static Chronology ofLocale(Locale locale)
    {
        throw new RuntimeException("Stub!");
    }

    public static Chronology of(String id)
    {
        throw new RuntimeException("Stub!");
    }

    public static Set getAvailableChronologies()
    {
        throw new RuntimeException("Stub!");
    }

    public abstract String getId();

    public abstract String getCalendarType();

    public ChronoLocalDate date(Era era, int yearOfEra, int month, int dayOfMonth)
    {
        throw new RuntimeException("Stub!");
    }

    public abstract ChronoLocalDate date(int i, int j, int k);

    public ChronoLocalDate dateYearDay(Era era, int yearOfEra, int dayOfYear)
    {
        throw new RuntimeException("Stub!");
    }

    public abstract ChronoLocalDate dateYearDay(int i, int j);

    public abstract ChronoLocalDate dateEpochDay(long l);

    public ChronoLocalDate dateNow()
    {
        throw new RuntimeException("Stub!");
    }

    public ChronoLocalDate dateNow(ZoneId zone)
    {
        throw new RuntimeException("Stub!");
    }

    public ChronoLocalDate dateNow(Clock clock)
    {
        throw new RuntimeException("Stub!");
    }

    public abstract ChronoLocalDate date(TemporalAccessor temporalaccessor);

    public ChronoLocalDateTime localDateTime(TemporalAccessor temporal)
    {
        throw new RuntimeException("Stub!");
    }

    public ChronoZonedDateTime zonedDateTime(TemporalAccessor temporal)
    {
        throw new RuntimeException("Stub!");
    }

    public ChronoZonedDateTime zonedDateTime(Instant instant, ZoneId zone)
    {
        throw new RuntimeException("Stub!");
    }

    public abstract boolean isLeapYear(long l);

    public abstract int prolepticYear(Era era, int i);

    public abstract Era eraOf(int i);

    public abstract List eras();

    public abstract ValueRange range(ChronoField chronofield);

    public String getDisplayName(TextStyle style, Locale locale)
    {
        throw new RuntimeException("Stub!");
    }

    public abstract ChronoLocalDate resolveDate(Map map, ResolverStyle resolverstyle);

    public ChronoPeriod period(int years, int months, int days)
    {
        throw new RuntimeException("Stub!");
    }

    public abstract int compareTo(Chronology chronology);

    public abstract boolean equals(Object obj);

    public abstract int hashCode();

    public abstract String toString();

    public volatile int compareTo(Object obj)
    {
        return compareTo((Chronology)obj);
    }
}
