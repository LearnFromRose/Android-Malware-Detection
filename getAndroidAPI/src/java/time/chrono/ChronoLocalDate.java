// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   ChronoLocalDate.java

package java.time.chrono;

import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.time.temporal.*;
import java.util.Comparator;

// Referenced classes of package java.time.chrono:
//            Chronology, Era, ChronoPeriod, ChronoLocalDateTime

public interface ChronoLocalDate
    extends Temporal, TemporalAdjuster, Comparable
{

    public static Comparator timeLineOrder()
    {
        throw new RuntimeException("Stub!");
    }

    public static ChronoLocalDate from(TemporalAccessor temporal)
    {
        throw new RuntimeException("Stub!");
    }

    public abstract Chronology getChronology();

    public Era getEra()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isLeapYear()
    {
        throw new RuntimeException("Stub!");
    }

    public abstract int lengthOfMonth();

    public int lengthOfYear()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isSupported(TemporalField field)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isSupported(TemporalUnit unit)
    {
        throw new RuntimeException("Stub!");
    }

    public ChronoLocalDate with(TemporalAdjuster adjuster)
    {
        throw new RuntimeException("Stub!");
    }

    public ChronoLocalDate with(TemporalField field, long newValue)
    {
        throw new RuntimeException("Stub!");
    }

    public ChronoLocalDate plus(TemporalAmount amount)
    {
        throw new RuntimeException("Stub!");
    }

    public ChronoLocalDate plus(long amountToAdd, TemporalUnit unit)
    {
        throw new RuntimeException("Stub!");
    }

    public ChronoLocalDate minus(TemporalAmount amount)
    {
        throw new RuntimeException("Stub!");
    }

    public ChronoLocalDate minus(long amountToSubtract, TemporalUnit unit)
    {
        throw new RuntimeException("Stub!");
    }

    public Object query(TemporalQuery query)
    {
        throw new RuntimeException("Stub!");
    }

    public Temporal adjustInto(Temporal temporal)
    {
        throw new RuntimeException("Stub!");
    }

    public abstract long until(Temporal temporal, TemporalUnit temporalunit);

    public abstract ChronoPeriod until(ChronoLocalDate chronolocaldate);

    public String format(DateTimeFormatter formatter)
    {
        throw new RuntimeException("Stub!");
    }

    public ChronoLocalDateTime atTime(LocalTime localTime)
    {
        throw new RuntimeException("Stub!");
    }

    public long toEpochDay()
    {
        throw new RuntimeException("Stub!");
    }

    public int compareTo(ChronoLocalDate other)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isAfter(ChronoLocalDate other)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isBefore(ChronoLocalDate other)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isEqual(ChronoLocalDate other)
    {
        throw new RuntimeException("Stub!");
    }

    public abstract boolean equals(Object obj);

    public abstract int hashCode();

    public abstract String toString();

    public volatile Temporal minus(long l, TemporalUnit temporalunit)
    {
        return minus(l, temporalunit);
    }

    public volatile Temporal minus(TemporalAmount temporalamount)
    {
        return minus(temporalamount);
    }

    public volatile Temporal plus(long l, TemporalUnit temporalunit)
    {
        return plus(l, temporalunit);
    }

    public volatile Temporal plus(TemporalAmount temporalamount)
    {
        return plus(temporalamount);
    }

    public volatile Temporal with(TemporalField temporalfield, long l)
    {
        return with(temporalfield, l);
    }

    public volatile Temporal with(TemporalAdjuster temporaladjuster)
    {
        return with(temporaladjuster);
    }

    public volatile int compareTo(Object obj)
    {
        return compareTo((ChronoLocalDate)obj);
    }
}
