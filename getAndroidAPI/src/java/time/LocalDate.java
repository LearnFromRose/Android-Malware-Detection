// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   LocalDate.java

package java.time;

import java.io.Serializable;
import java.time.chrono.*;
import java.time.format.DateTimeFormatter;
import java.time.temporal.*;

// Referenced classes of package java.time:
//            ZoneId, Clock, Month, DayOfWeek, 
//            Period, LocalTime, LocalDateTime, OffsetTime, 
//            OffsetDateTime, ZonedDateTime

public final class LocalDate
    implements Temporal, TemporalAdjuster, ChronoLocalDate, Serializable
{

    LocalDate(int year, int month, int dayOfMonth)
    {
        throw new RuntimeException("Stub!");
    }

    public static LocalDate now()
    {
        throw new RuntimeException("Stub!");
    }

    public static LocalDate now(ZoneId zone)
    {
        throw new RuntimeException("Stub!");
    }

    public static LocalDate now(Clock clock)
    {
        throw new RuntimeException("Stub!");
    }

    public static LocalDate of(int year, Month month, int dayOfMonth)
    {
        throw new RuntimeException("Stub!");
    }

    public static LocalDate of(int year, int month, int dayOfMonth)
    {
        throw new RuntimeException("Stub!");
    }

    public static LocalDate ofYearDay(int year, int dayOfYear)
    {
        throw new RuntimeException("Stub!");
    }

    public static LocalDate ofEpochDay(long epochDay)
    {
        throw new RuntimeException("Stub!");
    }

    public static LocalDate from(TemporalAccessor temporal)
    {
        throw new RuntimeException("Stub!");
    }

    public static LocalDate parse(CharSequence text)
    {
        throw new RuntimeException("Stub!");
    }

    public static LocalDate parse(CharSequence text, DateTimeFormatter formatter)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isSupported(TemporalField field)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isSupported(TemporalUnit unit)
    {
        throw new RuntimeException("Stub!");
    }

    public ValueRange range(TemporalField field)
    {
        throw new RuntimeException("Stub!");
    }

    public int get(TemporalField field)
    {
        throw new RuntimeException("Stub!");
    }

    public long getLong(TemporalField field)
    {
        throw new RuntimeException("Stub!");
    }

    public IsoChronology getChronology()
    {
        throw new RuntimeException("Stub!");
    }

    public Era getEra()
    {
        throw new RuntimeException("Stub!");
    }

    public int getYear()
    {
        throw new RuntimeException("Stub!");
    }

    public int getMonthValue()
    {
        throw new RuntimeException("Stub!");
    }

    public Month getMonth()
    {
        throw new RuntimeException("Stub!");
    }

    public int getDayOfMonth()
    {
        throw new RuntimeException("Stub!");
    }

    public int getDayOfYear()
    {
        throw new RuntimeException("Stub!");
    }

    public DayOfWeek getDayOfWeek()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isLeapYear()
    {
        throw new RuntimeException("Stub!");
    }

    public int lengthOfMonth()
    {
        throw new RuntimeException("Stub!");
    }

    public int lengthOfYear()
    {
        throw new RuntimeException("Stub!");
    }

    public LocalDate with(TemporalAdjuster adjuster)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalDate with(TemporalField field, long newValue)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalDate withYear(int year)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalDate withMonth(int month)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalDate withDayOfMonth(int dayOfMonth)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalDate withDayOfYear(int dayOfYear)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalDate plus(TemporalAmount amountToAdd)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalDate plus(long amountToAdd, TemporalUnit unit)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalDate plusYears(long yearsToAdd)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalDate plusMonths(long monthsToAdd)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalDate plusWeeks(long weeksToAdd)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalDate plusDays(long daysToAdd)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalDate minus(TemporalAmount amountToSubtract)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalDate minus(long amountToSubtract, TemporalUnit unit)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalDate minusYears(long yearsToSubtract)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalDate minusMonths(long monthsToSubtract)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalDate minusWeeks(long weeksToSubtract)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalDate minusDays(long daysToSubtract)
    {
        throw new RuntimeException("Stub!");
    }

    public Object query(TemporalQuery query)
    {
        throw new RuntimeException("Stub!");
    }

    public Temporal adjustInto(Temporal temporal)
    {
        throw new RuntimeException("Stub!");
    }

    public long until(Temporal endExclusive, TemporalUnit unit)
    {
        throw new RuntimeException("Stub!");
    }

    public Period until(ChronoLocalDate endDateExclusive)
    {
        throw new RuntimeException("Stub!");
    }

    public String format(DateTimeFormatter formatter)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalDateTime atTime(LocalTime time)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalDateTime atTime(int hour, int minute)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalDateTime atTime(int hour, int minute, int second)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalDateTime atTime(int hour, int minute, int second, int nanoOfSecond)
    {
        throw new RuntimeException("Stub!");
    }

    public OffsetDateTime atTime(OffsetTime time)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalDateTime atStartOfDay()
    {
        throw new RuntimeException("Stub!");
    }

    public ZonedDateTime atStartOfDay(ZoneId zone)
    {
        throw new RuntimeException("Stub!");
    }

    public long toEpochDay()
    {
        throw new RuntimeException("Stub!");
    }

    public int compareTo(ChronoLocalDate other)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isAfter(ChronoLocalDate other)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isBefore(ChronoLocalDate other)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isEqual(ChronoLocalDate other)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean equals(Object obj)
    {
        throw new RuntimeException("Stub!");
    }

    public int hashCode()
    {
        throw new RuntimeException("Stub!");
    }

    public String toString()
    {
        throw new RuntimeException("Stub!");
    }

    public volatile Temporal minus(long l, TemporalUnit temporalunit)
    {
        return minus(l, temporalunit);
    }

    public volatile Temporal minus(TemporalAmount temporalamount)
    {
        return minus(temporalamount);
    }

    public volatile Temporal plus(long l, TemporalUnit temporalunit)
    {
        return plus(l, temporalunit);
    }

    public volatile Temporal plus(TemporalAmount temporalamount)
    {
        return plus(temporalamount);
    }

    public volatile Temporal with(TemporalField temporalfield, long l)
    {
        return with(temporalfield, l);
    }

    public volatile Temporal with(TemporalAdjuster temporaladjuster)
    {
        return with(temporaladjuster);
    }

    public volatile ChronoLocalDateTime atTime(LocalTime localtime)
    {
        return atTime(localtime);
    }

    public volatile ChronoPeriod until(ChronoLocalDate chronolocaldate)
    {
        return until(chronolocaldate);
    }

    public volatile ChronoLocalDate minus(long l, TemporalUnit temporalunit)
    {
        return minus(l, temporalunit);
    }

    public volatile ChronoLocalDate minus(TemporalAmount temporalamount)
    {
        return minus(temporalamount);
    }

    public volatile ChronoLocalDate plus(long l, TemporalUnit temporalunit)
    {
        return plus(l, temporalunit);
    }

    public volatile ChronoLocalDate plus(TemporalAmount temporalamount)
    {
        return plus(temporalamount);
    }

    public volatile ChronoLocalDate with(TemporalField temporalfield, long l)
    {
        return with(temporalfield, l);
    }

    public volatile ChronoLocalDate with(TemporalAdjuster temporaladjuster)
    {
        return with(temporaladjuster);
    }

    public volatile Chronology getChronology()
    {
        return getChronology();
    }

    public volatile int compareTo(Object obj)
    {
        return compareTo((ChronoLocalDate)obj);
    }

    public static final LocalDate MAX = null;
    public static final LocalDate MIN = null;

}
