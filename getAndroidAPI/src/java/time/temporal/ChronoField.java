// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   ChronoField.java

package java.time.temporal;

import java.util.Locale;

// Referenced classes of package java.time.temporal:
//            TemporalField, TemporalUnit, ValueRange, TemporalAccessor, 
//            Temporal

public final class ChronoField extends Enum
    implements TemporalField
{

    public static ChronoField[] values()
    {
        return (ChronoField[])$VALUES.clone();
    }

    public static ChronoField valueOf(String name)
    {
        return (ChronoField)Enum.valueOf(java/time/temporal/ChronoField, name);
    }

    private ChronoField(String s, int i)
    {
        super(s, i);
    }

    public String getDisplayName(Locale locale)
    {
        throw new RuntimeException("Stub!");
    }

    public TemporalUnit getBaseUnit()
    {
        throw new RuntimeException("Stub!");
    }

    public TemporalUnit getRangeUnit()
    {
        throw new RuntimeException("Stub!");
    }

    public ValueRange range()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isDateBased()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isTimeBased()
    {
        throw new RuntimeException("Stub!");
    }

    public long checkValidValue(long value)
    {
        throw new RuntimeException("Stub!");
    }

    public int checkValidIntValue(long value)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isSupportedBy(TemporalAccessor temporal)
    {
        throw new RuntimeException("Stub!");
    }

    public ValueRange rangeRefinedBy(TemporalAccessor temporal)
    {
        throw new RuntimeException("Stub!");
    }

    public long getFrom(TemporalAccessor temporal)
    {
        throw new RuntimeException("Stub!");
    }

    public Temporal adjustInto(Temporal temporal, long newValue)
    {
        throw new RuntimeException("Stub!");
    }

    public String toString()
    {
        throw new RuntimeException("Stub!");
    }

    public static final ChronoField NANO_OF_SECOND;
    public static final ChronoField NANO_OF_DAY;
    public static final ChronoField MICRO_OF_SECOND;
    public static final ChronoField MICRO_OF_DAY;
    public static final ChronoField MILLI_OF_SECOND;
    public static final ChronoField MILLI_OF_DAY;
    public static final ChronoField SECOND_OF_MINUTE;
    public static final ChronoField SECOND_OF_DAY;
    public static final ChronoField MINUTE_OF_HOUR;
    public static final ChronoField MINUTE_OF_DAY;
    public static final ChronoField HOUR_OF_AMPM;
    public static final ChronoField CLOCK_HOUR_OF_AMPM;
    public static final ChronoField HOUR_OF_DAY;
    public static final ChronoField CLOCK_HOUR_OF_DAY;
    public static final ChronoField AMPM_OF_DAY;
    public static final ChronoField DAY_OF_WEEK;
    public static final ChronoField ALIGNED_DAY_OF_WEEK_IN_MONTH;
    public static final ChronoField ALIGNED_DAY_OF_WEEK_IN_YEAR;
    public static final ChronoField DAY_OF_MONTH;
    public static final ChronoField DAY_OF_YEAR;
    public static final ChronoField EPOCH_DAY;
    public static final ChronoField ALIGNED_WEEK_OF_MONTH;
    public static final ChronoField ALIGNED_WEEK_OF_YEAR;
    public static final ChronoField MONTH_OF_YEAR;
    public static final ChronoField PROLEPTIC_MONTH;
    public static final ChronoField YEAR_OF_ERA;
    public static final ChronoField YEAR;
    public static final ChronoField ERA;
    public static final ChronoField INSTANT_SECONDS;
    public static final ChronoField OFFSET_SECONDS;
    private static final ChronoField $VALUES[];

    static 
    {
        NANO_OF_SECOND = new ChronoField("NANO_OF_SECOND", 0);
        NANO_OF_DAY = new ChronoField("NANO_OF_DAY", 1);
        MICRO_OF_SECOND = new ChronoField("MICRO_OF_SECOND", 2);
        MICRO_OF_DAY = new ChronoField("MICRO_OF_DAY", 3);
        MILLI_OF_SECOND = new ChronoField("MILLI_OF_SECOND", 4);
        MILLI_OF_DAY = new ChronoField("MILLI_OF_DAY", 5);
        SECOND_OF_MINUTE = new ChronoField("SECOND_OF_MINUTE", 6);
        SECOND_OF_DAY = new ChronoField("SECOND_OF_DAY", 7);
        MINUTE_OF_HOUR = new ChronoField("MINUTE_OF_HOUR", 8);
        MINUTE_OF_DAY = new ChronoField("MINUTE_OF_DAY", 9);
        HOUR_OF_AMPM = new ChronoField("HOUR_OF_AMPM", 10);
        CLOCK_HOUR_OF_AMPM = new ChronoField("CLOCK_HOUR_OF_AMPM", 11);
        HOUR_OF_DAY = new ChronoField("HOUR_OF_DAY", 12);
        CLOCK_HOUR_OF_DAY = new ChronoField("CLOCK_HOUR_OF_DAY", 13);
        AMPM_OF_DAY = new ChronoField("AMPM_OF_DAY", 14);
        DAY_OF_WEEK = new ChronoField("DAY_OF_WEEK", 15);
        ALIGNED_DAY_OF_WEEK_IN_MONTH = new ChronoField("ALIGNED_DAY_OF_WEEK_IN_MONTH", 16);
        ALIGNED_DAY_OF_WEEK_IN_YEAR = new ChronoField("ALIGNED_DAY_OF_WEEK_IN_YEAR", 17);
        DAY_OF_MONTH = new ChronoField("DAY_OF_MONTH", 18);
        DAY_OF_YEAR = new ChronoField("DAY_OF_YEAR", 19);
        EPOCH_DAY = new ChronoField("EPOCH_DAY", 20);
        ALIGNED_WEEK_OF_MONTH = new ChronoField("ALIGNED_WEEK_OF_MONTH", 21);
        ALIGNED_WEEK_OF_YEAR = new ChronoField("ALIGNED_WEEK_OF_YEAR", 22);
        MONTH_OF_YEAR = new ChronoField("MONTH_OF_YEAR", 23);
        PROLEPTIC_MONTH = new ChronoField("PROLEPTIC_MONTH", 24);
        YEAR_OF_ERA = new ChronoField("YEAR_OF_ERA", 25);
        YEAR = new ChronoField("YEAR", 26);
        ERA = new ChronoField("ERA", 27);
        INSTANT_SECONDS = new ChronoField("INSTANT_SECONDS", 28);
        OFFSET_SECONDS = new ChronoField("OFFSET_SECONDS", 29);
        $VALUES = (new ChronoField[] {
            NANO_OF_SECOND, NANO_OF_DAY, MICRO_OF_SECOND, MICRO_OF_DAY, MILLI_OF_SECOND, MILLI_OF_DAY, SECOND_OF_MINUTE, SECOND_OF_DAY, MINUTE_OF_HOUR, MINUTE_OF_DAY, 
            HOUR_OF_AMPM, CLOCK_HOUR_OF_AMPM, HOUR_OF_DAY, CLOCK_HOUR_OF_DAY, AMPM_OF_DAY, DAY_OF_WEEK, ALIGNED_DAY_OF_WEEK_IN_MONTH, ALIGNED_DAY_OF_WEEK_IN_YEAR, DAY_OF_MONTH, DAY_OF_YEAR, 
            EPOCH_DAY, ALIGNED_WEEK_OF_MONTH, ALIGNED_WEEK_OF_YEAR, MONTH_OF_YEAR, PROLEPTIC_MONTH, YEAR_OF_ERA, YEAR, ERA, INSTANT_SECONDS, OFFSET_SECONDS
        });
    }
}
