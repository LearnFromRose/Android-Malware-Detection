// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   LocalDateTime.java

package java.time;

import java.io.Serializable;
import java.time.chrono.*;
import java.time.format.DateTimeFormatter;
import java.time.temporal.*;

// Referenced classes of package java.time:
//            LocalDate, LocalTime, ZoneId, Clock, 
//            Month, Instant, ZoneOffset, DayOfWeek, 
//            OffsetDateTime, ZonedDateTime

public final class LocalDateTime
    implements Temporal, TemporalAdjuster, ChronoLocalDateTime, Serializable
{

    LocalDateTime(LocalDate date, LocalTime time)
    {
        throw new RuntimeException("Stub!");
    }

    public static LocalDateTime now()
    {
        throw new RuntimeException("Stub!");
    }

    public static LocalDateTime now(ZoneId zone)
    {
        throw new RuntimeException("Stub!");
    }

    public static LocalDateTime now(Clock clock)
    {
        throw new RuntimeException("Stub!");
    }

    public static LocalDateTime of(int year, Month month, int dayOfMonth, int hour, int minute)
    {
        throw new RuntimeException("Stub!");
    }

    public static LocalDateTime of(int year, Month month, int dayOfMonth, int hour, int minute, int second)
    {
        throw new RuntimeException("Stub!");
    }

    public static LocalDateTime of(int year, Month month, int dayOfMonth, int hour, int minute, int second, int nanoOfSecond)
    {
        throw new RuntimeException("Stub!");
    }

    public static LocalDateTime of(int year, int month, int dayOfMonth, int hour, int minute)
    {
        throw new RuntimeException("Stub!");
    }

    public static LocalDateTime of(int year, int month, int dayOfMonth, int hour, int minute, int second)
    {
        throw new RuntimeException("Stub!");
    }

    public static LocalDateTime of(int year, int month, int dayOfMonth, int hour, int minute, int second, int nanoOfSecond)
    {
        throw new RuntimeException("Stub!");
    }

    public static LocalDateTime of(LocalDate date, LocalTime time)
    {
        throw new RuntimeException("Stub!");
    }

    public static LocalDateTime ofInstant(Instant instant, ZoneId zone)
    {
        throw new RuntimeException("Stub!");
    }

    public static LocalDateTime ofEpochSecond(long epochSecond, int nanoOfSecond, ZoneOffset offset)
    {
        throw new RuntimeException("Stub!");
    }

    public static LocalDateTime from(TemporalAccessor temporal)
    {
        throw new RuntimeException("Stub!");
    }

    public static LocalDateTime parse(CharSequence text)
    {
        throw new RuntimeException("Stub!");
    }

    public static LocalDateTime parse(CharSequence text, DateTimeFormatter formatter)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isSupported(TemporalField field)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isSupported(TemporalUnit unit)
    {
        throw new RuntimeException("Stub!");
    }

    public ValueRange range(TemporalField field)
    {
        throw new RuntimeException("Stub!");
    }

    public int get(TemporalField field)
    {
        throw new RuntimeException("Stub!");
    }

    public long getLong(TemporalField field)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalDate toLocalDate()
    {
        throw new RuntimeException("Stub!");
    }

    public int getYear()
    {
        throw new RuntimeException("Stub!");
    }

    public int getMonthValue()
    {
        throw new RuntimeException("Stub!");
    }

    public Month getMonth()
    {
        throw new RuntimeException("Stub!");
    }

    public int getDayOfMonth()
    {
        throw new RuntimeException("Stub!");
    }

    public int getDayOfYear()
    {
        throw new RuntimeException("Stub!");
    }

    public DayOfWeek getDayOfWeek()
    {
        throw new RuntimeException("Stub!");
    }

    public LocalTime toLocalTime()
    {
        throw new RuntimeException("Stub!");
    }

    public int getHour()
    {
        throw new RuntimeException("Stub!");
    }

    public int getMinute()
    {
        throw new RuntimeException("Stub!");
    }

    public int getSecond()
    {
        throw new RuntimeException("Stub!");
    }

    public int getNano()
    {
        throw new RuntimeException("Stub!");
    }

    public LocalDateTime with(TemporalAdjuster adjuster)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalDateTime with(TemporalField field, long newValue)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalDateTime withYear(int year)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalDateTime withMonth(int month)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalDateTime withDayOfMonth(int dayOfMonth)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalDateTime withDayOfYear(int dayOfYear)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalDateTime withHour(int hour)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalDateTime withMinute(int minute)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalDateTime withSecond(int second)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalDateTime withNano(int nanoOfSecond)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalDateTime truncatedTo(TemporalUnit unit)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalDateTime plus(TemporalAmount amountToAdd)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalDateTime plus(long amountToAdd, TemporalUnit unit)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalDateTime plusYears(long years)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalDateTime plusMonths(long months)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalDateTime plusWeeks(long weeks)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalDateTime plusDays(long days)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalDateTime plusHours(long hours)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalDateTime plusMinutes(long minutes)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalDateTime plusSeconds(long seconds)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalDateTime plusNanos(long nanos)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalDateTime minus(TemporalAmount amountToSubtract)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalDateTime minus(long amountToSubtract, TemporalUnit unit)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalDateTime minusYears(long years)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalDateTime minusMonths(long months)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalDateTime minusWeeks(long weeks)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalDateTime minusDays(long days)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalDateTime minusHours(long hours)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalDateTime minusMinutes(long minutes)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalDateTime minusSeconds(long seconds)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalDateTime minusNanos(long nanos)
    {
        throw new RuntimeException("Stub!");
    }

    public Object query(TemporalQuery query)
    {
        throw new RuntimeException("Stub!");
    }

    public Temporal adjustInto(Temporal temporal)
    {
        throw new RuntimeException("Stub!");
    }

    public long until(Temporal endExclusive, TemporalUnit unit)
    {
        throw new RuntimeException("Stub!");
    }

    public String format(DateTimeFormatter formatter)
    {
        throw new RuntimeException("Stub!");
    }

    public OffsetDateTime atOffset(ZoneOffset offset)
    {
        throw new RuntimeException("Stub!");
    }

    public ZonedDateTime atZone(ZoneId zone)
    {
        throw new RuntimeException("Stub!");
    }

    public int compareTo(ChronoLocalDateTime other)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isAfter(ChronoLocalDateTime other)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isBefore(ChronoLocalDateTime other)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isEqual(ChronoLocalDateTime other)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean equals(Object obj)
    {
        throw new RuntimeException("Stub!");
    }

    public int hashCode()
    {
        throw new RuntimeException("Stub!");
    }

    public String toString()
    {
        throw new RuntimeException("Stub!");
    }

    public volatile Temporal minus(long l, TemporalUnit temporalunit)
    {
        return minus(l, temporalunit);
    }

    public volatile Temporal minus(TemporalAmount temporalamount)
    {
        return minus(temporalamount);
    }

    public volatile Temporal plus(long l, TemporalUnit temporalunit)
    {
        return plus(l, temporalunit);
    }

    public volatile Temporal plus(TemporalAmount temporalamount)
    {
        return plus(temporalamount);
    }

    public volatile Temporal with(TemporalField temporalfield, long l)
    {
        return with(temporalfield, l);
    }

    public volatile Temporal with(TemporalAdjuster temporaladjuster)
    {
        return with(temporaladjuster);
    }

    public volatile ChronoZonedDateTime atZone(ZoneId zoneid)
    {
        return atZone(zoneid);
    }

    public volatile ChronoLocalDateTime minus(long l, TemporalUnit temporalunit)
    {
        return minus(l, temporalunit);
    }

    public volatile ChronoLocalDateTime minus(TemporalAmount temporalamount)
    {
        return minus(temporalamount);
    }

    public volatile ChronoLocalDateTime plus(long l, TemporalUnit temporalunit)
    {
        return plus(l, temporalunit);
    }

    public volatile ChronoLocalDateTime plus(TemporalAmount temporalamount)
    {
        return plus(temporalamount);
    }

    public volatile ChronoLocalDateTime with(TemporalField temporalfield, long l)
    {
        return with(temporalfield, l);
    }

    public volatile ChronoLocalDateTime with(TemporalAdjuster temporaladjuster)
    {
        return with(temporaladjuster);
    }

    public volatile ChronoLocalDate toLocalDate()
    {
        return toLocalDate();
    }

    public volatile int compareTo(Object obj)
    {
        return compareTo((ChronoLocalDateTime)obj);
    }

    public static final LocalDateTime MAX = null;
    public static final LocalDateTime MIN = null;

}
