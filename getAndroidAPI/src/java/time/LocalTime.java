// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   LocalTime.java

package java.time;

import java.io.Serializable;
import java.time.format.DateTimeFormatter;
import java.time.temporal.*;

// Referenced classes of package java.time:
//            ZoneId, Clock, LocalDate, LocalDateTime, 
//            ZoneOffset, OffsetTime

public final class LocalTime
    implements Temporal, TemporalAdjuster, Comparable, Serializable
{

    LocalTime(int hour, int minute, int second, int nanoOfSecond)
    {
        throw new RuntimeException("Stub!");
    }

    public static LocalTime now()
    {
        throw new RuntimeException("Stub!");
    }

    public static LocalTime now(ZoneId zone)
    {
        throw new RuntimeException("Stub!");
    }

    public static LocalTime now(Clock clock)
    {
        throw new RuntimeException("Stub!");
    }

    public static LocalTime of(int hour, int minute)
    {
        throw new RuntimeException("Stub!");
    }

    public static LocalTime of(int hour, int minute, int second)
    {
        throw new RuntimeException("Stub!");
    }

    public static LocalTime of(int hour, int minute, int second, int nanoOfSecond)
    {
        throw new RuntimeException("Stub!");
    }

    public static LocalTime ofSecondOfDay(long secondOfDay)
    {
        throw new RuntimeException("Stub!");
    }

    public static LocalTime ofNanoOfDay(long nanoOfDay)
    {
        throw new RuntimeException("Stub!");
    }

    public static LocalTime from(TemporalAccessor temporal)
    {
        throw new RuntimeException("Stub!");
    }

    public static LocalTime parse(CharSequence text)
    {
        throw new RuntimeException("Stub!");
    }

    public static LocalTime parse(CharSequence text, DateTimeFormatter formatter)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isSupported(TemporalField field)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isSupported(TemporalUnit unit)
    {
        throw new RuntimeException("Stub!");
    }

    public ValueRange range(TemporalField field)
    {
        throw new RuntimeException("Stub!");
    }

    public int get(TemporalField field)
    {
        throw new RuntimeException("Stub!");
    }

    public long getLong(TemporalField field)
    {
        throw new RuntimeException("Stub!");
    }

    public int getHour()
    {
        throw new RuntimeException("Stub!");
    }

    public int getMinute()
    {
        throw new RuntimeException("Stub!");
    }

    public int getSecond()
    {
        throw new RuntimeException("Stub!");
    }

    public int getNano()
    {
        throw new RuntimeException("Stub!");
    }

    public LocalTime with(TemporalAdjuster adjuster)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalTime with(TemporalField field, long newValue)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalTime withHour(int hour)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalTime withMinute(int minute)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalTime withSecond(int second)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalTime withNano(int nanoOfSecond)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalTime truncatedTo(TemporalUnit unit)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalTime plus(TemporalAmount amountToAdd)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalTime plus(long amountToAdd, TemporalUnit unit)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalTime plusHours(long hoursToAdd)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalTime plusMinutes(long minutesToAdd)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalTime plusSeconds(long secondstoAdd)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalTime plusNanos(long nanosToAdd)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalTime minus(TemporalAmount amountToSubtract)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalTime minus(long amountToSubtract, TemporalUnit unit)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalTime minusHours(long hoursToSubtract)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalTime minusMinutes(long minutesToSubtract)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalTime minusSeconds(long secondsToSubtract)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalTime minusNanos(long nanosToSubtract)
    {
        throw new RuntimeException("Stub!");
    }

    public Object query(TemporalQuery query)
    {
        throw new RuntimeException("Stub!");
    }

    public Temporal adjustInto(Temporal temporal)
    {
        throw new RuntimeException("Stub!");
    }

    public long until(Temporal endExclusive, TemporalUnit unit)
    {
        throw new RuntimeException("Stub!");
    }

    public String format(DateTimeFormatter formatter)
    {
        throw new RuntimeException("Stub!");
    }

    public LocalDateTime atDate(LocalDate date)
    {
        throw new RuntimeException("Stub!");
    }

    public OffsetTime atOffset(ZoneOffset offset)
    {
        throw new RuntimeException("Stub!");
    }

    public int toSecondOfDay()
    {
        throw new RuntimeException("Stub!");
    }

    public long toNanoOfDay()
    {
        throw new RuntimeException("Stub!");
    }

    public int compareTo(LocalTime other)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isAfter(LocalTime other)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isBefore(LocalTime other)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean equals(Object obj)
    {
        throw new RuntimeException("Stub!");
    }

    public int hashCode()
    {
        throw new RuntimeException("Stub!");
    }

    public String toString()
    {
        throw new RuntimeException("Stub!");
    }

    public volatile Temporal minus(long l, TemporalUnit temporalunit)
    {
        return minus(l, temporalunit);
    }

    public volatile Temporal minus(TemporalAmount temporalamount)
    {
        return minus(temporalamount);
    }

    public volatile Temporal plus(long l, TemporalUnit temporalunit)
    {
        return plus(l, temporalunit);
    }

    public volatile Temporal plus(TemporalAmount temporalamount)
    {
        return plus(temporalamount);
    }

    public volatile Temporal with(TemporalField temporalfield, long l)
    {
        return with(temporalfield, l);
    }

    public volatile Temporal with(TemporalAdjuster temporaladjuster)
    {
        return with(temporaladjuster);
    }

    public volatile int compareTo(Object obj)
    {
        return compareTo((LocalTime)obj);
    }

    public static final LocalTime MAX = null;
    public static final LocalTime MIDNIGHT = null;
    public static final LocalTime MIN = null;
    public static final LocalTime NOON = null;

}
