// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   ZonedDateTime.java

package java.time;

import java.io.Serializable;
import java.time.chrono.*;
import java.time.format.DateTimeFormatter;
import java.time.temporal.*;

// Referenced classes of package java.time:
//            LocalDateTime, ZoneOffset, ZoneId, Clock, 
//            LocalDate, LocalTime, Instant, Month, 
//            DayOfWeek, OffsetDateTime

public final class ZonedDateTime
    implements Temporal, ChronoZonedDateTime, Serializable
{

    ZonedDateTime(LocalDateTime dateTime, ZoneOffset offset, ZoneId zone)
    {
        throw new RuntimeException("Stub!");
    }

    public static ZonedDateTime now()
    {
        throw new RuntimeException("Stub!");
    }

    public static ZonedDateTime now(ZoneId zone)
    {
        throw new RuntimeException("Stub!");
    }

    public static ZonedDateTime now(Clock clock)
    {
        throw new RuntimeException("Stub!");
    }

    public static ZonedDateTime of(LocalDate date, LocalTime time, ZoneId zone)
    {
        throw new RuntimeException("Stub!");
    }

    public static ZonedDateTime of(LocalDateTime localDateTime, ZoneId zone)
    {
        throw new RuntimeException("Stub!");
    }

    public static ZonedDateTime of(int year, int month, int dayOfMonth, int hour, int minute, int second, int nanoOfSecond, ZoneId zone)
    {
        throw new RuntimeException("Stub!");
    }

    public static ZonedDateTime ofLocal(LocalDateTime localDateTime, ZoneId zone, ZoneOffset preferredOffset)
    {
        throw new RuntimeException("Stub!");
    }

    public static ZonedDateTime ofInstant(Instant instant, ZoneId zone)
    {
        throw new RuntimeException("Stub!");
    }

    public static ZonedDateTime ofInstant(LocalDateTime localDateTime, ZoneOffset offset, ZoneId zone)
    {
        throw new RuntimeException("Stub!");
    }

    public static ZonedDateTime ofStrict(LocalDateTime localDateTime, ZoneOffset offset, ZoneId zone)
    {
        throw new RuntimeException("Stub!");
    }

    public static ZonedDateTime from(TemporalAccessor temporal)
    {
        throw new RuntimeException("Stub!");
    }

    public static ZonedDateTime parse(CharSequence text)
    {
        throw new RuntimeException("Stub!");
    }

    public static ZonedDateTime parse(CharSequence text, DateTimeFormatter formatter)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isSupported(TemporalField field)
    {
        throw new RuntimeException("Stub!");
    }

    public boolean isSupported(TemporalUnit unit)
    {
        throw new RuntimeException("Stub!");
    }

    public ValueRange range(TemporalField field)
    {
        throw new RuntimeException("Stub!");
    }

    public int get(TemporalField field)
    {
        throw new RuntimeException("Stub!");
    }

    public long getLong(TemporalField field)
    {
        throw new RuntimeException("Stub!");
    }

    public ZoneOffset getOffset()
    {
        throw new RuntimeException("Stub!");
    }

    public ZonedDateTime withEarlierOffsetAtOverlap()
    {
        throw new RuntimeException("Stub!");
    }

    public ZonedDateTime withLaterOffsetAtOverlap()
    {
        throw new RuntimeException("Stub!");
    }

    public ZoneId getZone()
    {
        throw new RuntimeException("Stub!");
    }

    public ZonedDateTime withZoneSameLocal(ZoneId zone)
    {
        throw new RuntimeException("Stub!");
    }

    public ZonedDateTime withZoneSameInstant(ZoneId zone)
    {
        throw new RuntimeException("Stub!");
    }

    public ZonedDateTime withFixedOffsetZone()
    {
        throw new RuntimeException("Stub!");
    }

    public LocalDateTime toLocalDateTime()
    {
        throw new RuntimeException("Stub!");
    }

    public LocalDate toLocalDate()
    {
        throw new RuntimeException("Stub!");
    }

    public int getYear()
    {
        throw new RuntimeException("Stub!");
    }

    public int getMonthValue()
    {
        throw new RuntimeException("Stub!");
    }

    public Month getMonth()
    {
        throw new RuntimeException("Stub!");
    }

    public int getDayOfMonth()
    {
        throw new RuntimeException("Stub!");
    }

    public int getDayOfYear()
    {
        throw new RuntimeException("Stub!");
    }

    public DayOfWeek getDayOfWeek()
    {
        throw new RuntimeException("Stub!");
    }

    public LocalTime toLocalTime()
    {
        throw new RuntimeException("Stub!");
    }

    public int getHour()
    {
        throw new RuntimeException("Stub!");
    }

    public int getMinute()
    {
        throw new RuntimeException("Stub!");
    }

    public int getSecond()
    {
        throw new RuntimeException("Stub!");
    }

    public int getNano()
    {
        throw new RuntimeException("Stub!");
    }

    public ZonedDateTime with(TemporalAdjuster adjuster)
    {
        throw new RuntimeException("Stub!");
    }

    public ZonedDateTime with(TemporalField field, long newValue)
    {
        throw new RuntimeException("Stub!");
    }

    public ZonedDateTime withYear(int year)
    {
        throw new RuntimeException("Stub!");
    }

    public ZonedDateTime withMonth(int month)
    {
        throw new RuntimeException("Stub!");
    }

    public ZonedDateTime withDayOfMonth(int dayOfMonth)
    {
        throw new RuntimeException("Stub!");
    }

    public ZonedDateTime withDayOfYear(int dayOfYear)
    {
        throw new RuntimeException("Stub!");
    }

    public ZonedDateTime withHour(int hour)
    {
        throw new RuntimeException("Stub!");
    }

    public ZonedDateTime withMinute(int minute)
    {
        throw new RuntimeException("Stub!");
    }

    public ZonedDateTime withSecond(int second)
    {
        throw new RuntimeException("Stub!");
    }

    public ZonedDateTime withNano(int nanoOfSecond)
    {
        throw new RuntimeException("Stub!");
    }

    public ZonedDateTime truncatedTo(TemporalUnit unit)
    {
        throw new RuntimeException("Stub!");
    }

    public ZonedDateTime plus(TemporalAmount amountToAdd)
    {
        throw new RuntimeException("Stub!");
    }

    public ZonedDateTime plus(long amountToAdd, TemporalUnit unit)
    {
        throw new RuntimeException("Stub!");
    }

    public ZonedDateTime plusYears(long years)
    {
        throw new RuntimeException("Stub!");
    }

    public ZonedDateTime plusMonths(long months)
    {
        throw new RuntimeException("Stub!");
    }

    public ZonedDateTime plusWeeks(long weeks)
    {
        throw new RuntimeException("Stub!");
    }

    public ZonedDateTime plusDays(long days)
    {
        throw new RuntimeException("Stub!");
    }

    public ZonedDateTime plusHours(long hours)
    {
        throw new RuntimeException("Stub!");
    }

    public ZonedDateTime plusMinutes(long minutes)
    {
        throw new RuntimeException("Stub!");
    }

    public ZonedDateTime plusSeconds(long seconds)
    {
        throw new RuntimeException("Stub!");
    }

    public ZonedDateTime plusNanos(long nanos)
    {
        throw new RuntimeException("Stub!");
    }

    public ZonedDateTime minus(TemporalAmount amountToSubtract)
    {
        throw new RuntimeException("Stub!");
    }

    public ZonedDateTime minus(long amountToSubtract, TemporalUnit unit)
    {
        throw new RuntimeException("Stub!");
    }

    public ZonedDateTime minusYears(long years)
    {
        throw new RuntimeException("Stub!");
    }

    public ZonedDateTime minusMonths(long months)
    {
        throw new RuntimeException("Stub!");
    }

    public ZonedDateTime minusWeeks(long weeks)
    {
        throw new RuntimeException("Stub!");
    }

    public ZonedDateTime minusDays(long days)
    {
        throw new RuntimeException("Stub!");
    }

    public ZonedDateTime minusHours(long hours)
    {
        throw new RuntimeException("Stub!");
    }

    public ZonedDateTime minusMinutes(long minutes)
    {
        throw new RuntimeException("Stub!");
    }

    public ZonedDateTime minusSeconds(long seconds)
    {
        throw new RuntimeException("Stub!");
    }

    public ZonedDateTime minusNanos(long nanos)
    {
        throw new RuntimeException("Stub!");
    }

    public Object query(TemporalQuery query)
    {
        throw new RuntimeException("Stub!");
    }

    public long until(Temporal endExclusive, TemporalUnit unit)
    {
        throw new RuntimeException("Stub!");
    }

    public String format(DateTimeFormatter formatter)
    {
        throw new RuntimeException("Stub!");
    }

    public OffsetDateTime toOffsetDateTime()
    {
        throw new RuntimeException("Stub!");
    }

    public boolean equals(Object obj)
    {
        throw new RuntimeException("Stub!");
    }

    public int hashCode()
    {
        throw new RuntimeException("Stub!");
    }

    public String toString()
    {
        throw new RuntimeException("Stub!");
    }

    public volatile Temporal minus(long l, TemporalUnit temporalunit)
    {
        return minus(l, temporalunit);
    }

    public volatile Temporal minus(TemporalAmount temporalamount)
    {
        return minus(temporalamount);
    }

    public volatile Temporal plus(long l, TemporalUnit temporalunit)
    {
        return plus(l, temporalunit);
    }

    public volatile Temporal plus(TemporalAmount temporalamount)
    {
        return plus(temporalamount);
    }

    public volatile Temporal with(TemporalField temporalfield, long l)
    {
        return with(temporalfield, l);
    }

    public volatile Temporal with(TemporalAdjuster temporaladjuster)
    {
        return with(temporaladjuster);
    }

    public volatile ChronoZonedDateTime minus(long l, TemporalUnit temporalunit)
    {
        return minus(l, temporalunit);
    }

    public volatile ChronoZonedDateTime minus(TemporalAmount temporalamount)
    {
        return minus(temporalamount);
    }

    public volatile ChronoZonedDateTime plus(long l, TemporalUnit temporalunit)
    {
        return plus(l, temporalunit);
    }

    public volatile ChronoZonedDateTime plus(TemporalAmount temporalamount)
    {
        return plus(temporalamount);
    }

    public volatile ChronoZonedDateTime with(TemporalField temporalfield, long l)
    {
        return with(temporalfield, l);
    }

    public volatile ChronoZonedDateTime with(TemporalAdjuster temporaladjuster)
    {
        return with(temporaladjuster);
    }

    public volatile ChronoZonedDateTime withZoneSameInstant(ZoneId zoneid)
    {
        return withZoneSameInstant(zoneid);
    }

    public volatile ChronoZonedDateTime withZoneSameLocal(ZoneId zoneid)
    {
        return withZoneSameLocal(zoneid);
    }

    public volatile ChronoZonedDateTime withLaterOffsetAtOverlap()
    {
        return withLaterOffsetAtOverlap();
    }

    public volatile ChronoZonedDateTime withEarlierOffsetAtOverlap()
    {
        return withEarlierOffsetAtOverlap();
    }

    public volatile ChronoLocalDateTime toLocalDateTime()
    {
        return toLocalDateTime();
    }

    public volatile ChronoLocalDate toLocalDate()
    {
        return toLocalDate();
    }
}
