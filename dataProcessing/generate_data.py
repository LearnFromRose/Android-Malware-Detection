from dataProcessing.feature_extraction import get_all_matrix, get_A
import os
import numpy as np
import scipy.io as io


def store(d, first=False):
    print(d)
    X_A, X_AB, X_AP, X_AI, X_ABPB, X_APBP, X_ABIB, X_AIBI, X_APIP, X_AIPI, X_ABPIPB, X_APBIBP, X_ABIPIB, X_AIBPBI, X_AIPBPI, X_APIBIP, Y = \
        [None for i in range(17)]
    # X_A, Y = None, None
    files = []
    fs = os.listdir(d['dir'])
    for f in fs:
        files.append(os.path.join(d['dir'], f))
    if first:
        try:
            A, B, I, P = get_all_matrix(files[0])
            # A = get_A(files[0])
        except:
            print(files[0], 'error')
            return
        files = files[1:]
        X_A = np.array(A)
        X_AB = np.array(A.dot(B))
        X_AP = np.array(A.dot(P))
        X_AI = np.array(A.dot(I))
        X_ABPB = np.array(A.dot(B).dot(P).dot(B.T))
        X_APBP = np.array(A.dot(P).dot(B).dot(P.T))
        X_ABIB = np.array(A.dot(B).dot(I).dot(B.T))
        X_AIBI = np.array(A.dot(I).dot(B).dot(I.T))
        X_APIP = np.array(A.dot(P).dot(I).dot(P.T))
        X_AIPI = np.array(A.dot(I).dot(P).dot(I.T))
        X_ABPIPB = np.array(A.dot(B).dot(P).dot(I).dot(P.T).dot(B.T))
        X_APBIBP = np.array(A.dot(P).dot(B).dot(I).dot(B.T).dot(P.T))
        X_ABIPIB = np.array(A.dot(B).dot(I).dot(P).dot(I.T).dot(B.T))
        X_AIBPBI = np.array(A.dot(I).dot(B).dot(P).dot(B.T).dot(I.T))
        X_AIPBPI = np.array(A.dot(I).dot(P).dot(B).dot(P.T).dot(I.T))
        X_APIBIP = np.array(A.dot(P).dot(I).dot(B).dot(I.T).dot(P.T))
        Y = np.zeros((1, 1)) if d['benign'] else np.ones((1, 1))
    else:
        X_A = io.loadmat('A.mat')['X']
        X_AB = io.loadmat('AB.mat')['X']
        X_AP = io.loadmat('AP.mat')['X']
        X_AI = io.loadmat('AI.mat')['X']
        X_ABPB = io.loadmat('ABPB.mat')['X']
        X_APBP = io.loadmat('APBP.mat')['X']
        X_ABIB = io.loadmat('ABIB.mat')['X']
        X_AIBI = io.loadmat('AIBI.mat')['X']
        X_APIP = io.loadmat('APIP.mat')['X']
        X_AIPI = io.loadmat('AIPI.mat')['X']
        X_ABPIPB = io.loadmat('ABPIPB.mat')['X']
        X_APBIBP = io.loadmat('APBIBP.mat')['X']
        X_ABIPIB = io.loadmat('ABIPIB.mat')['X']
        X_AIBPBI = io.loadmat('AIBPBI.mat')['X']
        X_AIPBPI = io.loadmat('AIPBPI.mat')['X']
        X_APIBIP = io.loadmat('APIBIP.mat')['X']
        Y = io.loadmat('A.mat')['Y']
    for f in files:
        print(f)
        try:
            A, B, I, P = get_all_matrix(f)
            # A = get_A(f)
        except:
            print("get matrix error", f)
            continue
        X_A = np.concatenate((X_A, A), axis=0)
        X_AB = np.concatenate((X_AB, A.dot(B)), axis=0)
        X_AP = np.concatenate((X_AP, A.dot(P)), axis=0)
        X_AI = np.concatenate((X_AI, A.dot(I)), axis=0)
        X_ABPB = np.concatenate((X_ABPB, A.dot(B).dot(P).dot(B.T)), axis=0)
        X_APBP = np.concatenate((X_APBP, A.dot(P).dot(B).dot(P.T)), axis=0)
        X_ABIB = np.concatenate((X_ABIB, A.dot(B).dot(I).dot(B.T)), axis=0)
        X_AIBI = np.concatenate((X_AIBI, A.dot(I).dot(B).dot(I.T)), axis=0)
        X_APIP = np.concatenate((X_APIP, A.dot(P).dot(I).dot(P.T)), axis=0)
        X_AIPI = np.concatenate((X_AIPI, A.dot(I).dot(P).dot(I.T)), axis=0)
        X_ABPIPB = np.concatenate((X_ABPIPB, A.dot(B).dot(P).dot(I).dot(P.T).dot(B.T)), axis=0)
        X_APBIBP = np.concatenate((X_APBIBP, A.dot(P).dot(B).dot(I).dot(B.T).dot(P.T)), axis=0)
        X_ABIPIB = np.concatenate((X_ABIPIB, A.dot(B).dot(I).dot(P).dot(I.T).dot(B.T)), axis=0)
        X_AIBPBI = np.concatenate((X_AIBPBI, A.dot(I).dot(B).dot(P).dot(B.T).dot(I.T)), axis=0)
        X_AIPBPI = np.concatenate((X_AIPBPI, A.dot(I).dot(P).dot(B).dot(P.T).dot(I.T)), axis=0)
        X_APIBIP = np.concatenate((X_APIBIP, A.dot(P).dot(I).dot(B).dot(I.T).dot(P.T)), axis=0)
        Y = np.concatenate((Y, np.zeros((1, 1)) if d['benign'] else np.ones((1, 1))), axis=0)
        print(Y.shape)
    io.savemat('A', {'X': X_A, 'Y': Y})
    io.savemat('AB', {'X': X_AB, 'Y': Y})
    io.savemat('AP', {'X': X_AP, 'Y': Y})
    io.savemat('AI', {'X': X_AI, 'Y': Y})
    io.savemat('ABPB', {'X': X_ABPB, 'Y': Y})
    io.savemat('APBP', {'X': X_APBP, 'Y': Y})
    io.savemat('ABIB', {'X': X_ABIB, 'Y': Y})
    io.savemat('AIBI', {'X': X_AIBI, 'Y': Y})
    io.savemat('APIP', {'X': X_APIP, 'Y': Y})
    io.savemat('AIPI', {'X': X_AIPI, 'Y': Y})
    io.savemat('ABPIPB', {'X': X_ABPIPB, 'Y': Y})
    io.savemat('APBIBP', {'X': X_APBIBP, 'Y': Y})
    io.savemat('ABIPIB', {'X': X_ABIPIB, 'Y': Y})
    io.savemat('AIBPBI', {'X': X_AIBPBI, 'Y': Y})
    io.savemat('AIPBPI', {'X': X_AIPBPI, 'Y': Y})
    io.savemat('APIBIP', {'X': X_APIBIP, 'Y': Y})


def process_store_data():
    malware_dirs = ['..\\dataset\\benignAndStormDroid\\stormDroid1']  # 将恶意apk解析成smali文件的列表
    benign_dirs = ['..\\dataset\\benignAndStormDroid\\benign1']  # 将良性apk解析成smali文件的列表
    dirs = []
    for d in malware_dirs:
        dirs.append({'dir': d, 'benign': False})
    for d in benign_dirs:
        dirs.append({'dir': d, 'benign': True})
    store(dirs[0], True)
    dirs = dirs[1:]
    for i in dirs:
        store(i)


if __name__ == '__main__':
    process_store_data()

