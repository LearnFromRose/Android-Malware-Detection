from dataProcessing.process_smali import SmaliParser
from dataProcessing.android_api import load_api_list, Method
import numpy as np
import re


def path_format(path: str) -> str:
    """
    eg: Landroid/text/TextUtils
    1.去掉L 2.反斜线变为.
    处理后: android.text.TextUtils
    :param path:
    :return:
    """
    names = path.split('/')
    path = ''
    for n in names:
        path = path + '.' + n
    if path[-1] == ';':
        path = path[:-1]
    return path[2:]


def return_format(ret: str) -> str:
    """
    eg: [Ljava/lang/String
    处理后: java.lang.String[]
    :param ret:
    :return:
    """
    mapping = {'V': 'void', 'Z': 'boolean', 'B': 'byte', 'S': 'short', 'C': 'char', 'I': 'int', 'J': 'long',
               'F': 'float', 'D': 'double'}
    if ret[-1] == '\n':
        ret = ret[:-1]
    if len(ret) == 1:
        return mapping[ret]
    elif ret[0] == '[':
        return return_format(ret[1:]) + '[]'
    else:
        return path_format(ret)


def args_format(args: str) -> str:
    """
    eg: Ljava/lang/String;[F
    处理后: java.lang.String[],float[]
    [BII这种情况
    II这种情况
    :param args:
    :return:
    """
    p = re.compile(r'[ZBSCIJFD\[]*')
    args = args.split(';')
    res = ''
    for arg in args:
        if res.fullmatch(p, arg):  # [BII这种情况 II这种情况
            i = 0
            while i < len(arg):
                if arg[i] == '[':
                    t = '['
                    i += 1
                    while arg[i] == '[':  # 处理[[I情况
                        i += 1
                        t += '['
                    res += return_format(t + arg[i]) + ','
                else:
                    res += return_format(arg[i]) + ','
                i += 1
        elif arg[0] != 'L':  # ILjava/lang/Object这种情况
            flag = False
            i = 0
            while i < len(arg) and arg[i] != 'L':
                if arg[i] == '[':
                    flag = True
                elif flag:
                    res += return_format('[' + arg[i]) + ','
                    flag = False
                else:
                    res += return_format(arg[i]) + ','
                i += 1
            res += return_format(arg[i:]) + ','
        else:
            res += return_format(arg) + ','
    return res[:-1]


def name_format(name: str) -> str:
    """
    处理构造函数名
    :param name:
    :return:
    """
    if name == '<init>':
        return ''
    return name


def format_smali_call(methods: list) -> list:
    """
    主要是将calls转化为一整个字符串的形式
    :param methods:
    :return: [[{'src':src, 'invokeType':invokeType},...],...]
    """
    res = []
    for method in methods:
        m = []
        for call in method['calls']:
            if call['name'] != '<init>':  # 由于api中没有考虑构造函数，这里也不考虑构造函数
                m.append({
                    'src': Method((path_format(call['package']) + '.' + name_format(call['name']),
                                   args_format(call['args']), return_format(call['return']))).src(),
                    'invokeType': call['invokeType']
                })
        res.append(m)
    return res


def get_matrix_A(apis: dict, extracted_calls: list):
    """
    A[i]=1表示该应用使用了apis[j]
    :param apis: api函数列表, src:index的键值对字典
    :param extracted_calls: parse_smalis()和format_smali_call()得到，包含smali文件解析出的调用函数
    :return:
    """
    A = np.zeros((len(apis),))
    for method in extracted_calls:
        for call in method:
            if apis.get(call['src']) is not None:
                A[apis.get(call['src'])] = 1
    return A.reshape(1, -1)


def get_matrix_B(apis: dict, extracted_calls: list):
    """
    apis[i]和apis[j]是否在同一code block
    :param apis: api函数列表, src:index的键值对字典
    :param extracted_calls: parse_smalis()和format_smali_call()得到，包含smali文件解析出的调用函数
    :param calls_map:
    :return:
    """
    B = np.zeros((len(apis), len(apis)))
    # apis = {apis[i]: i for i in range(len(apis))}  # key-value获取对应api的序号
    for method in extracted_calls:
        group = []
        for call in method:
            if apis.get(call['src']) is not None:
                group.append(apis.get(call['src']))
        for i in range(len(group)):
            for j in range(len(group)):
                B[i][j] = 1
    return B


def get_matrix_P(apis: list):
    """
    apis[i]和apis[j]是否在同一package
    :return:
    """
    P = np.zeros((len(apis), len(apis)))
    for i in range(len(apis)):
        for j in range(len(apis)):
            if apis[i]['to_class'] == apis[j]['to_class']:
                P[i][j] = P[j][i] = 1
    return P


def get_matrix_I(apis: dict, extracted_calls: list):
    """
    apis[i]和apis[j]是否使用同一种调用方法
    :return:
    """
    I = np.zeros((len(apis), len(apis)))
    calls = []
    for method in extracted_calls:
        for call in method:
            calls.append(call)
    for i in range(len(calls)):
        for j in range(i, len(calls)):
            if apis.get(calls[i]['src']) is not None and apis.get(calls[j]['src']) is not None \
                    and calls[i]['invokeType'] == calls[j]['invokeType']:
                I[apis.get(calls[i]['src'])][apis.get(calls[j]['src'])] = 1
    return I


def get_all_matrix(root: str):
    """
    提取一个smali文件夹中的A B I P矩阵
    :param root: str,路径路径
    :return: A(1,m) B(m,m) I(m,m) P(m,m)    (m为api数量)
    """
    apis, apis_src = load_api_list()
    res = SmaliParser(root).get_results()
    ms = format_smali_call(res)
    map = {}
    t = []
    index = 0
    for i in range(len(apis_src)):  # 去重
        if map.get(apis_src[i]) is None:
            map[apis_src[i]] = index
            t.append(apis[i])
            index += 1
    A = get_matrix_A(map, ms)
    B = get_matrix_B(map, ms)
    I = get_matrix_I(map, ms)
    P = get_matrix_P(t)
    return A, B, I, P


def get_A(root: str):
    apis, apis_src = load_api_list()
    res = SmaliParser(root).get_results()
    ms = format_smali_call(res)
    map = {}
    index = 0
    for i in range(len(apis_src)):  # 去重
        if map.get(apis_src[i]) is None:
            map[apis_src[i]] = index
            index += 1
    A = get_matrix_A(map, ms)
    return A


if __name__ == "__main__":
    pass
    A = get_A('E:\\apkdataset\malware1\\0c67d0919e574a6876c73118260368ee')
    # print(args_format("Lcom/google/zxing/common/BitArray;[II[[I"))
    # apis, apis_src = load_api_list()
    # res = SmaliParser('E:\\apktooltest\\3\\smali').get_results()
    # ms = format_smali_call(res)
    # map = {}
    # t = []
    # index = 0
    # for i in range(len(apis_src)):  # 去重
    #     if map.get(apis_src[i]) is None:
    #         map[apis_src[i]] = index
    #         t.append(apis[i])
    #         index += 1
    # A = get_matrix_A(map, ms)
    # B = get_matrix_B(map, ms)
    # I = get_matrix_I(map, ms)
    # P = get_matrix_P(t)
    # print(A.shape, B.shape, I.shape, P.shape)
