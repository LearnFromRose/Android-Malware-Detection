import re


class Method:
    """
    函数类
    """

    def __init__(self, s: tuple):
        t = s[0].split('.')
        self.name = t[-1]  # 函数名
        t = t[:-1]
        self.to_class = ''
        for i in t:
            self.to_class += i + '.'
        self.to_class = self.to_class[:-1]  # 函数所属类
        t = s[1].split(',')
        self.args = []
        for i in t:
            self.args.append(i)
        self.returnType = s[2]  # 返回类型

    def format(self):
        return {'to_class': self.to_class, 'name': self.name, 'args': self.args, 'return': self.returnType}

    def src(self):
        """
        # 字符串表示函数，由于提取的api存在某些类无具体路径，因此参数和返回类型都是不包含路径的类名
        :return:
        """
        res = ''
        res += self.to_class + '.'
        # res += self.to_class.split('.')[-1]
        res += self.name
        res += '('
        if len(self.args) > 0:
            for a in self.args:  # java.lang.object -> object
                res += a.split('.')[-1] + ','
            res = res[:-1]
        res += ')'
        res += self.returnType.split('.')[-1]
        return res


def load_api_list(src="E:\\APPDNA\\gcn\\api.txt") -> (list, list):
    """
    从txt文件中获取api列表
    :return: 返回字典形式的api列表和字符串形式的api列表
    """
    f = open(src, 'r')
    cnt = f.read()
    f.close()
    pattern = re.compile(r'^(.*)\((.*)\)(.*)$', re.M)
    methods = re.findall(pattern, cnt)
    apis_src = []
    apis = []
    for i in methods:
        apis.append(Method(i).format())
        apis_src.append(Method(i).src())
    return apis, apis_src
